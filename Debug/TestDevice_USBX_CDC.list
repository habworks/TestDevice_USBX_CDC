
TestDevice_USBX_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012120  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  080122e0  080122e0  000222e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801282c  0801282c  000300c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801282c  0801282c  0002282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012834  08012834  000300c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012834  08012834  00022834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012838  08012838  00022838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  0801283c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064d0  200000c8  08012904  000300c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006598  08012904  00036598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00064731  00000000  00000000  0003013b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ef45  00000000  00000000  0009486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002708  00000000  00000000  000a37b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b59  00000000  00000000  000a5ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004011f  00000000  00000000  000a7a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00058d7c  00000000  00000000  000e7b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00122359  00000000  00000000  001408b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082d8  00000000  00000000  00262c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f0  00000000  00000000  0026aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000c8 	.word	0x200000c8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080122c8 	.word	0x080122c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000cc 	.word	0x200000cc
 80001fc:	080122c8 	.word	0x080122c8

08000200 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000200:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000202:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000206:	4919      	ldr	r1, [pc, #100]	; (800026c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000208:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800020c:	4818      	ldr	r0, [pc, #96]	; (8000270 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800020e:	4917      	ldr	r1, [pc, #92]	; (800026c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000210:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000212:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000214:	4817      	ldr	r0, [pc, #92]	; (8000274 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000216:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000218:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800021c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800021e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000222:	4915      	ldr	r1, [pc, #84]	; (8000278 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000224:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000226:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800022a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800022c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000230:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000234:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000238:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800023c:	490f      	ldr	r1, [pc, #60]	; (800027c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800023e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000242:	4770      	bx	lr

08000244 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_BadHandler>

08000248 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_HardfaultHandler>

0800024c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800024c:	f7ff bffe 	b.w	800024c <__tx_SVCallHandler>

08000250 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000250:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000252:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000256:	4770      	bx	lr

08000258 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000258:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800025a:	f000 f891 	bl	8000380 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800025e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000262:	4770      	bx	lr

08000264 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_NMIHandler>

08000268 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800026c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000270:	200056b8 	.word	0x200056b8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000274:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000278:	00124f7f 	.word	0x00124f7f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800027c:	40ff0000 	.word	0x40ff0000

08000280 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000280:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000286:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000288:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800028c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000290:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000294:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000296:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800029a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800029e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002a2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002a6:	f3bf 8f6f 	isb	sy

080002aa <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002aa:	e7fe      	b.n	80002aa <__tx_wait_here>

080002ac <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ac:	4821      	ldr	r0, [pc, #132]	; (8000334 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002b0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002b4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002b6:	b191      	cbz	r1, 80002de <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002b8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ba:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002be:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002c2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002c6:	d101      	bne.n	80002cc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002c8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002cc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002cc:	4c1b      	ldr	r4, [pc, #108]	; (800033c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ce:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002d2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002d4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002d8:	b10d      	cbz	r5, 80002de <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002da:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002dc:	6023      	str	r3, [r4, #0]

080002de <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002de:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002e0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002e2:	b1b1      	cbz	r1, 8000312 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002e4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80002e6:	b662      	cpsie	i

080002e8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002e8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ea:	4c14      	ldr	r4, [pc, #80]	; (800033c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002ec:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ee:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002f2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002f4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002f6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002fa:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002fe:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000302:	d101      	bne.n	8000308 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000304:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000308 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000308:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800030c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000310:	4770      	bx	lr

08000312 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000312:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000314:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000316:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000318:	b909      	cbnz	r1, 800031e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800031c:	e7f9      	b.n	8000312 <__tx_ts_wait>

0800031e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800031e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000322:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000326:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800032c:	e7dc      	b.n	80002e8 <__tx_ts_restore>

0800032e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800032e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	20005754 	.word	0x20005754
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	200056bc 	.word	0x200056bc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000338:	200056c0 	.word	0x200056c0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	20005cc0 	.word	0x20005cc0

08000340 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000340:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000342:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000346:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800034a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800034e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000350:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000354:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000356:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000358:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800035a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800035c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800035e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000360:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000362:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000364:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000366:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800036c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800036e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000372:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000374:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800037a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800037c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800037e:	4770      	bx	lr

08000380 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000380:	4922      	ldr	r1, [pc, #136]	; (800040c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000382:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000384:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000388:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800038c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800038e:	b13a      	cbz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000390:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000394:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000396:	b91a      	cbnz	r2, 80003a0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800039a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800039e:	6018      	str	r0, [r3, #0]

080003a0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003a0:	491d      	ldr	r1, [pc, #116]	; (8000418 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003a2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003a4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003a6:	b122      	cbz	r2, 80003b2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003aa:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ae:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003b0:	e008      	b.n	80003c4 <__tx_timer_done>

080003b2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003b2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003b8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ba:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003bc:	d101      	bne.n	80003c2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003c0:	6818      	ldr	r0, [r3, #0]

080003c2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003c2:	6008      	str	r0, [r1, #0]

080003c4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003c6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003c8:	b912      	cbnz	r2, 80003d0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ca:	4914      	ldr	r1, [pc, #80]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003cc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ce:	b1d0      	cbz	r0, 8000406 <__tx_timer_nothing_expired>

080003d0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003d0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003d4:	4911      	ldr	r1, [pc, #68]	; (800041c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003d6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003d8:	b108      	cbz	r0, 80003de <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003da:	f00b f98b 	bl	800b6f4 <_tx_timer_expiration_process>

080003de <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003e0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003e2:	b172      	cbz	r2, 8000402 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003e4:	f00b f8f8 	bl	800b5d8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ea:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003ec:	b949      	cbnz	r1, 8000402 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ee:	480f      	ldr	r0, [pc, #60]	; (800042c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003f0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003f4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003fc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003fe:	d000      	beq.n	8000402 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000400:	6002      	str	r2, [r0, #0]

08000402 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000402:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000406 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000406:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	20005760 	.word	0x20005760
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000410:	20005cc0 	.word	0x20005cc0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	20005764 	.word	0x20005764
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000418:	200057f0 	.word	0x200057f0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800041c:	200057f4 	.word	0x200057f4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000420:	200057ec 	.word	0x200057ec
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000424:	200057e8 	.word	0x200057e8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	20005754 	.word	0x20005754
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042c:	200056bc 	.word	0x200056bc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000430:	200056c0 	.word	0x200056c0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000434:	e000ed04 	.word	0xe000ed04

08000438 <strcmp>:
 8000438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800043c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000440:	2a01      	cmp	r2, #1
 8000442:	bf28      	it	cs
 8000444:	429a      	cmpcs	r2, r3
 8000446:	d0f7      	beq.n	8000438 <strcmp>
 8000448:	1ad0      	subs	r0, r2, r3
 800044a:	4770      	bx	lr

0800044c <strlen>:
 800044c:	4603      	mov	r3, r0
 800044e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000452:	2a00      	cmp	r2, #0
 8000454:	d1fb      	bne.n	800044e <strlen+0x2>
 8000456:	1a18      	subs	r0, r3, r0
 8000458:	3801      	subs	r0, #1
 800045a:	4770      	bx	lr
 800045c:	0000      	movs	r0, r0
	...

08000460 <memchr>:
 8000460:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000464:	2a10      	cmp	r2, #16
 8000466:	db2b      	blt.n	80004c0 <memchr+0x60>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	d008      	beq.n	8000480 <memchr+0x20>
 800046e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000472:	3a01      	subs	r2, #1
 8000474:	428b      	cmp	r3, r1
 8000476:	d02d      	beq.n	80004d4 <memchr+0x74>
 8000478:	f010 0f07 	tst.w	r0, #7
 800047c:	b342      	cbz	r2, 80004d0 <memchr+0x70>
 800047e:	d1f6      	bne.n	800046e <memchr+0xe>
 8000480:	b4f0      	push	{r4, r5, r6, r7}
 8000482:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000486:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800048a:	f022 0407 	bic.w	r4, r2, #7
 800048e:	f07f 0700 	mvns.w	r7, #0
 8000492:	2300      	movs	r3, #0
 8000494:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000498:	3c08      	subs	r4, #8
 800049a:	ea85 0501 	eor.w	r5, r5, r1
 800049e:	ea86 0601 	eor.w	r6, r6, r1
 80004a2:	fa85 f547 	uadd8	r5, r5, r7
 80004a6:	faa3 f587 	sel	r5, r3, r7
 80004aa:	fa86 f647 	uadd8	r6, r6, r7
 80004ae:	faa5 f687 	sel	r6, r5, r7
 80004b2:	b98e      	cbnz	r6, 80004d8 <memchr+0x78>
 80004b4:	d1ee      	bne.n	8000494 <memchr+0x34>
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004bc:	f002 0207 	and.w	r2, r2, #7
 80004c0:	b132      	cbz	r2, 80004d0 <memchr+0x70>
 80004c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c6:	3a01      	subs	r2, #1
 80004c8:	ea83 0301 	eor.w	r3, r3, r1
 80004cc:	b113      	cbz	r3, 80004d4 <memchr+0x74>
 80004ce:	d1f8      	bne.n	80004c2 <memchr+0x62>
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4770      	bx	lr
 80004d8:	2d00      	cmp	r5, #0
 80004da:	bf06      	itte	eq
 80004dc:	4635      	moveq	r5, r6
 80004de:	3803      	subeq	r0, #3
 80004e0:	3807      	subne	r0, #7
 80004e2:	f015 0f01 	tst.w	r5, #1
 80004e6:	d107      	bne.n	80004f8 <memchr+0x98>
 80004e8:	3001      	adds	r0, #1
 80004ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ee:	bf02      	ittt	eq
 80004f0:	3001      	addeq	r0, #1
 80004f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004f6:	3001      	addeq	r0, #1
 80004f8:	bcf0      	pop	{r4, r5, r6, r7}
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__aeabi_uldivmod>:
 8000500:	b953      	cbnz	r3, 8000518 <__aeabi_uldivmod+0x18>
 8000502:	b94a      	cbnz	r2, 8000518 <__aeabi_uldivmod+0x18>
 8000504:	2900      	cmp	r1, #0
 8000506:	bf08      	it	eq
 8000508:	2800      	cmpeq	r0, #0
 800050a:	bf1c      	itt	ne
 800050c:	f04f 31ff 	movne.w	r1, #4294967295
 8000510:	f04f 30ff 	movne.w	r0, #4294967295
 8000514:	f000 b970 	b.w	80007f8 <__aeabi_idiv0>
 8000518:	f1ad 0c08 	sub.w	ip, sp, #8
 800051c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000520:	f000 f806 	bl	8000530 <__udivmoddi4>
 8000524:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800052c:	b004      	add	sp, #16
 800052e:	4770      	bx	lr

08000530 <__udivmoddi4>:
 8000530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000534:	9e08      	ldr	r6, [sp, #32]
 8000536:	460d      	mov	r5, r1
 8000538:	4604      	mov	r4, r0
 800053a:	460f      	mov	r7, r1
 800053c:	2b00      	cmp	r3, #0
 800053e:	d14a      	bne.n	80005d6 <__udivmoddi4+0xa6>
 8000540:	428a      	cmp	r2, r1
 8000542:	4694      	mov	ip, r2
 8000544:	d965      	bls.n	8000612 <__udivmoddi4+0xe2>
 8000546:	fab2 f382 	clz	r3, r2
 800054a:	b143      	cbz	r3, 800055e <__udivmoddi4+0x2e>
 800054c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000550:	f1c3 0220 	rsb	r2, r3, #32
 8000554:	409f      	lsls	r7, r3
 8000556:	fa20 f202 	lsr.w	r2, r0, r2
 800055a:	4317      	orrs	r7, r2
 800055c:	409c      	lsls	r4, r3
 800055e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000562:	fa1f f58c 	uxth.w	r5, ip
 8000566:	fbb7 f1fe 	udiv	r1, r7, lr
 800056a:	0c22      	lsrs	r2, r4, #16
 800056c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000570:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000574:	fb01 f005 	mul.w	r0, r1, r5
 8000578:	4290      	cmp	r0, r2
 800057a:	d90a      	bls.n	8000592 <__udivmoddi4+0x62>
 800057c:	eb1c 0202 	adds.w	r2, ip, r2
 8000580:	f101 37ff 	add.w	r7, r1, #4294967295
 8000584:	f080 811c 	bcs.w	80007c0 <__udivmoddi4+0x290>
 8000588:	4290      	cmp	r0, r2
 800058a:	f240 8119 	bls.w	80007c0 <__udivmoddi4+0x290>
 800058e:	3902      	subs	r1, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a12      	subs	r2, r2, r0
 8000594:	b2a4      	uxth	r4, r4
 8000596:	fbb2 f0fe 	udiv	r0, r2, lr
 800059a:	fb0e 2210 	mls	r2, lr, r0, r2
 800059e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005a2:	fb00 f505 	mul.w	r5, r0, r5
 80005a6:	42a5      	cmp	r5, r4
 80005a8:	d90a      	bls.n	80005c0 <__udivmoddi4+0x90>
 80005aa:	eb1c 0404 	adds.w	r4, ip, r4
 80005ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80005b2:	f080 8107 	bcs.w	80007c4 <__udivmoddi4+0x294>
 80005b6:	42a5      	cmp	r5, r4
 80005b8:	f240 8104 	bls.w	80007c4 <__udivmoddi4+0x294>
 80005bc:	4464      	add	r4, ip
 80005be:	3802      	subs	r0, #2
 80005c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	2100      	movs	r1, #0
 80005c8:	b11e      	cbz	r6, 80005d2 <__udivmoddi4+0xa2>
 80005ca:	40dc      	lsrs	r4, r3
 80005cc:	2300      	movs	r3, #0
 80005ce:	e9c6 4300 	strd	r4, r3, [r6]
 80005d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d908      	bls.n	80005ec <__udivmoddi4+0xbc>
 80005da:	2e00      	cmp	r6, #0
 80005dc:	f000 80ed 	beq.w	80007ba <__udivmoddi4+0x28a>
 80005e0:	2100      	movs	r1, #0
 80005e2:	e9c6 0500 	strd	r0, r5, [r6]
 80005e6:	4608      	mov	r0, r1
 80005e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ec:	fab3 f183 	clz	r1, r3
 80005f0:	2900      	cmp	r1, #0
 80005f2:	d149      	bne.n	8000688 <__udivmoddi4+0x158>
 80005f4:	42ab      	cmp	r3, r5
 80005f6:	d302      	bcc.n	80005fe <__udivmoddi4+0xce>
 80005f8:	4282      	cmp	r2, r0
 80005fa:	f200 80f8 	bhi.w	80007ee <__udivmoddi4+0x2be>
 80005fe:	1a84      	subs	r4, r0, r2
 8000600:	eb65 0203 	sbc.w	r2, r5, r3
 8000604:	2001      	movs	r0, #1
 8000606:	4617      	mov	r7, r2
 8000608:	2e00      	cmp	r6, #0
 800060a:	d0e2      	beq.n	80005d2 <__udivmoddi4+0xa2>
 800060c:	e9c6 4700 	strd	r4, r7, [r6]
 8000610:	e7df      	b.n	80005d2 <__udivmoddi4+0xa2>
 8000612:	b902      	cbnz	r2, 8000616 <__udivmoddi4+0xe6>
 8000614:	deff      	udf	#255	; 0xff
 8000616:	fab2 f382 	clz	r3, r2
 800061a:	2b00      	cmp	r3, #0
 800061c:	f040 8090 	bne.w	8000740 <__udivmoddi4+0x210>
 8000620:	1a8a      	subs	r2, r1, r2
 8000622:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000626:	fa1f fe8c 	uxth.w	lr, ip
 800062a:	2101      	movs	r1, #1
 800062c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000630:	fb07 2015 	mls	r0, r7, r5, r2
 8000634:	0c22      	lsrs	r2, r4, #16
 8000636:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800063a:	fb0e f005 	mul.w	r0, lr, r5
 800063e:	4290      	cmp	r0, r2
 8000640:	d908      	bls.n	8000654 <__udivmoddi4+0x124>
 8000642:	eb1c 0202 	adds.w	r2, ip, r2
 8000646:	f105 38ff 	add.w	r8, r5, #4294967295
 800064a:	d202      	bcs.n	8000652 <__udivmoddi4+0x122>
 800064c:	4290      	cmp	r0, r2
 800064e:	f200 80cb 	bhi.w	80007e8 <__udivmoddi4+0x2b8>
 8000652:	4645      	mov	r5, r8
 8000654:	1a12      	subs	r2, r2, r0
 8000656:	b2a4      	uxth	r4, r4
 8000658:	fbb2 f0f7 	udiv	r0, r2, r7
 800065c:	fb07 2210 	mls	r2, r7, r0, r2
 8000660:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000664:	fb0e fe00 	mul.w	lr, lr, r0
 8000668:	45a6      	cmp	lr, r4
 800066a:	d908      	bls.n	800067e <__udivmoddi4+0x14e>
 800066c:	eb1c 0404 	adds.w	r4, ip, r4
 8000670:	f100 32ff 	add.w	r2, r0, #4294967295
 8000674:	d202      	bcs.n	800067c <__udivmoddi4+0x14c>
 8000676:	45a6      	cmp	lr, r4
 8000678:	f200 80bb 	bhi.w	80007f2 <__udivmoddi4+0x2c2>
 800067c:	4610      	mov	r0, r2
 800067e:	eba4 040e 	sub.w	r4, r4, lr
 8000682:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x98>
 8000688:	f1c1 0720 	rsb	r7, r1, #32
 800068c:	408b      	lsls	r3, r1
 800068e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000692:	ea4c 0c03 	orr.w	ip, ip, r3
 8000696:	fa05 f401 	lsl.w	r4, r5, r1
 800069a:	fa20 f307 	lsr.w	r3, r0, r7
 800069e:	40fd      	lsrs	r5, r7
 80006a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006a4:	4323      	orrs	r3, r4
 80006a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80006aa:	fa1f fe8c 	uxth.w	lr, ip
 80006ae:	fb09 5518 	mls	r5, r9, r8, r5
 80006b2:	0c1c      	lsrs	r4, r3, #16
 80006b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006b8:	fb08 f50e 	mul.w	r5, r8, lr
 80006bc:	42a5      	cmp	r5, r4
 80006be:	fa02 f201 	lsl.w	r2, r2, r1
 80006c2:	fa00 f001 	lsl.w	r0, r0, r1
 80006c6:	d90b      	bls.n	80006e0 <__udivmoddi4+0x1b0>
 80006c8:	eb1c 0404 	adds.w	r4, ip, r4
 80006cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80006d0:	f080 8088 	bcs.w	80007e4 <__udivmoddi4+0x2b4>
 80006d4:	42a5      	cmp	r5, r4
 80006d6:	f240 8085 	bls.w	80007e4 <__udivmoddi4+0x2b4>
 80006da:	f1a8 0802 	sub.w	r8, r8, #2
 80006de:	4464      	add	r4, ip
 80006e0:	1b64      	subs	r4, r4, r5
 80006e2:	b29d      	uxth	r5, r3
 80006e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80006e8:	fb09 4413 	mls	r4, r9, r3, r4
 80006ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80006f4:	45a6      	cmp	lr, r4
 80006f6:	d908      	bls.n	800070a <__udivmoddi4+0x1da>
 80006f8:	eb1c 0404 	adds.w	r4, ip, r4
 80006fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000700:	d26c      	bcs.n	80007dc <__udivmoddi4+0x2ac>
 8000702:	45a6      	cmp	lr, r4
 8000704:	d96a      	bls.n	80007dc <__udivmoddi4+0x2ac>
 8000706:	3b02      	subs	r3, #2
 8000708:	4464      	add	r4, ip
 800070a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800070e:	fba3 9502 	umull	r9, r5, r3, r2
 8000712:	eba4 040e 	sub.w	r4, r4, lr
 8000716:	42ac      	cmp	r4, r5
 8000718:	46c8      	mov	r8, r9
 800071a:	46ae      	mov	lr, r5
 800071c:	d356      	bcc.n	80007cc <__udivmoddi4+0x29c>
 800071e:	d053      	beq.n	80007c8 <__udivmoddi4+0x298>
 8000720:	b156      	cbz	r6, 8000738 <__udivmoddi4+0x208>
 8000722:	ebb0 0208 	subs.w	r2, r0, r8
 8000726:	eb64 040e 	sbc.w	r4, r4, lr
 800072a:	fa04 f707 	lsl.w	r7, r4, r7
 800072e:	40ca      	lsrs	r2, r1
 8000730:	40cc      	lsrs	r4, r1
 8000732:	4317      	orrs	r7, r2
 8000734:	e9c6 7400 	strd	r7, r4, [r6]
 8000738:	4618      	mov	r0, r3
 800073a:	2100      	movs	r1, #0
 800073c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000740:	f1c3 0120 	rsb	r1, r3, #32
 8000744:	fa02 fc03 	lsl.w	ip, r2, r3
 8000748:	fa20 f201 	lsr.w	r2, r0, r1
 800074c:	fa25 f101 	lsr.w	r1, r5, r1
 8000750:	409d      	lsls	r5, r3
 8000752:	432a      	orrs	r2, r5
 8000754:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000758:	fa1f fe8c 	uxth.w	lr, ip
 800075c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000760:	fb07 1510 	mls	r5, r7, r0, r1
 8000764:	0c11      	lsrs	r1, r2, #16
 8000766:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800076a:	fb00 f50e 	mul.w	r5, r0, lr
 800076e:	428d      	cmp	r5, r1
 8000770:	fa04 f403 	lsl.w	r4, r4, r3
 8000774:	d908      	bls.n	8000788 <__udivmoddi4+0x258>
 8000776:	eb1c 0101 	adds.w	r1, ip, r1
 800077a:	f100 38ff 	add.w	r8, r0, #4294967295
 800077e:	d22f      	bcs.n	80007e0 <__udivmoddi4+0x2b0>
 8000780:	428d      	cmp	r5, r1
 8000782:	d92d      	bls.n	80007e0 <__udivmoddi4+0x2b0>
 8000784:	3802      	subs	r0, #2
 8000786:	4461      	add	r1, ip
 8000788:	1b49      	subs	r1, r1, r5
 800078a:	b292      	uxth	r2, r2
 800078c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000790:	fb07 1115 	mls	r1, r7, r5, r1
 8000794:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000798:	fb05 f10e 	mul.w	r1, r5, lr
 800079c:	4291      	cmp	r1, r2
 800079e:	d908      	bls.n	80007b2 <__udivmoddi4+0x282>
 80007a0:	eb1c 0202 	adds.w	r2, ip, r2
 80007a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80007a8:	d216      	bcs.n	80007d8 <__udivmoddi4+0x2a8>
 80007aa:	4291      	cmp	r1, r2
 80007ac:	d914      	bls.n	80007d8 <__udivmoddi4+0x2a8>
 80007ae:	3d02      	subs	r5, #2
 80007b0:	4462      	add	r2, ip
 80007b2:	1a52      	subs	r2, r2, r1
 80007b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80007b8:	e738      	b.n	800062c <__udivmoddi4+0xfc>
 80007ba:	4631      	mov	r1, r6
 80007bc:	4630      	mov	r0, r6
 80007be:	e708      	b.n	80005d2 <__udivmoddi4+0xa2>
 80007c0:	4639      	mov	r1, r7
 80007c2:	e6e6      	b.n	8000592 <__udivmoddi4+0x62>
 80007c4:	4610      	mov	r0, r2
 80007c6:	e6fb      	b.n	80005c0 <__udivmoddi4+0x90>
 80007c8:	4548      	cmp	r0, r9
 80007ca:	d2a9      	bcs.n	8000720 <__udivmoddi4+0x1f0>
 80007cc:	ebb9 0802 	subs.w	r8, r9, r2
 80007d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007d4:	3b01      	subs	r3, #1
 80007d6:	e7a3      	b.n	8000720 <__udivmoddi4+0x1f0>
 80007d8:	4645      	mov	r5, r8
 80007da:	e7ea      	b.n	80007b2 <__udivmoddi4+0x282>
 80007dc:	462b      	mov	r3, r5
 80007de:	e794      	b.n	800070a <__udivmoddi4+0x1da>
 80007e0:	4640      	mov	r0, r8
 80007e2:	e7d1      	b.n	8000788 <__udivmoddi4+0x258>
 80007e4:	46d0      	mov	r8, sl
 80007e6:	e77b      	b.n	80006e0 <__udivmoddi4+0x1b0>
 80007e8:	3d02      	subs	r5, #2
 80007ea:	4462      	add	r2, ip
 80007ec:	e732      	b.n	8000654 <__udivmoddi4+0x124>
 80007ee:	4608      	mov	r0, r1
 80007f0:	e70a      	b.n	8000608 <__udivmoddi4+0xd8>
 80007f2:	4464      	add	r4, ip
 80007f4:	3802      	subs	r0, #2
 80007f6:	e742      	b.n	800067e <__udivmoddi4+0x14e>

080007f8 <__aeabi_idiv0>:
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af02      	add	r7, sp, #8
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000808:	2334      	movs	r3, #52	; 0x34
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <tx_application_define+0x6c>)
 8000812:	4916      	ldr	r1, [pc, #88]	; (800086c <tx_application_define+0x70>)
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <tx_application_define+0x74>)
 8000816:	f00b fa17 	bl	800bc48 <_txe_byte_pool_create>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d109      	bne.n	8000834 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <tx_application_define+0x74>)
 8000822:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000824:	68b8      	ldr	r0, [r7, #8]
 8000826:	f000 fd17 	bl	8001258 <App_ThreadX_Init>
 800082a:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d000      	beq.n	8000834 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000832:	e7fe      	b.n	8000832 <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000834:	2334      	movs	r3, #52	; 0x34
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <tx_application_define+0x78>)
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <tx_application_define+0x7c>)
 8000840:	480e      	ldr	r0, [pc, #56]	; (800087c <tx_application_define+0x80>)
 8000842:	f00b fa01 	bl	800bc48 <_txe_byte_pool_create>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d109      	bne.n	8000860 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <tx_application_define+0x80>)
 800084e:	60bb      	str	r3, [r7, #8]
    status = MX_USBX_Device_Init(memory_ptr);
 8000850:	68b8      	ldr	r0, [r7, #8]
 8000852:	f00f fd0b 	bl	801026c <MX_USBX_Device_Init>
 8000856:	60f8      	str	r0, [r7, #12]
    if (status != UX_SUCCESS)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d000      	beq.n	8000860 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_USBX_Device_Init_Error */
      while(1)
 800085e:	e7fe      	b.n	800085e <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000e4 	.word	0x200000e4
 800086c:	080122e0 	.word	0x080122e0
 8000870:	200004e4 	.word	0x200004e4
 8000874:	20000518 	.word	0x20000518
 8000878:	080122f4 	.word	0x080122f4
 800087c:	20003118 	.word	0x20003118

08000880 <debugConsoleTask>:
* @return VOID: ThreadX void
*
* STEP 1: If Debug Port user input send the input to be parsed for a command from the list
*/
VOID debugConsoleTask(ULONG InitValue)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    uint8_t DataBuffer[10];
    uint32_t DataSize = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]

    // STEP 1: If Debug Port user input send the input to be parsed for a command from the list
    while(1)
    {
    	UART_DMA_Receive(&TestApp.Hardware.UART_2, DataBuffer, &DataSize);
 800088c:	f107 0208 	add.w	r2, r7, #8
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4619      	mov	r1, r3
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <debugConsoleTask+0x3c>)
 8000898:	f00f fc10 	bl	80100bc <UART_DMA_Receive>
        if (DataSize)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d007      	beq.n	80008b2 <debugConsoleTask+0x32>
        {
            debugConsoleCommandParse(TestApp.DebugConsole, (char *)DataBuffer, DataSize);
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <debugConsoleTask+0x40>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f107 010c 	add.w	r1, r7, #12
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f93d 	bl	8000b2c <debugConsoleCommandParse>
        }
        tx_thread_sleep(1);  // Hab added for management
 80008b2:	2001      	movs	r0, #1
 80008b4:	f00a fbbe 	bl	800b034 <_tx_thread_sleep>
    	UART_DMA_Receive(&TestApp.Hardware.UART_2, DataBuffer, &DataSize);
 80008b8:	e7e8      	b.n	800088c <debugConsoleTask+0xc>
 80008ba:	bf00      	nop
 80008bc:	20004ee8 	.word	0x20004ee8
 80008c0:	20004ee4 	.word	0x20004ee4

080008c4 <Init_DebugConsoleCommand>:
*
* STEP 1: Allocate memory for handle
* STEP 2: Reset struct member and clear command names and descriptions to start
*/
Type_ConsoleCommandHandle * Init_DebugConsoleCommand(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
    // STEP 1: Allocate memory for handle
    Type_ConsoleCommandHandle *Handle = (Type_ConsoleCommandHandle *)malloc(sizeof(Type_ConsoleCommandHandle));
 80008ca:	f240 60a4 	movw	r0, #1700	; 0x6a4
 80008ce:	f010 fce3 	bl	8011298 <malloc>
 80008d2:	4603      	mov	r3, r0
 80008d4:	603b      	str	r3, [r7, #0]

    // STEP 2: Reset struct member and clear command names and descriptions to start
    if (Handle != NULL)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d039      	beq.n	8000950 <Init_DebugConsoleCommand+0x8c>
    {
        Handle->Enable = true;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
        Handle->TotalCommandsAdded = 0;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2200      	movs	r2, #0
 80008e6:	709a      	strb	r2, [r3, #2]
        Handle->NextCommandIndex = 0;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	705a      	strb	r2, [r3, #1]
        Handle->LastCommand = debugConsoleCommandHelp;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	4a1a      	ldr	r2, [pc, #104]	; (800095c <Init_DebugConsoleCommand+0x98>)
 80008f2:	605a      	str	r2, [r3, #4]
        for (uint8_t Index = 0; Index < MAX_CONSOLE_COMMANDS; Index++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	71fb      	strb	r3, [r7, #7]
 80008f8:	e025      	b.n	8000946 <Init_DebugConsoleCommand+0x82>
        {
            memset(&Handle->Command[Index].CommandName, 0x00, MAX_COMMAND_LENGTH);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	224c      	movs	r2, #76	; 0x4c
 80008fe:	fb02 f303 	mul.w	r3, r2, r3
 8000902:	3308      	adds	r3, #8
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	3301      	adds	r3, #1
 800090a:	2215      	movs	r2, #21
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f011 f848 	bl	80119a4 <memset>
            memset(&Handle->Command[Index].CommandDescription, 0x00, MAX_DESCRIPTION_LENGTH);
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	224c      	movs	r2, #76	; 0x4c
 8000918:	fb02 f303 	mul.w	r3, r2, r3
 800091c:	3318      	adds	r3, #24
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	4413      	add	r3, r2
 8000922:	3306      	adds	r3, #6
 8000924:	2232      	movs	r2, #50	; 0x32
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f011 f83b 	bl	80119a4 <memset>
            Handle->Command[Index].CommandFunction = NULL;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	214c      	movs	r1, #76	; 0x4c
 8000934:	fb01 f303 	mul.w	r3, r1, r3
 8000938:	4413      	add	r3, r2
 800093a:	3350      	adds	r3, #80	; 0x50
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
        for (uint8_t Index = 0; Index < MAX_CONSOLE_COMMANDS; Index++)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	3301      	adds	r3, #1
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b15      	cmp	r3, #21
 800094a:	d9d6      	bls.n	80008fa <Init_DebugConsoleCommand+0x36>
        }
        return(Handle);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	e000      	b.n	8000952 <Init_DebugConsoleCommand+0x8e>
    }
    else
        return(NULL);
 8000950:	2300      	movs	r3, #0

} // END OF Init_ConsoleCommand
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	08000d45 	.word	0x08000d45

08000960 <debugConsoleCommandAdd>:
* STEP 1: Check for errors in number of commands, command name and command description length
* STEP 2: Associate the command name, description and function with the next available command index
* STEP 3: Increment total number of commands and next command index
*/
Type_CommandError debugConsoleCommandAdd(Type_ConsoleCommandHandle *Handle, const char *CommandName, const char *CommandDescription, ConsoleCommand consoleCommandFunction, Type_Command CommandType)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
    // STEP 1: Check for errors in number of commands, command name and command description length
    if (Handle->TotalCommandsAdded >= MAX_CONSOLE_COMMANDS)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	789b      	ldrb	r3, [r3, #2]
 8000972:	2b15      	cmp	r3, #21
 8000974:	d901      	bls.n	800097a <debugConsoleCommandAdd+0x1a>
        return(MAX_COMMANDS_EXCEEDED);
 8000976:	2301      	movs	r3, #1
 8000978:	e051      	b.n	8000a1e <debugConsoleCommandAdd+0xbe>
    if (strlen(CommandName) > MAX_COMMAND_LENGTH)
 800097a:	68b8      	ldr	r0, [r7, #8]
 800097c:	f7ff fd66 	bl	800044c <strlen>
 8000980:	4603      	mov	r3, r0
 8000982:	2b15      	cmp	r3, #21
 8000984:	d901      	bls.n	800098a <debugConsoleCommandAdd+0x2a>
        return(COMMAND_LENGHT_EXCEEDED);
 8000986:	2302      	movs	r3, #2
 8000988:	e049      	b.n	8000a1e <debugConsoleCommandAdd+0xbe>
    if (strlen(CommandDescription) > MAX_DESCRIPTION_LENGTH)
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fd5e 	bl	800044c <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	2b32      	cmp	r3, #50	; 0x32
 8000994:	d901      	bls.n	800099a <debugConsoleCommandAdd+0x3a>
        return(COMMAND_DESCRIPTION_EXCEEDED);
 8000996:	2303      	movs	r3, #3
 8000998:	e041      	b.n	8000a1e <debugConsoleCommandAdd+0xbe>

    // STEP 2: Associate the command name, description and function with the next available command index
    strcpy(&Handle->Command[Handle->NextCommandIndex].CommandName[0], CommandName);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	785b      	ldrb	r3, [r3, #1]
 800099e:	461a      	mov	r2, r3
 80009a0:	234c      	movs	r3, #76	; 0x4c
 80009a2:	fb02 f303 	mul.w	r3, r2, r3
 80009a6:	3308      	adds	r3, #8
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	3301      	adds	r3, #1
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f011 f8a8 	bl	8011b06 <strcpy>
    strcpy(&Handle->Command[Handle->NextCommandIndex].CommandDescription[0], CommandDescription);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	461a      	mov	r2, r3
 80009bc:	234c      	movs	r3, #76	; 0x4c
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	3318      	adds	r3, #24
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	3306      	adds	r3, #6
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f011 f89a 	bl	8011b06 <strcpy>
    Handle->Command[Handle->NextCommandIndex].CommandType = CommandType;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	785b      	ldrb	r3, [r3, #1]
 80009d6:	4619      	mov	r1, r3
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	234c      	movs	r3, #76	; 0x4c
 80009dc:	fb01 f303 	mul.w	r3, r1, r3
 80009e0:	4413      	add	r3, r2
 80009e2:	3308      	adds	r3, #8
 80009e4:	7e3a      	ldrb	r2, [r7, #24]
 80009e6:	701a      	strb	r2, [r3, #0]
    if (consoleCommandFunction != NULL)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00a      	beq.n	8000a04 <debugConsoleCommandAdd+0xa4>
        Handle->Command[Handle->NextCommandIndex].CommandFunction = consoleCommandFunction;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	4619      	mov	r1, r3
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	234c      	movs	r3, #76	; 0x4c
 80009f8:	fb01 f303 	mul.w	r3, r1, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	3350      	adds	r3, #80	; 0x50
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	601a      	str	r2, [r3, #0]

    // STEP 3: Increment total number of commands and next command index
    Handle->TotalCommandsAdded++;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	789b      	ldrb	r3, [r3, #2]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	709a      	strb	r2, [r3, #2]
    Handle->NextCommandIndex++;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	705a      	strb	r2, [r3, #1]

    return(COMMAND_OK);
 8000a1c:	2300      	movs	r3, #0

} // END OF debugConsoleCommandAdd
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <debugConsoleCommandSearch>:
* @return True if the command name was found in the list and CommandIndex pointer is set accordingly
*
* STEP 1: Linear search for command - if found return true and pass by reference the command index
*/
bool debugConsoleCommandSearch(Type_ConsoleCommandHandle *Handle, const char *CommandName, uint8_t *CommandIndex)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
    // STEP 1: Linear search for command - if found return true and pass by reference the command index
    for (uint8_t Index = 0; Index < Handle->TotalCommandsAdded; Index++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	75fb      	strb	r3, [r7, #23]
 8000a38:	e069      	b.n	8000b0e <debugConsoleCommandSearch+0xe6>
    {
        // Check base listing first then check added commands
        if (strcmp(CommandName, "Clear") == 0)
 8000a3a:	493a      	ldr	r1, [pc, #232]	; (8000b24 <debugConsoleCommandSearch+0xfc>)
 8000a3c:	68b8      	ldr	r0, [r7, #8]
 8000a3e:	f7ff fcfb 	bl	8000438 <strcmp>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d103      	bne.n	8000a50 <debugConsoleCommandSearch+0x28>
        {
            terminal_ClearScreen();
 8000a48:	f000 fa5e 	bl	8000f08 <terminal_ClearScreen>
            return(false);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e064      	b.n	8000b1a <debugConsoleCommandSearch+0xf2>
        }
        if (strcmp(CommandName, "Help") == 0)
 8000a50:	4935      	ldr	r1, [pc, #212]	; (8000b28 <debugConsoleCommandSearch+0x100>)
 8000a52:	68b8      	ldr	r0, [r7, #8]
 8000a54:	f7ff fcf0 	bl	8000438 <strcmp>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <debugConsoleCommandSearch+0x3e>
        {
            debugConsoleCommandHelp();
 8000a5e:	f000 f971 	bl	8000d44 <debugConsoleCommandHelp>
            return(false);
 8000a62:	2300      	movs	r3, #0
 8000a64:	e059      	b.n	8000b1a <debugConsoleCommandSearch+0xf2>
        }
        // Check added commands: Only look to add command argument (parameter) if partial command
        uint8_t UserEntryStrLen = strlen(CommandName);
 8000a66:	68b8      	ldr	r0, [r7, #8]
 8000a68:	f7ff fcf0 	bl	800044c <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	75bb      	strb	r3, [r7, #22]
        uint8_t CmdStrLen = strlen(&Handle->Command[Index].CommandName[0]);
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
 8000a72:	224c      	movs	r2, #76	; 0x4c
 8000a74:	fb02 f303 	mul.w	r3, r2, r3
 8000a78:	3308      	adds	r3, #8
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fce3 	bl	800044c <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	757b      	strb	r3, [r7, #21]
        if (strncmp(CommandName, &Handle->Command[Index].CommandName[0], CmdStrLen) == 0)
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	224c      	movs	r2, #76	; 0x4c
 8000a8e:	fb02 f303 	mul.w	r3, r2, r3
 8000a92:	3308      	adds	r3, #8
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	3301      	adds	r3, #1
 8000a9a:	7d7a      	ldrb	r2, [r7, #21]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	68b8      	ldr	r0, [r7, #8]
 8000aa0:	f010 ff88 	bl	80119b4 <strncmp>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d12e      	bne.n	8000b08 <debugConsoleCommandSearch+0xe0>
        {
            if (Handle->Command[Index].CommandType == COMPLETE)
 8000aaa:	7dfb      	ldrb	r3, [r7, #23]
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	214c      	movs	r1, #76	; 0x4c
 8000ab0:	fb01 f303 	mul.w	r3, r1, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d104      	bne.n	8000ac8 <debugConsoleCommandSearch+0xa0>
            {
                *CommandIndex = Index;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7dfa      	ldrb	r2, [r7, #23]
 8000ac2:	701a      	strb	r2, [r3, #0]
                return(true);
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e028      	b.n	8000b1a <debugConsoleCommandSearch+0xf2>
            }
            else
            {
                if ((UserEntryStrLen - CmdStrLen) > MAX_PARAMETER_LENGTH)
 8000ac8:	7dba      	ldrb	r2, [r7, #22]
 8000aca:	7d7b      	ldrb	r3, [r7, #21]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	2b14      	cmp	r3, #20
 8000ad0:	d901      	bls.n	8000ad6 <debugConsoleCommandSearch+0xae>
                    return(false);
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e021      	b.n	8000b1a <debugConsoleCommandSearch+0xf2>
                memset(&Handle->PartialCommandParameter, 0x00, MAX_PARAMETER_LENGTH);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8000adc:	2214      	movs	r2, #20
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f010 ff5f 	bl	80119a4 <memset>
                strncpy(Handle->PartialCommandParameter, &CommandName[CmdStrLen], (UserEntryStrLen - CmdStrLen));
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f503 60d2 	add.w	r0, r3, #1680	; 0x690
 8000aec:	7d7b      	ldrb	r3, [r7, #21]
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	18d1      	adds	r1, r2, r3
 8000af2:	7dba      	ldrb	r2, [r7, #22]
 8000af4:	7d7b      	ldrb	r3, [r7, #21]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	461a      	mov	r2, r3
 8000afa:	f010 ff6d 	bl	80119d8 <strncpy>
                *CommandIndex = Index;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7dfa      	ldrb	r2, [r7, #23]
 8000b02:	701a      	strb	r2, [r3, #0]
                return(true);
 8000b04:	2301      	movs	r3, #1
 8000b06:	e008      	b.n	8000b1a <debugConsoleCommandSearch+0xf2>
    for (uint8_t Index = 0; Index < Handle->TotalCommandsAdded; Index++)
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	75fb      	strb	r3, [r7, #23]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	789b      	ldrb	r3, [r3, #2]
 8000b12:	7dfa      	ldrb	r2, [r7, #23]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d390      	bcc.n	8000a3a <debugConsoleCommandSearch+0x12>
            }
        }
    }
    return(false);
 8000b18:	2300      	movs	r3, #0

} // END OF debugConsoleCommandSearch
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	08012308 	.word	0x08012308
 8000b28:	08012310 	.word	0x08012310

08000b2c <debugConsoleCommandParse>:
* STEP 4: If user enters ?, then launch help
* STEP 5: If user enters backspace to undo typing
* STEP 6: Reset the output as is necessary
*/
void debugConsoleCommandParse(Type_ConsoleCommandHandle *Handle, char *CommandChars, uint32_t TotalChars)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
    static char CommandEntry[MAX_DESCRIPTION_LENGTH] = {0};
    static uint8_t CommandCharIndex = 0;
    static bool CommandLengthExceeded = false;
    char *CommandChar;
    bool ResetCommand = false;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	77fb      	strb	r3, [r7, #31]

    for (uint32_t CharIndex = 0; CharIndex < TotalChars; CharIndex++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	e0e8      	b.n	8000d14 <debugConsoleCommandParse+0x1e8>
    {
        CommandChar = &CommandChars[CharIndex];
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	4413      	add	r3, r2
 8000b48:	617b      	str	r3, [r7, #20]
        // STEP 1: For all entries except CR and ` echo the input, build the command entry name and check for errors
        if ((*CommandChar != '\r') && (*CommandChar != '`') && (*CommandChar != '?') && (*CommandChar != '\b'))
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b0d      	cmp	r3, #13
 8000b50:	d032      	beq.n	8000bb8 <debugConsoleCommandParse+0x8c>
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b60      	cmp	r3, #96	; 0x60
 8000b58:	d02e      	beq.n	8000bb8 <debugConsoleCommandParse+0x8c>
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b60:	d02a      	beq.n	8000bb8 <debugConsoleCommandParse+0x8c>
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d026      	beq.n	8000bb8 <debugConsoleCommandParse+0x8c>
        {
            printf("%c", CommandChar[0]);
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f010 fddc 	bl	801172c <putchar>
            fflush(stdout);
 8000b74:	4b6c      	ldr	r3, [pc, #432]	; (8000d28 <debugConsoleCommandParse+0x1fc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f010 fcee 	bl	801155c <fflush>
            if (CommandCharIndex > sizeof(CommandEntry))
 8000b80:	4b6a      	ldr	r3, [pc, #424]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b32      	cmp	r3, #50	; 0x32
 8000b86:	d90a      	bls.n	8000b9e <debugConsoleCommandParse+0x72>
            {
                memset(CommandEntry, 0x00, MAX_COMMAND_LENGTH);
 8000b88:	2215      	movs	r2, #21
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4868      	ldr	r0, [pc, #416]	; (8000d30 <debugConsoleCommandParse+0x204>)
 8000b8e:	f010 ff09 	bl	80119a4 <memset>
                CommandCharIndex = 0;
 8000b92:	4b66      	ldr	r3, [pc, #408]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
                CommandLengthExceeded = true;
 8000b98:	4b66      	ldr	r3, [pc, #408]	; (8000d34 <debugConsoleCommandParse+0x208>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
            }
            CommandEntry[CommandCharIndex] = *CommandChar;
 8000b9e:	4b63      	ldr	r3, [pc, #396]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	7819      	ldrb	r1, [r3, #0]
 8000ba8:	4b61      	ldr	r3, [pc, #388]	; (8000d30 <debugConsoleCommandParse+0x204>)
 8000baa:	5499      	strb	r1, [r3, r2]
            CommandCharIndex++;
 8000bac:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b5d      	ldr	r3, [pc, #372]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000bb6:	701a      	strb	r2, [r3, #0]
        }

        // STEP 2: On CR check if command entered = a command from list if so execute - if not do nothing
        if (*CommandChar == '\r')
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b0d      	cmp	r3, #13
 8000bbe:	d14d      	bne.n	8000c5c <debugConsoleCommandParse+0x130>
        {
            printf("\r\n");
 8000bc0:	485d      	ldr	r0, [pc, #372]	; (8000d38 <debugConsoleCommandParse+0x20c>)
 8000bc2:	f010 fe0f 	bl	80117e4 <puts>
            fflush(stdout);
 8000bc6:	4b58      	ldr	r3, [pc, #352]	; (8000d28 <debugConsoleCommandParse+0x1fc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f010 fcc5 	bl	801155c <fflush>
            if (CommandLengthExceeded)
 8000bd2:	4b58      	ldr	r3, [pc, #352]	; (8000d34 <debugConsoleCommandParse+0x208>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d004      	beq.n	8000be4 <debugConsoleCommandParse+0xb8>
            {
                printf("\r\nError Debug Console: Max command length = %d\r\n", MAX_COMMAND_LENGTH);
 8000bda:	2115      	movs	r1, #21
 8000bdc:	4857      	ldr	r0, [pc, #348]	; (8000d3c <debugConsoleCommandParse+0x210>)
 8000bde:	f010 fd93 	bl	8011708 <iprintf>
 8000be2:	e03b      	b.n	8000c5c <debugConsoleCommandParse+0x130>
            }
            else
            {
                uint8_t CommandIndex;
                if (debugConsoleCommandSearch(Handle, CommandEntry, &CommandIndex))
 8000be4:	f107 0313 	add.w	r3, r7, #19
 8000be8:	461a      	mov	r2, r3
 8000bea:	4951      	ldr	r1, [pc, #324]	; (8000d30 <debugConsoleCommandParse+0x204>)
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff ff1b 	bl	8000a28 <debugConsoleCommandSearch>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d02f      	beq.n	8000c58 <debugConsoleCommandParse+0x12c>
                {
                    if (Handle->Command[CommandIndex].CommandType == COMPLETE)
 8000bf8:	7cfb      	ldrb	r3, [r7, #19]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	234c      	movs	r3, #76	; 0x4c
 8000c00:	fb01 f303 	mul.w	r3, r1, r3
 8000c04:	4413      	add	r3, r2
 8000c06:	3308      	adds	r3, #8
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d10b      	bne.n	8000c26 <debugConsoleCommandParse+0xfa>
                        Handle->Command[CommandIndex].CommandFunction(NULL);
 8000c0e:	7cfb      	ldrb	r3, [r7, #19]
 8000c10:	4619      	mov	r1, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	234c      	movs	r3, #76	; 0x4c
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	3350      	adds	r3, #80	; 0x50
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2000      	movs	r0, #0
 8000c22:	4798      	blx	r3
 8000c24:	e00d      	b.n	8000c42 <debugConsoleCommandParse+0x116>
                    else
                        Handle->Command[CommandIndex].CommandFunction((void *)Handle->PartialCommandParameter);
 8000c26:	7cfb      	ldrb	r3, [r7, #19]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	234c      	movs	r3, #76	; 0x4c
 8000c2e:	fb01 f303 	mul.w	r3, r1, r3
 8000c32:	4413      	add	r3, r2
 8000c34:	3350      	adds	r3, #80	; 0x50
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	f502 62d2 	add.w	r2, r2, #1680	; 0x690
 8000c3e:	4610      	mov	r0, r2
 8000c40:	4798      	blx	r3
                    Handle->LastCommand = Handle->Command[CommandIndex].CommandFunction;
 8000c42:	7cfb      	ldrb	r3, [r7, #19]
 8000c44:	4619      	mov	r1, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	234c      	movs	r3, #76	; 0x4c
 8000c4a:	fb01 f303 	mul.w	r3, r1, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	3350      	adds	r3, #80	; 0x50
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	605a      	str	r2, [r3, #4]
                }
                ResetCommand = true;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	77fb      	strb	r3, [r7, #31]
            }
        }

        // STEP 3: If user enters `, then repeat the last valid command
        if (*CommandChar == '`')
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b60      	cmp	r3, #96	; 0x60
 8000c62:	d10f      	bne.n	8000c84 <debugConsoleCommandParse+0x158>
        {
            if (Handle->LastCommand != NULL)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d009      	beq.n	8000c80 <debugConsoleCommandParse+0x154>
            {
                printf("\r\n");
 8000c6c:	4832      	ldr	r0, [pc, #200]	; (8000d38 <debugConsoleCommandParse+0x20c>)
 8000c6e:	f010 fdb9 	bl	80117e4 <puts>
                Handle->LastCommand((void *)Handle->PartialCommandParameter);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	f502 62d2 	add.w	r2, r2, #1680	; 0x690
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4798      	blx	r3
            }
            ResetCommand = true;
 8000c80:	2301      	movs	r3, #1
 8000c82:	77fb      	strb	r3, [r7, #31]
        }

        // STEP 4: If user enters ?, then launch help
        if (*CommandChar == '?')
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b3f      	cmp	r3, #63	; 0x3f
 8000c8a:	d106      	bne.n	8000c9a <debugConsoleCommandParse+0x16e>
        {
            printf("\r\n");
 8000c8c:	482a      	ldr	r0, [pc, #168]	; (8000d38 <debugConsoleCommandParse+0x20c>)
 8000c8e:	f010 fda9 	bl	80117e4 <puts>
            debugConsoleCommandHelp();
 8000c92:	f000 f857 	bl	8000d44 <debugConsoleCommandHelp>
            ResetCommand = true;
 8000c96:	2301      	movs	r3, #1
 8000c98:	77fb      	strb	r3, [r7, #31]
        }

        // STEP 5: If user enters backspace to undo typing
        if (*CommandChar == '\b')
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b08      	cmp	r3, #8
 8000ca0:	d11e      	bne.n	8000ce0 <debugConsoleCommandParse+0x1b4>
        {
            CommandEntry[CommandCharIndex] = 0x00;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <debugConsoleCommandParse+0x204>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	5499      	strb	r1, [r3, r2]
            CommandCharIndex = (CommandCharIndex == 0)? 0 : (CommandCharIndex - 1);
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d004      	beq.n	8000cc0 <debugConsoleCommandParse+0x194>
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	e000      	b.n	8000cc2 <debugConsoleCommandParse+0x196>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000cc4:	7013      	strb	r3, [r2, #0]
            terminal_CursorBackSpace();
 8000cc6:	f000 f931 	bl	8000f2c <terminal_CursorBackSpace>
            printf(" ");
 8000cca:	2020      	movs	r0, #32
 8000ccc:	f010 fd2e 	bl	801172c <putchar>
            terminal_CursorBackSpace();
 8000cd0:	f000 f92c 	bl	8000f2c <terminal_CursorBackSpace>
            fflush(stdout);
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <debugConsoleCommandParse+0x1fc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f010 fc3e 	bl	801155c <fflush>
        }

        // STEP 6: Reset the output as is necessary
        if (ResetCommand)
 8000ce0:	7ffb      	ldrb	r3, [r7, #31]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d013      	beq.n	8000d0e <debugConsoleCommandParse+0x1e2>
        {
            CommandLengthExceeded = false;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <debugConsoleCommandParse+0x208>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
            memset(CommandEntry, 0x00, sizeof(CommandEntry));
 8000cec:	2232      	movs	r2, #50	; 0x32
 8000cee:	2100      	movs	r1, #0
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <debugConsoleCommandParse+0x204>)
 8000cf2:	f010 fe57 	bl	80119a4 <memset>
            CommandCharIndex = 0;
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <debugConsoleCommandParse+0x200>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
            printf("\r\nCommand: ");
 8000cfc:	4810      	ldr	r0, [pc, #64]	; (8000d40 <debugConsoleCommandParse+0x214>)
 8000cfe:	f010 fd03 	bl	8011708 <iprintf>
            fflush(stdout);
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <debugConsoleCommandParse+0x1fc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f010 fc27 	bl	801155c <fflush>
    for (uint32_t CharIndex = 0; CharIndex < TotalChars; CharIndex++)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	3301      	adds	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	f4ff af12 	bcc.w	8000b42 <debugConsoleCommandParse+0x16>
        }
    }

} // END OF debugConsoleCommandParse
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200000c4 	.word	0x200000c4
 8000d2c:	2000314c 	.word	0x2000314c
 8000d30:	20003150 	.word	0x20003150
 8000d34:	20003182 	.word	0x20003182
 8000d38:	08012318 	.word	0x08012318
 8000d3c:	0801231c 	.word	0x0801231c
 8000d40:	08012350 	.word	0x08012350

08000d44 <debugConsoleCommandHelp>:
* @return void
*
* STEP 1: List all commands and the associated description - commands are listed in the order added
*/
void debugConsoleCommandHelp(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
    // STEP 1: List all commands and the associated description - commands are listed in the order added
    printf("%-20s: %s\r\n", "COMMAND", "DESCRIPTION");
 8000d4a:	4a1f      	ldr	r2, [pc, #124]	; (8000dc8 <debugConsoleCommandHelp+0x84>)
 8000d4c:	491f      	ldr	r1, [pc, #124]	; (8000dcc <debugConsoleCommandHelp+0x88>)
 8000d4e:	4820      	ldr	r0, [pc, #128]	; (8000dd0 <debugConsoleCommandHelp+0x8c>)
 8000d50:	f010 fcda 	bl	8011708 <iprintf>
    for (uint8_t Index = 0; Index < TestApp.DebugConsole->TotalCommandsAdded; Index++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	e018      	b.n	8000d8c <debugConsoleCommandHelp+0x48>
    {
        printf("%-20s: %s\r\n", TestApp.DebugConsole->Command[Index].CommandName, TestApp.DebugConsole->Command[Index].CommandDescription);
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <debugConsoleCommandHelp+0x90>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	214c      	movs	r1, #76	; 0x4c
 8000d62:	fb01 f303 	mul.w	r3, r1, r3
 8000d66:	3308      	adds	r3, #8
 8000d68:	4413      	add	r3, r2
 8000d6a:	1c59      	adds	r1, r3, #1
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <debugConsoleCommandHelp+0x90>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	204c      	movs	r0, #76	; 0x4c
 8000d74:	fb00 f303 	mul.w	r3, r0, r3
 8000d78:	3318      	adds	r3, #24
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3306      	adds	r3, #6
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <debugConsoleCommandHelp+0x8c>)
 8000d82:	f010 fcc1 	bl	8011708 <iprintf>
    for (uint8_t Index = 0; Index < TestApp.DebugConsole->TotalCommandsAdded; Index++)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <debugConsoleCommandHelp+0x90>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	789b      	ldrb	r3, [r3, #2]
 8000d92:	79fa      	ldrb	r2, [r7, #7]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3e0      	bcc.n	8000d5a <debugConsoleCommandHelp+0x16>
    }
    printf("%-20s: %s\r\n", "Help", "List all debug commands");
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <debugConsoleCommandHelp+0x94>)
 8000d9a:	4910      	ldr	r1, [pc, #64]	; (8000ddc <debugConsoleCommandHelp+0x98>)
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <debugConsoleCommandHelp+0x8c>)
 8000d9e:	f010 fcb3 	bl	8011708 <iprintf>
    printf("%-20s: %s\r\n", "Clear", "Clears the terminal screen");
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <debugConsoleCommandHelp+0x9c>)
 8000da4:	490f      	ldr	r1, [pc, #60]	; (8000de4 <debugConsoleCommandHelp+0xa0>)
 8000da6:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <debugConsoleCommandHelp+0x8c>)
 8000da8:	f010 fcae 	bl	8011708 <iprintf>
    printf("%-20s: %s\r\n", "`", "Repeat last command");
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <debugConsoleCommandHelp+0xa4>)
 8000dae:	490f      	ldr	r1, [pc, #60]	; (8000dec <debugConsoleCommandHelp+0xa8>)
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <debugConsoleCommandHelp+0x8c>)
 8000db2:	f010 fca9 	bl	8011708 <iprintf>
    printf("%-20s: %s\r\n", "?", "Same as help");
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <debugConsoleCommandHelp+0xac>)
 8000db8:	490e      	ldr	r1, [pc, #56]	; (8000df4 <debugConsoleCommandHelp+0xb0>)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <debugConsoleCommandHelp+0x8c>)
 8000dbc:	f010 fca4 	bl	8011708 <iprintf>

} // END OF debugConsoleCommandHelp
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	0801235c 	.word	0x0801235c
 8000dcc:	08012368 	.word	0x08012368
 8000dd0:	08012370 	.word	0x08012370
 8000dd4:	20004ee4 	.word	0x20004ee4
 8000dd8:	0801237c 	.word	0x0801237c
 8000ddc:	08012310 	.word	0x08012310
 8000de0:	08012394 	.word	0x08012394
 8000de4:	08012308 	.word	0x08012308
 8000de8:	080123b0 	.word	0x080123b0
 8000dec:	080123c4 	.word	0x080123c4
 8000df0:	080123c8 	.word	0x080123c8
 8000df4:	080123d8 	.word	0x080123d8

08000df8 <startAppTasks>:
* STEP 3: Init Queues
* STEP 4: Init Block Pools
* STEP 5: Check for critical errors
*/
void startAppTasks(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af08      	add	r7, sp, #32
    uint16_t InitStatus = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	80fb      	strh	r3, [r7, #6]

    // STEP 1: Init Spokane, device drivers and processor hardware
    Init_TestAppHandle();
 8000e02:	f000 f937 	bl	8001074 <Init_TestAppHandle>
    InitStatus = (Init_TestAppHardware() != HARDWARE_INIT_OK)? (InitStatus | 0x0001) : HARDWARE_INIT_OK;
 8000e06:	f000 f93d 	bl	8001084 <Init_TestAppHardware>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d004      	beq.n	8000e1a <startAppTasks+0x22>
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	e000      	b.n	8000e1c <startAppTasks+0x24>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	80fb      	strh	r3, [r7, #6]

    // STEP 2: Init Tasks
    InitStatus = (tx_thread_create(&TestAppTaskHandler, "TestApp", testAppMainTask, 0x0001, TestAppTaskStack, sizeof(TestAppTaskStack), 13, 13, 1, TX_AUTO_START) != TX_SUCCESS)? (InitStatus | 0x0002) : HARDWARE_INIT_OK;
 8000e1e:	23b0      	movs	r3, #176	; 0xb0
 8000e20:	9306      	str	r3, [sp, #24]
 8000e22:	2301      	movs	r3, #1
 8000e24:	9305      	str	r3, [sp, #20]
 8000e26:	2301      	movs	r3, #1
 8000e28:	9304      	str	r3, [sp, #16]
 8000e2a:	230d      	movs	r3, #13
 8000e2c:	9303      	str	r3, [sp, #12]
 8000e2e:	230d      	movs	r3, #13
 8000e30:	9302      	str	r3, [sp, #8]
 8000e32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <startAppTasks+0xbc>)
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <startAppTasks+0xc0>)
 8000e40:	491e      	ldr	r1, [pc, #120]	; (8000ebc <startAppTasks+0xc4>)
 8000e42:	481f      	ldr	r0, [pc, #124]	; (8000ec0 <startAppTasks+0xc8>)
 8000e44:	f00b fb5a 	bl	800c4fc <_txe_thread_create>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <startAppTasks+0x60>
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e000      	b.n	8000e5a <startAppTasks+0x62>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	80fb      	strh	r3, [r7, #6]
    InitStatus = (tx_thread_create(&DebugConsoleHandler, "Debug Console", debugConsoleTask, 0x0002, DebugConsoleTaskStack, sizeof(DebugConsoleTaskStack), 15, 15, 1, TX_AUTO_START) != TX_SUCCESS)? (InitStatus | 0x0004) : HARDWARE_INIT_OK;
 8000e5c:	23b0      	movs	r3, #176	; 0xb0
 8000e5e:	9306      	str	r3, [sp, #24]
 8000e60:	2301      	movs	r3, #1
 8000e62:	9305      	str	r3, [sp, #20]
 8000e64:	2301      	movs	r3, #1
 8000e66:	9304      	str	r3, [sp, #16]
 8000e68:	230f      	movs	r3, #15
 8000e6a:	9303      	str	r3, [sp, #12]
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <startAppTasks+0xcc>)
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <startAppTasks+0xd0>)
 8000e7e:	4913      	ldr	r1, [pc, #76]	; (8000ecc <startAppTasks+0xd4>)
 8000e80:	4813      	ldr	r0, [pc, #76]	; (8000ed0 <startAppTasks+0xd8>)
 8000e82:	f00b fb3b 	bl	800c4fc <_txe_thread_create>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d004      	beq.n	8000e96 <startAppTasks+0x9e>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	e000      	b.n	8000e98 <startAppTasks+0xa0>
 8000e96:	2300      	movs	r3, #0
 8000e98:	80fb      	strh	r3, [r7, #6]
    // STEP 3: Init Queues

    // STEP 4: Init Block Pools

    // STEP 5: Check for critical errors
    if (InitStatus != HARDWARE_INIT_OK)
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <startAppTasks+0xb4>
        _Error_Handler(__FILE__, __LINE__, InitStatus);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	2155      	movs	r1, #85	; 0x55
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <startAppTasks+0xdc>)
 8000ea8:	f000 f92a 	bl	8001100 <_Error_Handler>

#ifdef USE_TRACEX
    tx_trace_enable(&tracex_buffer, TRACEX_BUFFER_SIZE, 30);
#endif

} // END OF startAppTasks
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20003184 	.word	0x20003184
 8000eb8:	08000f95 	.word	0x08000f95
 8000ebc:	080123dc 	.word	0x080123dc
 8000ec0:	20003d84 	.word	0x20003d84
 8000ec4:	20003e34 	.word	0x20003e34
 8000ec8:	08000881 	.word	0x08000881
 8000ecc:	080123e4 	.word	0x080123e4
 8000ed0:	20004e34 	.word	0x20004e34
 8000ed4:	080123f4 	.word	0x080123f4

08000ed8 <_write>:
* @param len: Size of the print message
*
* @return: The number of characters printed
*/
int _write(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
	UART_DMA_Transmit(&TestApp.Hardware.UART_2, (uint8_t *)ptr, (uint16_t)len);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <_write+0x2c>)
 8000eee:	f00f f928 	bl	8010142 <UART_DMA_Transmit>
	tx_thread_sleep(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f00a f89e 	bl	800b034 <_tx_thread_sleep>

    return(len);
 8000ef8:	687b      	ldr	r3, [r7, #4]

} // END OF _write
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20004ee8 	.word	0x20004ee8

08000f08 <terminal_ClearScreen>:
*
* @author original: Hab Collector \n
*
********************************************************************************************************/
void terminal_ClearScreen(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	printf(ERASE_DISPLAY);
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <terminal_ClearScreen+0x1c>)
 8000f0e:	f010 fbfb 	bl	8011708 <iprintf>
	fflush(stdout);
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <terminal_ClearScreen+0x20>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f010 fb1f 	bl	801155c <fflush>

} // END OF terminal_ClearScreen
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	08012440 	.word	0x08012440
 8000f28:	200000c4 	.word	0x200000c4

08000f2c <terminal_CursorBackSpace>:
*
* @author original: Hab Collector \n
*
********************************************************************************************************/
void terminal_CursorBackSpace(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	printf(CURSOR_BACK_SPACE);
 8000f30:	2008      	movs	r0, #8
 8000f32:	f010 fbfb 	bl	801172c <putchar>
	fflush(stdout);
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <terminal_CursorBackSpace+0x1c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f010 fb0d 	bl	801155c <fflush>

} // END OF terminal_CursorBackSpace
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000c4 	.word	0x200000c4

08000f4c <terminal_SetDefaultForegroundColor>:

#ifdef USE_EXTENDED_TERMINAL_FUNCTIONS
// The following function set the text forecolor: Use with caution color varies based on display type and app
// Better to use printColor()
void terminal_SetDefaultForegroundColor(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	printf(DEFAULT_FOREGROUND_COLOR);
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <terminal_SetDefaultForegroundColor+0x1c>)
 8000f52:	f010 fbd9 	bl	8011708 <iprintf>
	fflush(stdout);
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <terminal_SetDefaultForegroundColor+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f010 fafd 	bl	801155c <fflush>

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	08012448 	.word	0x08012448
 8000f6c:	200000c4 	.word	0x200000c4

08000f70 <terminal_SetRedForeground>:

void terminal_SetRedForeground(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	printf(SET_RED_FOREGROUND);
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <terminal_SetRedForeground+0x1c>)
 8000f76:	f010 fbc7 	bl	8011708 <iprintf>
	fflush(stdout);
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <terminal_SetRedForeground+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f010 faeb 	bl	801155c <fflush>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	08012450 	.word	0x08012450
 8000f90:	200000c4 	.word	0x200000c4

08000f94 <testAppMainTask>:
// Power toggle test commands
static void TPx_Toggle(void *TestPoint);
static void LED_Toggle(void *NotUsed);

VOID testAppMainTask(ULONG InitValue)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	6078      	str	r0, [r7, #4]
    // STEP 1: Add debug commands associated with the Spokane Task
    debugConsoleCommandAdd(TestApp.DebugConsole, "Toggle ", "Toggle TP<x> (x: 9, 10, 11)", TPx_Toggle, PARTIAL);
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <testAppMainTask+0xa4>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <testAppMainTask+0xa8>)
 8000fa6:	4a26      	ldr	r2, [pc, #152]	; (8001040 <testAppMainTask+0xac>)
 8000fa8:	4926      	ldr	r1, [pc, #152]	; (8001044 <testAppMainTask+0xb0>)
 8000faa:	f7ff fcd9 	bl	8000960 <debugConsoleCommandAdd>
    debugConsoleCommandAdd(TestApp.DebugConsole, "LED", "Toggle LED power", LED_Toggle, COMPLETE);
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <testAppMainTask+0xa4>)
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <testAppMainTask+0xb4>)
 8000fb8:	4a24      	ldr	r2, [pc, #144]	; (800104c <testAppMainTask+0xb8>)
 8000fba:	4925      	ldr	r1, [pc, #148]	; (8001050 <testAppMainTask+0xbc>)
 8000fbc:	f7ff fcd0 	bl	8000960 <debugConsoleCommandAdd>

    // STEP 2: Show start up message
    terminal_SetDefaultForegroundColor();
 8000fc0:	f7ff ffc4 	bl	8000f4c <terminal_SetDefaultForegroundColor>
    terminal_ClearScreen();
 8000fc4:	f7ff ffa0 	bl	8000f08 <terminal_ClearScreen>
    printf("ACI Stalker\r\n");
 8000fc8:	4822      	ldr	r0, [pc, #136]	; (8001054 <testAppMainTask+0xc0>)
 8000fca:	f010 fc0b 	bl	80117e4 <puts>
    printf("Hab testing of Azure RTOS USB Device CDC\r\n");
 8000fce:	4822      	ldr	r0, [pc, #136]	; (8001058 <testAppMainTask+0xc4>)
 8000fd0:	f010 fc08 	bl	80117e4 <puts>
    printf("Build Notes: Hello Hab, time to make the donuts\r\n\n");
 8000fd4:	4821      	ldr	r0, [pc, #132]	; (800105c <testAppMainTask+0xc8>)
 8000fd6:	f010 fc05 	bl	80117e4 <puts>
    fflush(stdout);
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <testAppMainTask+0xcc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f010 fabb 	bl	801155c <fflush>

    // STEP 3: Main task
    while (1)
    {
        ULONG USB_CDC_EventFlag = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
        tx_event_flags_get(&USB_EventFlag, 0xFF, TX_OR_CLEAR, &USB_CDC_EventFlag, TX_WAIT_FOREVER);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff2:	9200      	str	r2, [sp, #0]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	21ff      	movs	r1, #255	; 0xff
 8000ff8:	481a      	ldr	r0, [pc, #104]	; (8001064 <testAppMainTask+0xd0>)
 8000ffa:	f00a ff57 	bl	800beac <_txe_event_flags_get>
        printf("USB_CDC_EventFlag = %d\r\n", (int)USB_CDC_EventFlag);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4619      	mov	r1, r3
 8001002:	4819      	ldr	r0, [pc, #100]	; (8001068 <testAppMainTask+0xd4>)
 8001004:	f010 fb80 	bl	8011708 <iprintf>
        if (USB_CDC_EventFlag == USB_EVENT_CDC_INSERTED)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d103      	bne.n	8001016 <testAppMainTask+0x82>
        {
            printf("USB Drive was inserted\r\n");
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <testAppMainTask+0xd8>)
 8001010:	f010 fbe8 	bl	80117e4 <puts>
 8001014:	e007      	b.n	8001026 <testAppMainTask+0x92>
        }
        else if (USB_CDC_EventFlag == USB_EVENT_CDC_REMOVED)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d103      	bne.n	8001024 <testAppMainTask+0x90>
        {
            printf("USB Drive was removed\r\n");
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <testAppMainTask+0xdc>)
 800101e:	f010 fbe1 	bl	80117e4 <puts>
 8001022:	e000      	b.n	8001026 <testAppMainTask+0x92>
        }
        else
        {
            DO_NOTHING();
 8001024:	bf00      	nop
        }

        // SLEEP ALLOW OTHER TASKS TO RUN:
        tx_thread_sleep(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f00a f804 	bl	800b034 <_tx_thread_sleep>
        STATUS_LED_TOGGLE();
 800102c:	2102      	movs	r1, #2
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f001 fc0f 	bl	8002854 <HAL_GPIO_TogglePin>
    {
 8001036:	e7d6      	b.n	8000fe6 <testAppMainTask+0x52>
 8001038:	20004ee4 	.word	0x20004ee4
 800103c:	08001141 	.word	0x08001141
 8001040:	080124a0 	.word	0x080124a0
 8001044:	080124bc 	.word	0x080124bc
 8001048:	08001215 	.word	0x08001215
 800104c:	080124c4 	.word	0x080124c4
 8001050:	080124d8 	.word	0x080124d8
 8001054:	080124dc 	.word	0x080124dc
 8001058:	080124ec 	.word	0x080124ec
 800105c:	08012518 	.word	0x08012518
 8001060:	200000c4 	.word	0x200000c4
 8001064:	20005f1c 	.word	0x20005f1c
 8001068:	0801254c 	.word	0x0801254c
 800106c:	08012568 	.word	0x08012568
 8001070:	08012580 	.word	0x08012580

08001074 <Init_TestAppHandle>:
}



void Init_TestAppHandle(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
    DO_NOTHING();
 8001078:	bf00      	nop
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <Init_TestAppHardware>:
* STEP 2: Init hardware
* STEP 3: Init API Handlers
* STEP 4: Return init status
*/
uint16_t Init_TestAppHardware(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
    // STEP 1: Set default IO conditions
    TP9_CLR();
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <Init_TestAppHardware+0x6c>)
 8001092:	f001 fbc7 	bl	8002824 <HAL_GPIO_WritePin>
    TP10_CLR();
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <Init_TestAppHardware+0x6c>)
 800109e:	f001 fbc1 	bl	8002824 <HAL_GPIO_WritePin>
    TP11_CLR();
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a8:	4811      	ldr	r0, [pc, #68]	; (80010f0 <Init_TestAppHardware+0x6c>)
 80010aa:	f001 fbbb 	bl	8002824 <HAL_GPIO_WritePin>
    STATUS_LED_OFF();
 80010ae:	2200      	movs	r2, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f001 fbb5 	bl	8002824 <HAL_GPIO_WritePin>

    // STEP 2: Init hardware
    uint16_t InitStatus = 0x0000;
 80010ba:	2300      	movs	r3, #0
 80010bc:	80fb      	strh	r3, [r7, #6]

    // UART 2: Debug Port
    Init_UART_DMA(&TestApp.Hardware.UART_2, &huart2);
 80010be:	490d      	ldr	r1, [pc, #52]	; (80010f4 <Init_TestAppHardware+0x70>)
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <Init_TestAppHardware+0x74>)
 80010c2:	f00e ffc9 	bl	8010058 <Init_UART_DMA>
    InitStatus = (&TestApp.Hardware.UART_2 == NULL)? InitStatus | 0x0001 : InitStatus;

    // STEP 3: Init API Handlers
    // DEBUG CONSOLE
    TestApp.DebugConsole = Init_DebugConsoleCommand();
 80010c6:	f7ff fbfd 	bl	80008c4 <Init_DebugConsoleCommand>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <Init_TestAppHardware+0x78>)
 80010ce:	6013      	str	r3, [r2, #0]
    InitStatus = (TestApp.DebugConsole == NULL)? InitStatus | 0x0020 : InitStatus;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <Init_TestAppHardware+0x78>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d104      	bne.n	80010e2 <Init_TestAppHardware+0x5e>
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	f043 0320 	orr.w	r3, r3, #32
 80010de:	b29b      	uxth	r3, r3
 80010e0:	e000      	b.n	80010e4 <Init_TestAppHardware+0x60>
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	80fb      	strh	r3, [r7, #6]

    // STEP 4: Return init status
    return(InitStatus);
 80010e6:	88fb      	ldrh	r3, [r7, #6]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	48001000 	.word	0x48001000
 80010f4:	20005048 	.word	0x20005048
 80010f8:	20004ee8 	.word	0x20004ee8
 80010fc:	20004ee4 	.word	0x20004ee4

08001100 <_Error_Handler>:
* @param Error: Specific error code
*
* STEP 1: Print critical error and stay here to allow debug
* *****************************************************************************************************/
void _Error_Handler(char *file, int line, uint32_t Error)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
    // STEP 1: Print critical error and stay here to allow debug
    terminal_SetRedForeground();
 800110c:	f7ff ff30 	bl	8000f70 <terminal_SetRedForeground>
    printf("***CRITICAL ERROR: %d\r\n", (int)Error);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <_Error_Handler+0x34>)
 8001116:	f010 faf7 	bl	8011708 <iprintf>
    printf("Trapped here so you can debug\r\n");
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <_Error_Handler+0x38>)
 800111c:	f010 fb62 	bl	80117e4 <puts>
    fflush(stdout);
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <_Error_Handler+0x3c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	4618      	mov	r0, r3
 8001128:	f010 fa18 	bl	801155c <fflush>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
    __disable_irq();
    while(1);
 8001130:	e7fe      	b.n	8001130 <_Error_Handler+0x30>
 8001132:	bf00      	nop
 8001134:	08012598 	.word	0x08012598
 8001138:	080125b0 	.word	0x080125b0
 800113c:	200000c4 	.word	0x200000c4

08001140 <TPx_Toggle>:
 * @brief Toggle Test ponts
 * @param void pointer: user console input
 * @return void
 */
static void TPx_Toggle(void *TestPoint)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    bool CommandArgumentValid = false;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
    GPIO_PinState PinState;
    char *CommandArgument = (char *)TestPoint;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60bb      	str	r3, [r7, #8]
    if (strcmp(CommandArgument, "TP9") == 0)
 8001150:	4929      	ldr	r1, [pc, #164]	; (80011f8 <TPx_Toggle+0xb8>)
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f7ff f970 	bl	8000438 <strcmp>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10d      	bne.n	800117a <TPx_Toggle+0x3a>
    {
        TP9_TOGGLE();
 800115e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001162:	4826      	ldr	r0, [pc, #152]	; (80011fc <TPx_Toggle+0xbc>)
 8001164:	f001 fb76 	bl	8002854 <HAL_GPIO_TogglePin>
        PinState = TP9_STATUS();
 8001168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116c:	4823      	ldr	r0, [pc, #140]	; (80011fc <TPx_Toggle+0xbc>)
 800116e:	f001 fb41 	bl	80027f4 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	73bb      	strb	r3, [r7, #14]
        CommandArgumentValid = true;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
    }
    if (strcmp(CommandArgument, "TP10") == 0)
 800117a:	4921      	ldr	r1, [pc, #132]	; (8001200 <TPx_Toggle+0xc0>)
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff f95b 	bl	8000438 <strcmp>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10d      	bne.n	80011a4 <TPx_Toggle+0x64>
    {
        TP10_TOGGLE();
 8001188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118c:	481b      	ldr	r0, [pc, #108]	; (80011fc <TPx_Toggle+0xbc>)
 800118e:	f001 fb61 	bl	8002854 <HAL_GPIO_TogglePin>
        PinState = TP10_STATUS();
 8001192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001196:	4819      	ldr	r0, [pc, #100]	; (80011fc <TPx_Toggle+0xbc>)
 8001198:	f001 fb2c 	bl	80027f4 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	73bb      	strb	r3, [r7, #14]
        CommandArgumentValid = true;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
    }
    if (strcmp(CommandArgument, "TP11") == 0)
 80011a4:	4917      	ldr	r1, [pc, #92]	; (8001204 <TPx_Toggle+0xc4>)
 80011a6:	68b8      	ldr	r0, [r7, #8]
 80011a8:	f7ff f946 	bl	8000438 <strcmp>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10d      	bne.n	80011ce <TPx_Toggle+0x8e>
    {
        TP11_TOGGLE();
 80011b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <TPx_Toggle+0xbc>)
 80011b8:	f001 fb4c 	bl	8002854 <HAL_GPIO_TogglePin>
        PinState = TP11_STATUS();
 80011bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c0:	480e      	ldr	r0, [pc, #56]	; (80011fc <TPx_Toggle+0xbc>)
 80011c2:	f001 fb17 	bl	80027f4 <HAL_GPIO_ReadPin>
 80011c6:	4603      	mov	r3, r0
 80011c8:	73bb      	strb	r3, [r7, #14]
        CommandArgumentValid = true;
 80011ca:	2301      	movs	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
    }
    if (CommandArgumentValid)
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00d      	beq.n	80011f0 <TPx_Toggle+0xb0>
    {
        printf("%s was toggled to ", CommandArgument);
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <TPx_Toggle+0xc8>)
 80011d8:	f010 fa96 	bl	8011708 <iprintf>
        if (PinState == GPIO_PIN_SET)
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d103      	bne.n	80011ea <TPx_Toggle+0xaa>
            printf("high \r\n");
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <TPx_Toggle+0xcc>)
 80011e4:	f010 fafe 	bl	80117e4 <puts>
        else
            printf("low \r\n");
    }
}
 80011e8:	e002      	b.n	80011f0 <TPx_Toggle+0xb0>
            printf("low \r\n");
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <TPx_Toggle+0xd0>)
 80011ec:	f010 fafa 	bl	80117e4 <puts>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	080125d0 	.word	0x080125d0
 80011fc:	48001000 	.word	0x48001000
 8001200:	080125d4 	.word	0x080125d4
 8001204:	080125dc 	.word	0x080125dc
 8001208:	080125e4 	.word	0x080125e4
 800120c:	080125f8 	.word	0x080125f8
 8001210:	08012600 	.word	0x08012600

08001214 <LED_Toggle>:


static void LED_Toggle(void *NotUsed)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    (void)NotUsed;
    STATUS_LED_TOGGLE();
 800121c:	2102      	movs	r1, #2
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f001 fb17 	bl	8002854 <HAL_GPIO_TogglePin>
    GPIO_PinState PinState = STATUS_LED_STATUS();
 8001226:	2102      	movs	r1, #2
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f001 fae2 	bl	80027f4 <HAL_GPIO_ReadPin>
 8001230:	4603      	mov	r3, r0
 8001232:	73fb      	strb	r3, [r7, #15]
    if (PinState == GPIO_PIN_SET)
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d103      	bne.n	8001242 <LED_Toggle+0x2e>
        printf("LED is on\r\n");
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <LED_Toggle+0x3c>)
 800123c:	f010 fad2 	bl	80117e4 <puts>
    else
        printf("LED is off\r\n");
}
 8001240:	e002      	b.n	8001248 <LED_Toggle+0x34>
        printf("LED is off\r\n");
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <LED_Toggle+0x40>)
 8001244:	f010 face 	bl	80117e4 <puts>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	08012608 	.word	0x08012608
 8001254:	08012614 	.word	0x08012614

08001258 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  startAppTasks();
 8001264:	f7ff fdc8 	bl	8000df8 <startAppTasks>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8001268:	68fb      	ldr	r3, [r7, #12]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8001276:	f008 fc15 	bl	8009aa4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_DMA_Init+0x78>)
 8001288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128a:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <MX_DMA_Init+0x78>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6493      	str	r3, [r2, #72]	; 0x48
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_DMA_Init+0x78>)
 8001294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_DMA_Init+0x78>)
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <MX_DMA_Init+0x78>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6493      	str	r3, [r2, #72]	; 0x48
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_DMA_Init+0x78>)
 80012ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_DMA_Init+0x78>)
 80012b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <MX_DMA_Init+0x78>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6493      	str	r3, [r2, #72]	; 0x48
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <MX_DMA_Init+0x78>)
 80012c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2011      	movs	r0, #17
 80012d4:	f000 fd98 	bl	8001e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012d8:	2011      	movs	r0, #17
 80012da:	f000 fdb1 	bl	8001e40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2038      	movs	r0, #56	; 0x38
 80012e4:	f000 fd90 	bl	8001e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80012e8:	2038      	movs	r0, #56	; 0x38
 80012ea:	f000 fda9 	bl	8001e40 <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000

080012fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_GPIO_Init+0xd4>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_GPIO_Init+0xd4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2102      	movs	r1, #2
 8001376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137a:	f001 fa53 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP9_Pin|TP10_Pin|TP11_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_GPIO_Init+0xd8>)
 8001386:	f001 fa4d 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 800138a:	2302      	movs	r3, #2
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f001 f894 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = TP9_Pin|TP10_Pin|TP11_Pin;
 80013a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_GPIO_Init+0xd8>)
 80013c2:	f001 f885 	bl	80024d0 <HAL_GPIO_Init>

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48001000 	.word	0x48001000

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013dc:	f000 fbff 	bl	8001bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e0:	f000 f809 	bl	80013f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e4:	f7ff ff8a 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 80013e8:	f7ff ff4a 	bl	8001280 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ec:	f000 f9ee 	bl	80017cc <MX_USART2_UART_Init>
//  MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80013f0:	f7ff ff3f 	bl	8001272 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <main+0x1c>

080013f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b096      	sub	sp, #88	; 0x58
 80013fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2244      	movs	r2, #68	; 0x44
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f010 facd 	bl	80119a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001418:	2000      	movs	r0, #0
 800141a:	f002 fc71 	bl	8003d00 <HAL_PWREx_ControlVoltageScaling>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001424:	f000 f84c 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8001428:	2330      	movs	r3, #48	; 0x30
 800142a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001430:	2301      	movs	r3, #1
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001438:	2360      	movs	r3, #96	; 0x60
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001440:	2301      	movs	r3, #1
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001444:	2301      	movs	r3, #1
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001448:	233c      	movs	r3, #60	; 0x3c
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001454:	2302      	movs	r3, #2
 8001456:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fd03 	bl	8003e68 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001468:	f000 f82a 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2303      	movs	r3, #3
 8001472:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	2105      	movs	r1, #5
 8001484:	4618      	mov	r0, r3
 8001486:	f003 f909 	bl	800469c <HAL_RCC_ClockConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001490:	f000 f816 	bl	80014c0 <Error_Handler>
  }
}
 8001494:	bf00      	nop
 8001496:	3758      	adds	r7, #88	; 0x58
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ae:	f000 fbaf 	bl	8001c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40001000 	.word	0x40001000

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6613      	str	r3, [r2, #96]	; 0x60
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x44>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	; 0x38
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_InitTick+0xe0>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	4a33      	ldr	r2, [pc, #204]	; (80015f4 <HAL_InitTick+0xe0>)
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <HAL_InitTick+0xe0>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800153a:	f107 0210 	add.w	r2, r7, #16
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f003 faa7 	bl	8004a98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	2b00      	cmp	r3, #0
 8001552:	d103      	bne.n	800155c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001554:	f003 fa74 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8001558:	6378      	str	r0, [r7, #52]	; 0x34
 800155a:	e004      	b.n	8001566 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800155c:	f003 fa70 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8001560:	4603      	mov	r3, r0
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001568:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <HAL_InitTick+0xe4>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9b      	lsrs	r3, r3, #18
 8001570:	3b01      	subs	r3, #1
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_InitTick+0xe8>)
 8001576:	4a22      	ldr	r2, [pc, #136]	; (8001600 <HAL_InitTick+0xec>)
 8001578:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_InitTick+0xe8>)
 800157c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001580:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_InitTick+0xe8>)
 8001584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001586:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_InitTick+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_InitTick+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_InitTick+0xe8>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800159a:	4818      	ldr	r0, [pc, #96]	; (80015fc <HAL_InitTick+0xe8>)
 800159c:	f004 f886 	bl	80056ac <HAL_TIM_Base_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11b      	bne.n	80015e6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015ae:	4813      	ldr	r0, [pc, #76]	; (80015fc <HAL_InitTick+0xe8>)
 80015b0:	f004 f8de 	bl	8005770 <HAL_TIM_Base_Start_IT>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d111      	bne.n	80015e6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c2:	2036      	movs	r0, #54	; 0x36
 80015c4:	f000 fc3c 	bl	8001e40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	d808      	bhi.n	80015e0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015ce:	2200      	movs	r2, #0
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	2036      	movs	r0, #54	; 0x36
 80015d4:	f000 fc18 	bl	8001e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_InitTick+0xf0>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e002      	b.n	80015e6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3738      	adds	r7, #56	; 0x38
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	20004ff8 	.word	0x20004ff8
 8001600:	40001000 	.word	0x40001000
 8001604:	20000004 	.word	0x20000004

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	e7fe      	b.n	800160c <NMI_Handler+0x4>

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler+0x4>

0800161a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <UsageFault_Handler+0x4>

08001626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <DMA1_Channel7_IRQHandler+0x10>)
 800163a:	f000 fded 	bl	8002218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000513c 	.word	0x2000513c

08001648 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <USART2_IRQHandler+0x10>)
 800164e:	f004 fca5 	bl	8005f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20005048 	.word	0x20005048

0800165c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <TIM6_DAC_IRQHandler+0x10>)
 8001662:	f004 f8f5 	bl	8005850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20004ff8 	.word	0x20004ff8

08001670 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA2_Channel1_IRQHandler+0x10>)
 8001676:	f000 fdcf 	bl	8002218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200050dc 	.word	0x200050dc

08001684 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <OTG_FS_IRQHandler+0x10>)
 800168a:	f001 fa70 	bl	8002b6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000519c 	.word	0x2000519c

08001698 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e00a      	b.n	80016c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016aa:	f3af 8000 	nop.w
 80016ae:	4601      	mov	r1, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf0      	blt.n	80016aa <_read+0x12>
  }

  return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016fa:	605a      	str	r2, [r3, #4]
  return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_isatty>:

int _isatty(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f010 f99e 	bl	8011aac <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200a0000 	.word	0x200a0000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20005044 	.word	0x20005044
 80017a4:	20006598 	.word	0x20006598

080017a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <MX_USART2_UART_Init+0x90>)
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <MX_USART2_UART_Init+0x94>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <MX_USART2_UART_Init+0x90>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_USART2_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_USART2_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <MX_USART2_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_USART2_UART_Init+0x90>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_USART2_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_USART2_UART_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_USART2_UART_Init+0x90>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_USART2_UART_Init+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <MX_USART2_UART_Init+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001814:	4811      	ldr	r0, [pc, #68]	; (800185c <MX_USART2_UART_Init+0x90>)
 8001816:	f004 fa0f 	bl	8005c38 <HAL_UART_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001820:	f7ff fe4e 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_USART2_UART_Init+0x90>)
 8001828:	f005 ff0f 	bl	800764a <HAL_UARTEx_SetTxFifoThreshold>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001832:	f7ff fe45 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <MX_USART2_UART_Init+0x90>)
 800183a:	f005 ff44 	bl	80076c6 <HAL_UARTEx_SetRxFifoThreshold>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001844:	f7ff fe3c 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_USART2_UART_Init+0x90>)
 800184a:	f005 fec5 	bl	80075d8 <HAL_UARTEx_DisableFifoMode>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001854:	f7ff fe34 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20005048 	.word	0x20005048
 8001860:	40004400 	.word	0x40004400

08001864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0b0      	sub	sp, #192	; 0xc0
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	2294      	movs	r2, #148	; 0x94
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f010 f88d 	bl	80119a4 <memset>
  if(uartHandle->Instance==USART2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a60      	ldr	r2, [pc, #384]	; (8001a10 <HAL_UART_MspInit+0x1ac>)
 8001890:	4293      	cmp	r3, r2
 8001892:	f040 80b9 	bne.w	8001a08 <HAL_UART_MspInit+0x1a4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800189a:	2300      	movs	r3, #0
 800189c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189e:	f107 0318 	add.w	r3, r7, #24
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 f9ea 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018ae:	f7ff fe07 	bl	80014c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b2:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <HAL_UART_MspInit+0x1b0>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	4a57      	ldr	r2, [pc, #348]	; (8001a14 <HAL_UART_MspInit+0x1b0>)
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	6593      	str	r3, [r2, #88]	; 0x58
 80018be:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <HAL_UART_MspInit+0x1b0>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b52      	ldr	r3, [pc, #328]	; (8001a14 <HAL_UART_MspInit+0x1b0>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a51      	ldr	r2, [pc, #324]	; (8001a14 <HAL_UART_MspInit+0x1b0>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b4f      	ldr	r3, [pc, #316]	; (8001a14 <HAL_UART_MspInit+0x1b0>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e2:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <HAL_UART_MspInit+0x1b0>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_UART_MspInit+0x1b0>)
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_UART_MspInit+0x1b0>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15 (JTDI)     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001914:	2303      	movs	r3, #3
 8001916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800191e:	4619      	mov	r1, r3
 8001920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001924:	f000 fdd4 	bl	80024d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001928:	2320      	movs	r3, #32
 800192a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001940:	2307      	movs	r3, #7
 8001942:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001946:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800194a:	4619      	mov	r1, r3
 800194c:	4832      	ldr	r0, [pc, #200]	; (8001a18 <HAL_UART_MspInit+0x1b4>)
 800194e:	f000 fdbf 	bl	80024d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA2_Channel1;
 8001952:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 8001954:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <HAL_UART_MspInit+0x1bc>)
 8001956:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001958:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 800195a:	221a      	movs	r2, #26
 800195c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 800197e:	2220      	movs	r2, #32
 8001980:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001988:	4824      	ldr	r0, [pc, #144]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 800198a:	f000 fa67 	bl	8001e5c <HAL_DMA_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8001994:	f7ff fd94 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 800199c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <HAL_UART_MspInit+0x1b8>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019a8:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <HAL_UART_MspInit+0x1c4>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019ae:	221b      	movs	r2, #27
 80019b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019b4:	2210      	movs	r2, #16
 80019b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019dc:	4811      	ldr	r0, [pc, #68]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019de:	f000 fa3d 	bl	8001e5c <HAL_DMA_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_UART_MspInit+0x188>
    {
      Error_Handler();
 80019e8:	f7ff fd6a 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <HAL_UART_MspInit+0x1c0>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2026      	movs	r0, #38	; 0x26
 80019fe:	f000 fa03 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a02:	2026      	movs	r0, #38	; 0x26
 8001a04:	f000 fa1c 	bl	8001e40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a08:	bf00      	nop
 8001a0a:	37c0      	adds	r7, #192	; 0xc0
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40004400 	.word	0x40004400
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48000c00 	.word	0x48000c00
 8001a1c:	200050dc 	.word	0x200050dc
 8001a20:	40020408 	.word	0x40020408
 8001a24:	2000513c 	.word	0x2000513c
 8001a28:	40020080 	.word	0x40020080

08001a2c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a3a:	2206      	movs	r2, #6
 8001a3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a46:	2202      	movs	r2, #2
 8001a48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a70:	f000 ff0a 	bl	8002888 <HAL_PCD_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a7a:	f7ff fd21 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000519c 	.word	0x2000519c

08001a88 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b0b0      	sub	sp, #192	; 0xc0
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	2294      	movs	r2, #148	; 0x94
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00f ff7b 	bl	80119a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab6:	d163      	bne.n	8001b80 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001abc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 f8d7 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ad4:	f7ff fcf4 	bl	80014c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	4a2a      	ldr	r2, [pc, #168]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001af0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f000 fcd9 	bl	80024d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001b24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d114      	bne.n	8001b6c <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001b5a:	f002 f975 	bl	8003e48 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_PCD_MspInit+0x100>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6a:	e001      	b.n	8001b70 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001b6c:	f002 f96c 	bl	8003e48 <HAL_PWREx_EnableVddUSB>
    }

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2043      	movs	r0, #67	; 0x43
 8001b76:	f000 f947 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001b7a:	2043      	movs	r0, #67	; 0x43
 8001b7c:	f000 f960 	bl	8001e40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001b80:	bf00      	nop
 8001b82:	37c0      	adds	r7, #192	; 0xc0
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000

08001b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b90:	f7ff fe0a 	bl	80017a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b96:	490d      	ldr	r1, [pc, #52]	; (8001bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <LoopForever+0xe>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bac:	4c0a      	ldr	r4, [pc, #40]	; (8001bd8 <LoopForever+0x16>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bba:	f00f ff7d 	bl	8011ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bbe:	f7ff fc0b 	bl	80013d8 <main>

08001bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bc2:	e7fe      	b.n	8001bc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001bd0:	0801283c 	.word	0x0801283c
  ldr r2, =_sbss
 8001bd4:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001bd8:	20006598 	.word	0x20006598

08001bdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC1_IRQHandler>

08001bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 f902 	bl	8001df2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f7ff fc90 	bl	8001514 <HAL_InitTick>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	71fb      	strb	r3, [r7, #7]
 8001bfe:	e001      	b.n	8001c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c00:	f7ff fc64 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c04:	79fb      	ldrb	r3, [r7, #7]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20005680 	.word	0x20005680

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20005680 	.word	0x20005680

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000008 	.word	0x20000008

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	; (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff4c 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1a:	f7ff ff61 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	6978      	ldr	r0, [r7, #20]
 8001e26:	f7ff ffb1 	bl	8001d8c <NVIC_EncodePriority>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff80 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e38:	bf00      	nop
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff54 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e08d      	b.n	8001f8a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_DMA_Init+0x138>)
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d80f      	bhi.n	8001e9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <HAL_DMA_Init+0x13c>)
 8001e82:	4413      	add	r3, r2
 8001e84:	4a45      	ldr	r2, [pc, #276]	; (8001f9c <HAL_DMA_Init+0x140>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	009a      	lsls	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a42      	ldr	r2, [pc, #264]	; (8001fa0 <HAL_DMA_Init+0x144>)
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40
 8001e98:	e00e      	b.n	8001eb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_DMA_Init+0x148>)
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a3d      	ldr	r2, [pc, #244]	; (8001f9c <HAL_DMA_Init+0x140>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	009a      	lsls	r2, r3, #2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_DMA_Init+0x14c>)
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa7e 	bl	800240c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f18:	d102      	bne.n	8001f20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f34:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_DMA_Init+0x104>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d80c      	bhi.n	8001f60 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fa9e 	bl	8002488 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	e008      	b.n	8001f72 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40020407 	.word	0x40020407
 8001f98:	bffdfff8 	.word	0xbffdfff8
 8001f9c:	cccccccd 	.word	0xcccccccd
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	bffdfbf8 	.word	0xbffdfbf8
 8001fa8:	40020400 	.word	0x40020400

08001fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_DMA_Start_IT+0x20>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e066      	b.n	800209a <HAL_DMA_Start_IT+0xee>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d155      	bne.n	800208c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f9c2 	bl	800238e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 020e 	orr.w	r2, r2, #14
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e00f      	b.n	8002044 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0204 	bic.w	r2, r2, #4
 8002032:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 020a 	orr.w	r2, r2, #10
 8002042:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002060:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002078:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e005      	b.n	8002098 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002094:	2302      	movs	r3, #2
 8002096:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002098:	7dfb      	ldrb	r3, [r7, #23]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d008      	beq.n	80020cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2204      	movs	r2, #4
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e040      	b.n	800214e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 020e 	bic.w	r2, r2, #14
 80020da:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ea:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f003 021c 	and.w	r2, r3, #28
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002118:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002130:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800213a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d005      	beq.n	800217e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2204      	movs	r2, #4
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e047      	b.n	800220e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 020e 	bic.w	r2, r2, #14
 800218c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f003 021c 	and.w	r2, r3, #28
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00c      	beq.n	80021ee <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021ec:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
    }
  }
  return status;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f003 031c 	and.w	r3, r3, #28
 8002238:	2204      	movs	r2, #4
 800223a:	409a      	lsls	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d026      	beq.n	8002292 <HAL_DMA_IRQHandler+0x7a>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d021      	beq.n	8002292 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0204 	bic.w	r2, r2, #4
 800226a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	f003 021c 	and.w	r2, r3, #28
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	2104      	movs	r1, #4
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	2b00      	cmp	r3, #0
 8002286:	d071      	beq.n	800236c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002290:	e06c      	b.n	800236c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f003 031c 	and.w	r3, r3, #28
 800229a:	2202      	movs	r2, #2
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d02e      	beq.n	8002304 <HAL_DMA_IRQHandler+0xec>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d029      	beq.n	8002304 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10b      	bne.n	80022d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 020a 	bic.w	r2, r2, #10
 80022cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f003 021c 	and.w	r2, r3, #28
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2102      	movs	r1, #2
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d038      	beq.n	800236c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002302:	e033      	b.n	800236c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	f003 031c 	and.w	r3, r3, #28
 800230c:	2208      	movs	r2, #8
 800230e:	409a      	lsls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d02a      	beq.n	800236e <HAL_DMA_IRQHandler+0x156>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d025      	beq.n	800236e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 020e 	bic.w	r2, r2, #14
 8002330:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 021c 	and.w	r2, r3, #28
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f202 	lsl.w	r2, r1, r2
 8002344:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002360:	2b00      	cmp	r3, #0
 8002362:	d004      	beq.n	800236e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800236c:	bf00      	nop
 800236e:	bf00      	nop
}
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023a4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023b6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023bc:	f003 021c 	and.w	r2, r3, #28
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d108      	bne.n	80023ee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023ec:	e007      	b.n	80023fe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	60da      	str	r2, [r3, #12]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800241c:	429a      	cmp	r2, r3
 800241e:	d80a      	bhi.n	8002436 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800242c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6493      	str	r3, [r2, #72]	; 0x48
 8002434:	e007      	b.n	8002446 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	009a      	lsls	r2, r3, #2
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002440:	4413      	add	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3b08      	subs	r3, #8
 800244e:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800245c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	2201      	movs	r2, #1
 8002466:	409a      	lsls	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40020407 	.word	0x40020407
 800247c:	4002081c 	.word	0x4002081c
 8002480:	cccccccd 	.word	0xcccccccd
 8002484:	40020880 	.word	0x40020880

08002488 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	461a      	mov	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2201      	movs	r2, #1
 80024b6:	409a      	lsls	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	1000823f 	.word	0x1000823f
 80024cc:	40020940 	.word	0x40020940

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024de:	e166      	b.n	80027ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	4013      	ands	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 8158 	beq.w	80027a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d005      	beq.n	8002510 <HAL_GPIO_Init+0x40>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d130      	bne.n	8002572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002546:	2201      	movs	r2, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f003 0201 	and.w	r2, r3, #1
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b03      	cmp	r3, #3
 800257c:	d017      	beq.n	80025ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d123      	bne.n	8002602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	6939      	ldr	r1, [r7, #16]
 80025fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0203 	and.w	r2, r3, #3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80b2 	beq.w	80027a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002644:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_GPIO_Init+0x2fc>)
 8002646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002648:	4a60      	ldr	r2, [pc, #384]	; (80027cc <HAL_GPIO_Init+0x2fc>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6613      	str	r3, [r2, #96]	; 0x60
 8002650:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <HAL_GPIO_Init+0x2fc>)
 8002652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800265c:	4a5c      	ldr	r2, [pc, #368]	; (80027d0 <HAL_GPIO_Init+0x300>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002686:	d02b      	beq.n	80026e0 <HAL_GPIO_Init+0x210>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a52      	ldr	r2, [pc, #328]	; (80027d4 <HAL_GPIO_Init+0x304>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d025      	beq.n	80026dc <HAL_GPIO_Init+0x20c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a51      	ldr	r2, [pc, #324]	; (80027d8 <HAL_GPIO_Init+0x308>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d01f      	beq.n	80026d8 <HAL_GPIO_Init+0x208>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a50      	ldr	r2, [pc, #320]	; (80027dc <HAL_GPIO_Init+0x30c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d019      	beq.n	80026d4 <HAL_GPIO_Init+0x204>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a4f      	ldr	r2, [pc, #316]	; (80027e0 <HAL_GPIO_Init+0x310>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d013      	beq.n	80026d0 <HAL_GPIO_Init+0x200>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a4e      	ldr	r2, [pc, #312]	; (80027e4 <HAL_GPIO_Init+0x314>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00d      	beq.n	80026cc <HAL_GPIO_Init+0x1fc>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a4d      	ldr	r2, [pc, #308]	; (80027e8 <HAL_GPIO_Init+0x318>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <HAL_GPIO_Init+0x1f8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a4c      	ldr	r2, [pc, #304]	; (80027ec <HAL_GPIO_Init+0x31c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_GPIO_Init+0x1f4>
 80026c0:	2307      	movs	r3, #7
 80026c2:	e00e      	b.n	80026e2 <HAL_GPIO_Init+0x212>
 80026c4:	2308      	movs	r3, #8
 80026c6:	e00c      	b.n	80026e2 <HAL_GPIO_Init+0x212>
 80026c8:	2306      	movs	r3, #6
 80026ca:	e00a      	b.n	80026e2 <HAL_GPIO_Init+0x212>
 80026cc:	2305      	movs	r3, #5
 80026ce:	e008      	b.n	80026e2 <HAL_GPIO_Init+0x212>
 80026d0:	2304      	movs	r3, #4
 80026d2:	e006      	b.n	80026e2 <HAL_GPIO_Init+0x212>
 80026d4:	2303      	movs	r3, #3
 80026d6:	e004      	b.n	80026e2 <HAL_GPIO_Init+0x212>
 80026d8:	2302      	movs	r3, #2
 80026da:	e002      	b.n	80026e2 <HAL_GPIO_Init+0x212>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_GPIO_Init+0x212>
 80026e0:	2300      	movs	r3, #0
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	f002 0203 	and.w	r2, r2, #3
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	4093      	lsls	r3, r2
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026f2:	4937      	ldr	r1, [pc, #220]	; (80027d0 <HAL_GPIO_Init+0x300>)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002700:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002724:	4a32      	ldr	r2, [pc, #200]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_GPIO_Init+0x320>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800274e:	4a28      	ldr	r2, [pc, #160]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	43db      	mvns	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_GPIO_Init+0x320>)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_GPIO_Init+0x320>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027a2:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <HAL_GPIO_Init+0x320>)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3301      	adds	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f47f ae91 	bne.w	80024e0 <HAL_GPIO_Init+0x10>
  }
}
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010000 	.word	0x40010000
 80027d4:	48000400 	.word	0x48000400
 80027d8:	48000800 	.word	0x48000800
 80027dc:	48000c00 	.word	0x48000c00
 80027e0:	48001000 	.word	0x48001000
 80027e4:	48001400 	.word	0x48001400
 80027e8:	48001800 	.word	0x48001800
 80027ec:	48001c00 	.word	0x48001c00
 80027f0:	40010400 	.word	0x40010400

080027f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e001      	b.n	8002816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002840:	e002      	b.n	8002848 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43d9      	mvns	r1, r3
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	400b      	ands	r3, r1
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af02      	add	r7, sp, #8
 800288e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e101      	b.n	8002a9e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff f8ea 	bl	8001a88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2203      	movs	r2, #3
 80028b8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f005 f865 	bl	8007996 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7c1a      	ldrb	r2, [r3, #16]
 80028d4:	f88d 2000 	strb.w	r2, [sp]
 80028d8:	3304      	adds	r3, #4
 80028da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028dc:	f004 ff80 	bl	80077e0 <USB_CoreInit>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0d5      	b.n	8002a9e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f005 f85d 	bl	80079b8 <USB_SetCurrentMode>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0c6      	b.n	8002a9e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e04a      	b.n	80029ac <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3315      	adds	r3, #21
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3314      	adds	r3, #20
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	b298      	uxth	r0, r3
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	332e      	adds	r3, #46	; 0x2e
 8002952:	4602      	mov	r2, r0
 8002954:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3318      	adds	r3, #24
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	331c      	adds	r3, #28
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3320      	adds	r3, #32
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3324      	adds	r3, #36	; 0x24
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	3301      	adds	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	791b      	ldrb	r3, [r3, #4]
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d3af      	bcc.n	8002916 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e044      	b.n	8002a46 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f203 2355 	addw	r3, r3, #597	; 0x255
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	3301      	adds	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	791b      	ldrb	r3, [r3, #4]
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3b5      	bcc.n	80029bc <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7c1a      	ldrb	r2, [r3, #16]
 8002a58:	f88d 2000 	strb.w	r2, [sp]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a60:	f004 fff6 	bl	8007a50 <USB_DevInit>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e013      	b.n	8002a9e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7b1b      	ldrb	r3, [r3, #12]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d102      	bne.n	8002a92 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f001 f8e7 	bl	8003c60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f005 ffad 	bl	80089f6 <USB_DevDisconnect>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_PCD_Start+0x1c>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e01c      	b.n	8002afc <HAL_PCD_Start+0x56>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7b5b      	ldrb	r3, [r3, #13]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 ff46 	bl	8007974 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f005 ff61 	bl	80089b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_PCD_Stop+0x1c>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e022      	b.n	8002b66 <HAL_PCD_Stop+0x62>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  __HAL_PCD_DISABLE(hpcd);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 ff32 	bl	8007996 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 ff5d 	bl	80089f6 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2110      	movs	r1, #16
 8002b42:	4618      	mov	r0, r3
 8002b44:	f005 f8cc 	bl	8007ce0 <USB_FlushTxFifo>

  if (hpcd->Init.battery_charging_enable == 1U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7b5b      	ldrb	r3, [r3, #13]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_PCD_Stop+0x58>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b6e:	b590      	push	{r4, r7, lr}
 8002b70:	b08d      	sub	sp, #52	; 0x34
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f005 ffea 	bl	8008b5e <USB_GetMode>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 8481 	bne.w	8003494 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f005 ff4e 	bl	8008a38 <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8477 	beq.w	8003492 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f005 ff3b 	bl	8008a38 <USB_ReadInterrupts>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d107      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f002 0202 	and.w	r2, r2, #2
 8002bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f005 ff29 	bl	8008a38 <USB_ReadInterrupts>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d161      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0210 	bic.w	r2, r2, #16
 8002bfe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	0c5b      	lsrs	r3, r3, #17
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d124      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d035      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	6a38      	ldr	r0, [r7, #32]
 8002c4c:	f005 fd60 	bl	8008710 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c5c:	441a      	add	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c6e:	441a      	add	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	e016      	b.n	8002ca4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	0c5b      	lsrs	r3, r3, #17
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d110      	bne.n	8002ca4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002c88:	2208      	movs	r2, #8
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6a38      	ldr	r0, [r7, #32]
 8002c8e:	f005 fd3f 	bl	8008710 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c9e:	441a      	add	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0210 	orr.w	r2, r2, #16
 8002cb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 febd 	bl	8008a38 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cc8:	f040 80a7 	bne.w	8002e1a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f005 fec2 	bl	8008a5e <USB_ReadDevAllOutEpInterrupt>
 8002cda:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002cdc:	e099      	b.n	8002e12 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 808e 	beq.w	8002e06 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f005 fee6 	bl	8008ac6 <USB_ReadDevOutEPInterrupt>
 8002cfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00c      	beq.n	8002d20 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d12:	461a      	mov	r2, r3
 8002d14:	2301      	movs	r3, #1
 8002d16:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fec6 	bl	8003aac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00c      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d36:	461a      	mov	r2, r3
 8002d38:	2308      	movs	r3, #8
 8002d3a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 ff02 	bl	8003b48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d030      	beq.n	8002dcc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b80      	cmp	r3, #128	; 0x80
 8002d74:	d109      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d88:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	78db      	ldrb	r3, [r3, #3]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d108      	bne.n	8002dba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fb70 	bl	800349a <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2302      	movs	r3, #2
 8002dca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de2:	461a      	mov	r2, r3
 8002de4:	2320      	movs	r3, #32
 8002de6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	3301      	adds	r3, #1
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f47f af62 	bne.w	8002cde <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f005 fe0a 	bl	8008a38 <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e2e:	f040 80a4 	bne.w	8002f7a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 fe2b 	bl	8008a92 <USB_ReadDevAllInEpInterrupt>
 8002e3c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e42:	e096      	b.n	8002f72 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 808b 	beq.w	8002f66 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f005 fe51 	bl	8008b02 <USB_ReadDevInEPInterrupt>
 8002e60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	2201      	movs	r2, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69f9      	ldr	r1, [r7, #28]
 8002e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f00c fb8d 	bl	800f5c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efc:	461a      	mov	r2, r3
 8002efe:	2340      	movs	r3, #64	; 0x40
 8002f00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d023      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f0e:	6a38      	ldr	r0, [r7, #32]
 8002f10:	f004 fee6 	bl	8007ce0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	3310      	adds	r3, #16
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	78db      	ldrb	r3, [r3, #3]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d108      	bne.n	8002f42 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2200      	movs	r2, #0
 8002f34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fab8 	bl	80034b2 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2302      	movs	r3, #2
 8002f52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fd1b 	bl	800399c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	3301      	adds	r3, #1
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f47f af65 	bne.w	8002e44 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f005 fd5a 	bl	8008a38 <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f8e:	d122      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fe75 	bl	8003ca8 <HAL_PCDEx_LPM_Callback>
 8002fbe:	e002      	b.n	8002fc6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f00c fcab 	bl	800f91c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f005 fd2c 	bl	8008a38 <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fea:	d112      	bne.n	8003012 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d102      	bne.n	8003002 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f00c fc77 	bl	800f8f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003010:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f005 fd0e 	bl	8008a38 <USB_ReadInterrupts>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003026:	d121      	bne.n	800306c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003036:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800303e:	2b00      	cmp	r3, #0
 8003040:	d111      	bne.n	8003066 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	089b      	lsrs	r3, r3, #2
 8003052:	f003 020f 	and.w	r2, r3, #15
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800305c:	2101      	movs	r1, #1
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fe22 	bl	8003ca8 <HAL_PCDEx_LPM_Callback>
 8003064:	e002      	b.n	800306c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f00c fc42 	bl	800f8f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f005 fce1 	bl	8008a38 <USB_ReadInterrupts>
 8003076:	4603      	mov	r3, r0
 8003078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003080:	f040 80b6 	bne.w	80031f0 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2110      	movs	r1, #16
 800309e:	4618      	mov	r0, r3
 80030a0:	f004 fe1e 	bl	8007ce0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a8:	e046      	b.n	8003138 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b6:	461a      	mov	r2, r3
 80030b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ce:	0151      	lsls	r1, r2, #5
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	440a      	add	r2, r1
 80030d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ea:	461a      	mov	r2, r3
 80030ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003102:	0151      	lsls	r1, r2, #5
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	440a      	add	r2, r1
 8003108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800310c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003110:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003122:	0151      	lsls	r1, r2, #5
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	440a      	add	r2, r1
 8003128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800312c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003130:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	3301      	adds	r3, #1
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	791b      	ldrb	r3, [r3, #4]
 800313c:	461a      	mov	r2, r3
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	4293      	cmp	r3, r2
 8003142:	d3b2      	bcc.n	80030aa <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003152:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003156:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7bdb      	ldrb	r3, [r3, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d016      	beq.n	800318e <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003170:	f043 030b 	orr.w	r3, r3, #11
 8003174:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003186:	f043 030b 	orr.w	r3, r3, #11
 800318a:	6453      	str	r3, [r2, #68]	; 0x44
 800318c:	e015      	b.n	80031ba <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800319c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b4:	f043 030b 	orr.w	r3, r3, #11
 80031b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f005 fcf0 	bl	8008bc0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f005 fc1f 	bl	8008a38 <USB_ReadInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003204:	d123      	bne.n	800324e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f005 fcb5 	bl	8008b7a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fddc 	bl	8007dd2 <USB_GetDevSpeed>
 800321a:	4603      	mov	r3, r0
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681c      	ldr	r4, [r3, #0]
 8003226:	f001 fbff 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 800322a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003230:	461a      	mov	r2, r3
 8003232:	4620      	mov	r0, r4
 8003234:	f004 fb02 	bl	800783c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f00c fafd 	bl	800f838 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800324c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f005 fbf0 	bl	8008a38 <USB_ReadInterrupts>
 8003258:	4603      	mov	r3, r0
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b08      	cmp	r3, #8
 8003260:	d10a      	bne.n	8003278 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f00c fb70 	bl	800f948 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f002 0208 	and.w	r2, r2, #8
 8003276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f005 fbdb 	bl	8008a38 <USB_ReadInterrupts>
 8003282:	4603      	mov	r3, r0
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d123      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003298:	2301      	movs	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
 800329c:	e014      	b.n	80032c8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	f203 2357 	addw	r3, r3, #599	; 0x257
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4619      	mov	r1, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fb0f 	bl	80038e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	3301      	adds	r3, #1
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	791b      	ldrb	r3, [r3, #4]
 80032cc:	461a      	mov	r2, r3
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d3e4      	bcc.n	800329e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f005 fbad 	bl	8008a38 <USB_ReadInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e8:	d13c      	bne.n	8003364 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032ea:	2301      	movs	r3, #1
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
 80032ee:	e02b      	b.n	8003348 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3318      	adds	r3, #24
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d115      	bne.n	8003342 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003316:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003318:	2b00      	cmp	r3, #0
 800331a:	da12      	bge.n	8003342 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	3317      	adds	r3, #23
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003338:	b2db      	uxtb	r3, r3
 800333a:	4619      	mov	r1, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 facf 	bl	80038e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	3301      	adds	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	791b      	ldrb	r3, [r3, #4]
 800334c:	461a      	mov	r2, r3
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	4293      	cmp	r3, r2
 8003352:	d3cd      	bcc.n	80032f0 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f005 fb65 	bl	8008a38 <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003378:	d156      	bne.n	8003428 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800337a:	2301      	movs	r3, #1
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
 800337e:	e045      	b.n	800340c <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d12e      	bne.n	8003406 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da2b      	bge.n	8003406 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80033ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033be:	429a      	cmp	r2, r3
 80033c0:	d121      	bne.n	8003406 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003402:	6053      	str	r3, [r2, #4]
            break;
 8003404:	e008      	b.n	8003418 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	3301      	adds	r3, #1
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	791b      	ldrb	r3, [r3, #4]
 8003410:	461a      	mov	r2, r3
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	4293      	cmp	r3, r2
 8003416:	d3b3      	bcc.n	8003380 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f005 fb03 	bl	8008a38 <USB_ReadInterrupts>
 8003432:	4603      	mov	r3, r0
 8003434:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d10a      	bne.n	8003454 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f00c fa22 	bl	800f888 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f005 faed 	bl	8008a38 <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b04      	cmp	r3, #4
 8003466:	d115      	bne.n	8003494 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f00c fa1a 	bl	800f8b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	e000      	b.n	8003494 <HAL_PCD_IRQHandler+0x926>
      return;
 8003492:	bf00      	nop
    }
  }
}
 8003494:	3734      	adds	r7, #52	; 0x34
 8003496:	46bd      	mov	sp, r7
 8003498:	bd90      	pop	{r4, r7, pc}

0800349a <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_PCD_SetAddress+0x1a>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e012      	b.n	800350a <HAL_PCD_SetAddress+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f005 fa34 	bl	8008968 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	4608      	mov	r0, r1
 800351c:	4611      	mov	r1, r2
 800351e:	461a      	mov	r2, r3
 8003520:	4603      	mov	r3, r0
 8003522:	70fb      	strb	r3, [r7, #3]
 8003524:	460b      	mov	r3, r1
 8003526:	803b      	strh	r3, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003534:	2b00      	cmp	r3, #0
 8003536:	da0f      	bge.n	8003558 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 020f 	and.w	r2, r3, #15
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	3310      	adds	r3, #16
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	705a      	strb	r2, [r3, #1]
 8003556:	e00f      	b.n	8003578 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 020f 	and.w	r2, r3, #15
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	b2da      	uxtb	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003584:	883b      	ldrh	r3, [r7, #0]
 8003586:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	78ba      	ldrb	r2, [r7, #2]
 8003592:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d004      	beq.n	80035a6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035a6:	78bb      	ldrb	r3, [r7, #2]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d102      	bne.n	80035b2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_PCD_EP_Open+0xae>
 80035bc:	2302      	movs	r3, #2
 80035be:	e00e      	b.n	80035de <HAL_PCD_EP_Open+0xcc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68f9      	ldr	r1, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fc1e 	bl	8007e10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80035dc:	7afb      	ldrb	r3, [r7, #11]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da0f      	bge.n	800361a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	f003 020f 	and.w	r2, r3, #15
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	3310      	adds	r3, #16
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	705a      	strb	r2, [r3, #1]
 8003618:	e00f      	b.n	800363a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	3304      	adds	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_PCD_EP_Close+0x6e>
 8003650:	2302      	movs	r3, #2
 8003652:	e00e      	b.n	8003672 <HAL_PCD_EP_Close+0x8c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68f9      	ldr	r1, [r7, #12]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fc5c 	bl	8007f20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	460b      	mov	r3, r1
 8003688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	f003 020f 	and.w	r2, r3, #15
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	3304      	adds	r3, #4
 80036a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2200      	movs	r2, #0
 80036b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036bc:	7afb      	ldrb	r3, [r7, #11]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6979      	ldr	r1, [r7, #20]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fd02 	bl	80080d8 <USB_EPStartXfer>

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	f003 020f 	and.w	r2, r3, #15
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003700:	681b      	ldr	r3, [r3, #0]
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	460b      	mov	r3, r1
 800371c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	f003 020f 	and.w	r2, r3, #15
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3310      	adds	r3, #16
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4413      	add	r3, r2
 8003732:	3304      	adds	r3, #4
 8003734:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2200      	movs	r2, #0
 8003746:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2201      	movs	r2, #1
 800374c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800374e:	7afb      	ldrb	r3, [r7, #11]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	b2da      	uxtb	r2, r3
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6979      	ldr	r1, [r7, #20]
 8003760:	4618      	mov	r0, r3
 8003762:	f004 fcb9 	bl	80080d8 <USB_EPStartXfer>

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	7912      	ldrb	r2, [r2, #4]
 8003786:	4293      	cmp	r3, r2
 8003788:	d901      	bls.n	800378e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e04e      	b.n	800382c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800378e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003792:	2b00      	cmp	r3, #0
 8003794:	da0f      	bge.n	80037b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	f003 020f 	and.w	r2, r3, #15
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	3310      	adds	r3, #16
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	3304      	adds	r3, #4
 80037ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	705a      	strb	r2, [r3, #1]
 80037b4:	e00d      	b.n	80037d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	3304      	adds	r3, #4
 80037ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_PCD_EP_SetStall+0x82>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e01c      	b.n	800382c <HAL_PCD_EP_SetStall+0xbc>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	4618      	mov	r0, r3
 8003802:	f004 ffdd 	bl	80087c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	2b00      	cmp	r3, #0
 800380e:	d108      	bne.n	8003822 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f005 f9cf 	bl	8008bc0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	7912      	ldrb	r2, [r2, #4]
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e042      	b.n	80038d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003856:	2b00      	cmp	r3, #0
 8003858:	da0f      	bge.n	800387a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	f003 020f 	and.w	r2, r3, #15
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	3310      	adds	r3, #16
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	3304      	adds	r3, #4
 8003870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	705a      	strb	r2, [r3, #1]
 8003878:	e00f      	b.n	800389a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 020f 	and.w	r2, r3, #15
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	4413      	add	r3, r2
 8003890:	3304      	adds	r3, #4
 8003892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_PCD_EP_ClrStall+0x86>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e00e      	b.n	80038d8 <HAL_PCD_EP_ClrStall+0xa4>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f004 ffe7 	bl	800889c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da0c      	bge.n	800390e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 020f 	and.w	r2, r3, #15
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3310      	adds	r3, #16
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e00c      	b.n	8003928 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	4618      	mov	r0, r3
 8003930:	f004 fe0a 	bl	8008548 <USB_EPStopXfer>
 8003934:	4603      	mov	r3, r0
 8003936:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003938:	7afb      	ldrb	r3, [r7, #11]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_PCD_EP_Flush+0x1a>
 8003958:	2302      	movs	r3, #2
 800395a:	e01b      	b.n	8003994 <HAL_PCD_EP_Flush+0x52>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8003964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003968:	2b00      	cmp	r3, #0
 800396a:	da09      	bge.n	8003980 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f004 f9b1 	bl	8007ce0 <USB_FlushTxFifo>
 800397e:	e004      	b.n	800398a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f004 f9dd 	bl	8007d44 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	3310      	adds	r3, #16
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	3304      	adds	r3, #4
 80039c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d901      	bls.n	80039d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e067      	b.n	8003aa4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d902      	bls.n	80039f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3303      	adds	r3, #3
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039f8:	e026      	b.n	8003a48 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d902      	bls.n	8003a16 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3303      	adds	r3, #3
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68d9      	ldr	r1, [r3, #12]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	6978      	ldr	r0, [r7, #20]
 8003a2c:	f004 fe36 	bl	800869c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	441a      	add	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	441a      	add	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d809      	bhi.n	8003a72 <PCD_WriteEmptyTxFifo+0xd6>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d203      	bcs.n	8003a72 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1c3      	bne.n	80039fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d811      	bhi.n	8003aa2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	2201      	movs	r2, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	6939      	ldr	r1, [r7, #16]
 8003a9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	333c      	adds	r3, #60	; 0x3c
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <PCD_EP_OutXfrComplete_int+0x98>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d124      	bne.n	8003b2c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afe:	6093      	str	r3, [r2, #8]
 8003b00:	e01a      	b.n	8003b38 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2320      	movs	r3, #32
 8003b1c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f00b fe07 	bl	800f738 <HAL_PCD_DataOutStageCallback>
 8003b2a:	e005      	b.n	8003b38 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f00b fe00 	bl	800f738 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	4f54310a 	.word	0x4f54310a

08003b48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	333c      	adds	r3, #60	; 0x3c
 8003b60:	3304      	adds	r3, #4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <PCD_EP_OutSetupPacket_int+0x64>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d90e      	bls.n	8003b9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	461a      	mov	r2, r3
 8003b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f00b fc99 	bl	800f4d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	4f54300a 	.word	0x4f54300a

08003bb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d107      	bne.n	8003bde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bce:	883b      	ldrh	r3, [r7, #0]
 8003bd0:	0419      	lsls	r1, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
 8003bdc:	e028      	b.n	8003c30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4413      	add	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	e00d      	b.n	8003c0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	3340      	adds	r3, #64	; 0x40
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	4413      	add	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3ec      	bcc.n	8003bf2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c18:	883b      	ldrh	r3, [r7, #0]
 8003c1a:	0418      	lsls	r0, r3, #16
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6819      	ldr	r1, [r3, #0]
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	4302      	orrs	r2, r0
 8003c28:	3340      	adds	r3, #64	; 0x40
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	f043 0303 	orr.w	r3, r3, #3
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd0:	d102      	bne.n	8003cd8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cd6:	e00b      	b.n	8003cf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce6:	d102      	bne.n	8003cee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cec:	e000      	b.n	8003cf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003cee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40007000 	.word	0x40007000

08003d00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d141      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d0e:	4b4b      	ldr	r3, [pc, #300]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d131      	bne.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d1c:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d22:	4a46      	ldr	r2, [pc, #280]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d2c:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d34:	4a41      	ldr	r2, [pc, #260]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d3c:	4b40      	ldr	r3, [pc, #256]	; (8003e40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2232      	movs	r2, #50	; 0x32
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	4a3f      	ldr	r2, [pc, #252]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	0c9b      	lsrs	r3, r3, #18
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d52:	e002      	b.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d66:	d102      	bne.n	8003d6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f2      	bne.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d6e:	4b33      	ldr	r3, [pc, #204]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7a:	d158      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e057      	b.n	8003e30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d80:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d86:	4a2d      	ldr	r2, [pc, #180]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d90:	e04d      	b.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d141      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d9a:	4b28      	ldr	r3, [pc, #160]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da6:	d131      	bne.n	8003e0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dae:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db8:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2232      	movs	r2, #50	; 0x32
 8003dce:	fb02 f303 	mul.w	r3, r2, r3
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	0c9b      	lsrs	r3, r3, #18
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dde:	e002      	b.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d102      	bne.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f2      	bne.n	8003de0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	d112      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e011      	b.n	8003e30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e1c:	e007      	b.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e26:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e2c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	20000000 	.word	0x20000000
 8003e44:	431bde83 	.word	0x431bde83

08003e48 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e56:	6053      	str	r3, [r2, #4]
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40007000 	.word	0x40007000

08003e68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f000 bc08 	b.w	800468c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7c:	4b96      	ldr	r3, [pc, #600]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e86:	4b94      	ldr	r3, [pc, #592]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80e4 	beq.w	8004066 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x4c>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	f040 808b 	bne.w	8003fc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	f040 8087 	bne.w	8003fc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eb4:	4b88      	ldr	r3, [pc, #544]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_OscConfig+0x64>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e3df      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	4b81      	ldr	r3, [pc, #516]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x7e>
 8003edc:	4b7e      	ldr	r3, [pc, #504]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCC_OscConfig+0x8a>
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d223      	bcs.n	8003f3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fdfe 	bl	8004afc <RCC_SetFlashLatencyFromMSIRange>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e3c0      	b.n	800468c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f0a:	4b73      	ldr	r3, [pc, #460]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a72      	ldr	r2, [pc, #456]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f10:	f043 0308 	orr.w	r3, r3, #8
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b70      	ldr	r3, [pc, #448]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	496d      	ldr	r1, [pc, #436]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f28:	4b6b      	ldr	r3, [pc, #428]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	4968      	ldr	r1, [pc, #416]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
 8003f3c:	e025      	b.n	8003f8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f3e:	4b66      	ldr	r3, [pc, #408]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a65      	ldr	r2, [pc, #404]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f44:	f043 0308 	orr.w	r3, r3, #8
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b63      	ldr	r3, [pc, #396]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4960      	ldr	r1, [pc, #384]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	495b      	ldr	r1, [pc, #364]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fdbe 	bl	8004afc <RCC_SetFlashLatencyFromMSIRange>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e380      	b.n	800468c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f8a:	f000 fcc1 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b51      	ldr	r3, [pc, #324]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	4950      	ldr	r1, [pc, #320]	; (80040dc <HAL_RCC_OscConfig+0x274>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	4a4e      	ldr	r2, [pc, #312]	; (80040e0 <HAL_RCC_OscConfig+0x278>)
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003faa:	4b4e      	ldr	r3, [pc, #312]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd fab0 	bl	8001514 <HAL_InitTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d052      	beq.n	8004064 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	e364      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d032      	beq.n	8004030 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fca:	4b43      	ldr	r3, [pc, #268]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a42      	ldr	r2, [pc, #264]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fd6:	f7fd fe2f 	bl	8001c38 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fde:	f7fd fe2b 	bl	8001c38 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e34d      	b.n	800468c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ff0:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ffc:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004002:	f043 0308 	orr.w	r3, r3, #8
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4930      	ldr	r1, [pc, #192]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	492b      	ldr	r1, [pc, #172]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 800402e:	e01a      	b.n	8004066 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004030:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a28      	ldr	r2, [pc, #160]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800403c:	f7fd fdfc 	bl	8001c38 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004044:	f7fd fdf8 	bl	8001c38 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e31a      	b.n	800468c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1dc>
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004064:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d073      	beq.n	800415a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d005      	beq.n	8004084 <HAL_RCC_OscConfig+0x21c>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d10e      	bne.n	800409c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d10b      	bne.n	800409c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d063      	beq.n	8004158 <HAL_RCC_OscConfig+0x2f0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d15f      	bne.n	8004158 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e2f7      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x24c>
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a0b      	ldr	r2, [pc, #44]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e025      	b.n	8004100 <HAL_RCC_OscConfig+0x298>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040bc:	d114      	bne.n	80040e8 <HAL_RCC_OscConfig+0x280>
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a05      	ldr	r2, [pc, #20]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a02      	ldr	r2, [pc, #8]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e013      	b.n	8004100 <HAL_RCC_OscConfig+0x298>
 80040d8:	40021000 	.word	0x40021000
 80040dc:	08012788 	.word	0x08012788
 80040e0:	20000000 	.word	0x20000000
 80040e4:	20000004 	.word	0x20000004
 80040e8:	4ba0      	ldr	r3, [pc, #640]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a9f      	ldr	r2, [pc, #636]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b9d      	ldr	r3, [pc, #628]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a9c      	ldr	r2, [pc, #624]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd fd96 	bl	8001c38 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004110:	f7fd fd92 	bl	8001c38 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e2b4      	b.n	800468c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004122:	4b92      	ldr	r3, [pc, #584]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x2a8>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fd fd82 	bl	8001c38 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004138:	f7fd fd7e 	bl	8001c38 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e2a0      	b.n	800468c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800414a:	4b88      	ldr	r3, [pc, #544]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x2d0>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d060      	beq.n	8004228 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d005      	beq.n	8004178 <HAL_RCC_OscConfig+0x310>
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d119      	bne.n	80041a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d116      	bne.n	80041a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004178:	4b7c      	ldr	r3, [pc, #496]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_OscConfig+0x328>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e27d      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004190:	4b76      	ldr	r3, [pc, #472]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	4973      	ldr	r1, [pc, #460]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a4:	e040      	b.n	8004228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d023      	beq.n	80041f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ae:	4b6f      	ldr	r3, [pc, #444]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a6e      	ldr	r2, [pc, #440]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fd fd3d 	bl	8001c38 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fd fd39 	bl	8001c38 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e25b      	b.n	800468c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d4:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e0:	4b62      	ldr	r3, [pc, #392]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	495f      	ldr	r1, [pc, #380]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
 80041f4:	e018      	b.n	8004228 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f6:	4b5d      	ldr	r3, [pc, #372]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a5c      	ldr	r2, [pc, #368]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7fd fd19 	bl	8001c38 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420a:	f7fd fd15 	bl	8001c38 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e237      	b.n	800468c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d03c      	beq.n	80042ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01c      	beq.n	8004276 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423c:	4b4b      	ldr	r3, [pc, #300]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800423e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004242:	4a4a      	ldr	r2, [pc, #296]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fd fcf4 	bl	8001c38 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004254:	f7fd fcf0 	bl	8001c38 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e212      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ef      	beq.n	8004254 <HAL_RCC_OscConfig+0x3ec>
 8004274:	e01b      	b.n	80042ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004276:	4b3d      	ldr	r3, [pc, #244]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427c:	4a3b      	ldr	r2, [pc, #236]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fd fcd7 	bl	8001c38 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800428e:	f7fd fcd3 	bl	8001c38 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e1f5      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a0:	4b32      	ldr	r3, [pc, #200]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ef      	bne.n	800428e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80a6 	beq.w	8004408 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042bc:	2300      	movs	r3, #0
 80042be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042c0:	4b2a      	ldr	r3, [pc, #168]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042cc:	4b27      	ldr	r3, [pc, #156]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	4a26      	ldr	r2, [pc, #152]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6593      	str	r3, [r2, #88]	; 0x58
 80042d8:	4b24      	ldr	r3, [pc, #144]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e4:	2301      	movs	r3, #1
 80042e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <HAL_RCC_OscConfig+0x508>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d118      	bne.n	8004326 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <HAL_RCC_OscConfig+0x508>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <HAL_RCC_OscConfig+0x508>)
 80042fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004300:	f7fd fc9a 	bl	8001c38 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004308:	f7fd fc96 	bl	8001c38 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1b8      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <HAL_RCC_OscConfig+0x508>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d108      	bne.n	8004340 <HAL_RCC_OscConfig+0x4d8>
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	4a0d      	ldr	r2, [pc, #52]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800433e:	e029      	b.n	8004394 <HAL_RCC_OscConfig+0x52c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b05      	cmp	r3, #5
 8004346:	d115      	bne.n	8004374 <HAL_RCC_OscConfig+0x50c>
 8004348:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	4a07      	ldr	r2, [pc, #28]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004350:	f043 0304 	orr.w	r3, r3, #4
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	4a03      	ldr	r2, [pc, #12]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004368:	e014      	b.n	8004394 <HAL_RCC_OscConfig+0x52c>
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	40007000 	.word	0x40007000
 8004374:	4b9d      	ldr	r3, [pc, #628]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	4a9c      	ldr	r2, [pc, #624]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004384:	4b99      	ldr	r3, [pc, #612]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4a98      	ldr	r2, [pc, #608]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d016      	beq.n	80043ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fd fc4c 	bl	8001c38 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fd fc48 	bl	8001c38 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e168      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ba:	4b8c      	ldr	r3, [pc, #560]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ed      	beq.n	80043a4 <HAL_RCC_OscConfig+0x53c>
 80043c8:	e015      	b.n	80043f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fd fc35 	bl	8001c38 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fd fc31 	bl	8001c38 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e151      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043e8:	4b80      	ldr	r3, [pc, #512]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1ed      	bne.n	80043d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fc:	4b7b      	ldr	r3, [pc, #492]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	4a7a      	ldr	r2, [pc, #488]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004406:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d03c      	beq.n	800448e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01c      	beq.n	8004456 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800441c:	4b73      	ldr	r3, [pc, #460]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 800441e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004422:	4a72      	ldr	r2, [pc, #456]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fd fc04 	bl	8001c38 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004434:	f7fd fc00 	bl	8001c38 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e122      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004446:	4b69      	ldr	r3, [pc, #420]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ef      	beq.n	8004434 <HAL_RCC_OscConfig+0x5cc>
 8004454:	e01b      	b.n	800448e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004456:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800445c:	4a63      	ldr	r2, [pc, #396]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fd fbe7 	bl	8001c38 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800446e:	f7fd fbe3 	bl	8001c38 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e105      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004480:	4b5a      	ldr	r3, [pc, #360]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1ef      	bne.n	800446e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80f9 	beq.w	800468a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	2b02      	cmp	r3, #2
 800449e:	f040 80cf 	bne.w	8004640 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044a2:	4b52      	ldr	r3, [pc, #328]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f003 0203 	and.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d12c      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	3b01      	subs	r3, #1
 80044c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d123      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d11b      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d113      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	3b01      	subs	r3, #1
 80044f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d109      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	3b01      	subs	r3, #1
 800450a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d071      	beq.n	80045f4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d068      	beq.n	80045e8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004516:	4b35      	ldr	r3, [pc, #212]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004522:	4b32      	ldr	r3, [pc, #200]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0ac      	b.n	800468c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004532:	4b2e      	ldr	r3, [pc, #184]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2d      	ldr	r2, [pc, #180]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800453e:	f7fd fb7b 	bl	8001c38 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004546:	f7fd fb77 	bl	8001c38 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e099      	b.n	800468c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004564:	4b21      	ldr	r3, [pc, #132]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	4b21      	ldr	r3, [pc, #132]	; (80045f0 <HAL_RCC_OscConfig+0x788>)
 800456a:	4013      	ands	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004574:	3a01      	subs	r2, #1
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	4311      	orrs	r1, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800457e:	0212      	lsls	r2, r2, #8
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004586:	0852      	lsrs	r2, r2, #1
 8004588:	3a01      	subs	r2, #1
 800458a:	0552      	lsls	r2, r2, #21
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004592:	0852      	lsrs	r2, r2, #1
 8004594:	3a01      	subs	r2, #1
 8004596:	0652      	lsls	r2, r2, #25
 8004598:	4311      	orrs	r1, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800459e:	06d2      	lsls	r2, r2, #27
 80045a0:	430a      	orrs	r2, r1
 80045a2:	4912      	ldr	r1, [pc, #72]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80045ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045c0:	f7fd fb3a 	bl	8001c38 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fd fb36 	bl	8001c38 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e058      	b.n	800468c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045da:	4b04      	ldr	r3, [pc, #16]	; (80045ec <HAL_RCC_OscConfig+0x784>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045e6:	e050      	b.n	800468a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e04f      	b.n	800468c <HAL_RCC_OscConfig+0x824>
 80045ec:	40021000 	.word	0x40021000
 80045f0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f4:	4b27      	ldr	r3, [pc, #156]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d144      	bne.n	800468a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004600:	4b24      	ldr	r3, [pc, #144]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a23      	ldr	r2, [pc, #140]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 8004606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800460a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800460c:	4b21      	ldr	r3, [pc, #132]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a20      	ldr	r2, [pc, #128]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 8004612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004616:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004618:	f7fd fb0e 	bl	8001c38 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd fb0a 	bl	8001c38 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e02c      	b.n	800468c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004632:	4b18      	ldr	r3, [pc, #96]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x7b8>
 800463e:	e024      	b.n	800468a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d01f      	beq.n	8004686 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a12      	ldr	r2, [pc, #72]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 800464c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd faf1 	bl	8001c38 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7fd faed 	bl	8001c38 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e00f      	b.n	800468c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	4905      	ldr	r1, [pc, #20]	; (8004694 <HAL_RCC_OscConfig+0x82c>)
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <HAL_RCC_OscConfig+0x830>)
 8004680:	4013      	ands	r3, r2
 8004682:	60cb      	str	r3, [r1, #12]
 8004684:	e001      	b.n	800468a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	feeefffc 	.word	0xfeeefffc

0800469c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e11d      	b.n	80048f0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b90      	ldr	r3, [pc, #576]	; (80048f8 <HAL_RCC_ClockConfig+0x25c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d910      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b8d      	ldr	r3, [pc, #564]	; (80048f8 <HAL_RCC_ClockConfig+0x25c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 020f 	bic.w	r2, r3, #15
 80046ca:	498b      	ldr	r1, [pc, #556]	; (80048f8 <HAL_RCC_ClockConfig+0x25c>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b89      	ldr	r3, [pc, #548]	; (80048f8 <HAL_RCC_ClockConfig+0x25c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e105      	b.n	80048f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	4b81      	ldr	r3, [pc, #516]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d908      	bls.n	8004712 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b7e      	ldr	r3, [pc, #504]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	497b      	ldr	r1, [pc, #492]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d079      	beq.n	8004812 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d11e      	bne.n	8004764 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	4b75      	ldr	r3, [pc, #468]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0dc      	b.n	80048f0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004736:	f000 fa3b 	bl	8004bb0 <RCC_GetSysClockFreqFromPLLSource>
 800473a:	4603      	mov	r3, r0
 800473c:	4a70      	ldr	r2, [pc, #448]	; (8004900 <HAL_RCC_ClockConfig+0x264>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d946      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004742:	4b6e      	ldr	r3, [pc, #440]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d140      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800474e:	4b6b      	ldr	r3, [pc, #428]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004756:	4a69      	ldr	r2, [pc, #420]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	e035      	b.n	80047d0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d107      	bne.n	800477c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476c:	4b63      	ldr	r3, [pc, #396]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d115      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0b9      	b.n	80048f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004784:	4b5d      	ldr	r3, [pc, #372]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0ad      	b.n	80048f0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0a5      	b.n	80048f0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80047a4:	f000 f8b4 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4a55      	ldr	r2, [pc, #340]	; (8004900 <HAL_RCC_ClockConfig+0x264>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d90f      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80047b0:	4b52      	ldr	r3, [pc, #328]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047bc:	4b4f      	ldr	r3, [pc, #316]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047c4:	4a4d      	ldr	r2, [pc, #308]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047d0:	4b4a      	ldr	r3, [pc, #296]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f023 0203 	bic.w	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4947      	ldr	r1, [pc, #284]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e2:	f7fd fa29 	bl	8001c38 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ea:	f7fd fa25 	bl	8001c38 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e077      	b.n	80048f0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004800:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 020c 	and.w	r2, r3, #12
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	429a      	cmp	r2, r3
 8004810:	d1eb      	bne.n	80047ea <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b80      	cmp	r3, #128	; 0x80
 8004816:	d105      	bne.n	8004824 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004818:	4b38      	ldr	r3, [pc, #224]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a37      	ldr	r2, [pc, #220]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 800481e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004822:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d010      	beq.n	8004852 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	4b31      	ldr	r3, [pc, #196]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800483c:	429a      	cmp	r2, r3
 800483e:	d208      	bcs.n	8004852 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	492b      	ldr	r1, [pc, #172]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004852:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <HAL_RCC_ClockConfig+0x25c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d210      	bcs.n	8004882 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_RCC_ClockConfig+0x25c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 020f 	bic.w	r2, r3, #15
 8004868:	4923      	ldr	r1, [pc, #140]	; (80048f8 <HAL_RCC_ClockConfig+0x25c>)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004870:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <HAL_RCC_ClockConfig+0x25c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d001      	beq.n	8004882 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e036      	b.n	80048f0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	4918      	ldr	r1, [pc, #96]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d009      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ac:	4b13      	ldr	r3, [pc, #76]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4910      	ldr	r1, [pc, #64]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048c0:	f000 f826 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80048c4:	4602      	mov	r2, r0
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <HAL_RCC_ClockConfig+0x260>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	490c      	ldr	r1, [pc, #48]	; (8004904 <HAL_RCC_ClockConfig+0x268>)
 80048d2:	5ccb      	ldrb	r3, [r1, r3]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
 80048dc:	4a0a      	ldr	r2, [pc, #40]	; (8004908 <HAL_RCC_ClockConfig+0x26c>)
 80048de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <HAL_RCC_ClockConfig+0x270>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fc fe15 	bl	8001514 <HAL_InitTick>
 80048ea:	4603      	mov	r3, r0
 80048ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40022000 	.word	0x40022000
 80048fc:	40021000 	.word	0x40021000
 8004900:	04c4b400 	.word	0x04c4b400
 8004904:	08012788 	.word	0x08012788
 8004908:	20000000 	.word	0x20000000
 800490c:	20000004 	.word	0x20000004

08004910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	b480      	push	{r7}
 8004912:	b089      	sub	sp, #36	; 0x24
 8004914:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800491e:	4b3e      	ldr	r3, [pc, #248]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004928:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x34>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b0c      	cmp	r3, #12
 800493c:	d121      	bne.n	8004982 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d11e      	bne.n	8004982 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004944:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004950:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e005      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004960:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800496c:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x10c>)
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004974:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10d      	bne.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b04      	cmp	r3, #4
 8004986:	d102      	bne.n	800498e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x110>)
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e004      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d101      	bne.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004994:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x114>)
 8004996:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d134      	bne.n	8004a08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800499e:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d003      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0xac>
 80049b4:	e005      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049b6:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x110>)
 80049b8:	617b      	str	r3, [r7, #20]
      break;
 80049ba:	e005      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049bc:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x114>)
 80049be:	617b      	str	r3, [r7, #20]
      break;
 80049c0:	e002      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	617b      	str	r3, [r7, #20]
      break;
 80049c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049c8:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	3301      	adds	r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	fb03 f202 	mul.w	r2, r3, r2
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	0e5b      	lsrs	r3, r3, #25
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	3301      	adds	r3, #1
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a08:	69bb      	ldr	r3, [r7, #24]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3724      	adds	r7, #36	; 0x24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	080127a0 	.word	0x080127a0
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	007a1200 	.word	0x007a1200

08004a28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	20000000 	.word	0x20000000

08004a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a44:	f7ff fff0 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4904      	ldr	r1, [pc, #16]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	08012798 	.word	0x08012798

08004a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a70:	f7ff ffda 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	0adb      	lsrs	r3, r3, #11
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	4904      	ldr	r1, [pc, #16]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a82:	5ccb      	ldrb	r3, [r1, r3]
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	08012798 	.word	0x08012798

08004a98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	220f      	movs	r2, #15
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004aa8:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_RCC_GetClockConfig+0x5c>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0203 	and.w	r2, r3, #3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	08db      	lsrs	r3, r3, #3
 8004ad2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <HAL_RCC_GetClockConfig+0x60>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 020f 	and.w	r2, r3, #15
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	601a      	str	r2, [r3, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40022000 	.word	0x40022000

08004afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b04:	2300      	movs	r3, #0
 8004b06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b08:	4b27      	ldr	r3, [pc, #156]	; (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b14:	f7ff f8d4 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004b18:	6178      	str	r0, [r7, #20]
 8004b1a:	e014      	b.n	8004b46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b1c:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6593      	str	r3, [r2, #88]	; 0x58
 8004b28:	4b1f      	ldr	r3, [pc, #124]	; (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b34:	f7ff f8c4 	bl	8003cc0 <HAL_PWREx_GetVoltageRange>
 8004b38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	4a1a      	ldr	r2, [pc, #104]	; (8004ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b4c:	d10b      	bne.n	8004b66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b80      	cmp	r3, #128	; 0x80
 8004b52:	d913      	bls.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2ba0      	cmp	r3, #160	; 0xa0
 8004b58:	d902      	bls.n	8004b60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e00d      	b.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b60:	2301      	movs	r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	e00a      	b.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b7f      	cmp	r3, #127	; 0x7f
 8004b6a:	d902      	bls.n	8004b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	e004      	b.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b70      	cmp	r3, #112	; 0x70
 8004b76:	d101      	bne.n	8004b7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b78:	2301      	movs	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f023 020f 	bic.w	r2, r3, #15
 8004b84:	4909      	ldr	r1, [pc, #36]	; (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b8c:	4b07      	ldr	r3, [pc, #28]	; (8004bac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d001      	beq.n	8004b9e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40022000 	.word	0x40022000

08004bb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d00b      	beq.n	8004bde <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d825      	bhi.n	8004c18 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d008      	beq.n	8004be4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d11f      	bne.n	8004c18 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004bda:	613b      	str	r3, [r7, #16]
    break;
 8004bdc:	e01f      	b.n	8004c1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004bde:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004be0:	613b      	str	r3, [r7, #16]
    break;
 8004be2:	e01c      	b.n	8004c1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004be4:	4b21      	ldr	r3, [pc, #132]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d107      	bne.n	8004c00 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	e005      	b.n	8004c0c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c00:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004c0c:	4a1a      	ldr	r2, [pc, #104]	; (8004c78 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c14:	613b      	str	r3, [r7, #16]
    break;
 8004c16:	e002      	b.n	8004c1e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	613b      	str	r3, [r7, #16]
    break;
 8004c1c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	fb03 f202 	mul.w	r2, r3, r2
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	0e5b      	lsrs	r3, r3, #25
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004c5e:	683b      	ldr	r3, [r7, #0]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	007a1200 	.word	0x007a1200
 8004c78:	080127a0 	.word	0x080127a0

08004c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c84:	2300      	movs	r3, #0
 8004c86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c88:	2300      	movs	r3, #0
 8004c8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d040      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9c:	2b80      	cmp	r3, #128	; 0x80
 8004c9e:	d02a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ca0:	2b80      	cmp	r3, #128	; 0x80
 8004ca2:	d825      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ca4:	2b60      	cmp	r3, #96	; 0x60
 8004ca6:	d026      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ca8:	2b60      	cmp	r3, #96	; 0x60
 8004caa:	d821      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d006      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d81d      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d010      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cbe:	4b89      	ldr	r3, [pc, #548]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	4a88      	ldr	r2, [pc, #544]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cca:	e015      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fb02 	bl	80052dc <RCCEx_PLLSAI1_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cdc:	e00c      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3320      	adds	r3, #32
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fbed 	bl	80054c4 <RCCEx_PLLSAI2_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cee:	e003      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	74fb      	strb	r3, [r7, #19]
      break;
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cfe:	4b79      	ldr	r3, [pc, #484]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d04:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0c:	4975      	ldr	r1, [pc, #468]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004d14:	e001      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d047      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2e:	d030      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d34:	d82a      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d3a:	d02a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d40:	d824      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d46:	d008      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4c:	d81e      	bhi.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d56:	d010      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d58:	e018      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d5a:	4b62      	ldr	r3, [pc, #392]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	4a61      	ldr	r2, [pc, #388]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d64:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d66:	e015      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fab4 	bl	80052dc <RCCEx_PLLSAI1_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d78:	e00c      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3320      	adds	r3, #32
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fb9f 	bl	80054c4 <RCCEx_PLLSAI2_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d8a:	e003      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	74fb      	strb	r3, [r7, #19]
      break;
 8004d90:	e000      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d9a:	4b52      	ldr	r3, [pc, #328]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	494e      	ldr	r1, [pc, #312]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004db0:	e001      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 809f 	beq.w	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dc8:	4b46      	ldr	r3, [pc, #280]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dde:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	4a40      	ldr	r2, [pc, #256]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de8:	6593      	str	r3, [r2, #88]	; 0x58
 8004dea:	4b3e      	ldr	r3, [pc, #248]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df6:	2301      	movs	r3, #1
 8004df8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e06:	f7fc ff17 	bl	8001c38 <HAL_GetTick>
 8004e0a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e0c:	e009      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0e:	f7fc ff13 	bl	8001c38 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d902      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	74fb      	strb	r3, [r7, #19]
        break;
 8004e20:	e005      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e22:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0ef      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d15b      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e34:	4b2b      	ldr	r3, [pc, #172]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01f      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d019      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e5e:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e64:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e7e:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d016      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fc fed2 	bl	8001c38 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e96:	e00b      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e98:	f7fc fece 	bl	8001c38 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d902      	bls.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	74fb      	strb	r3, [r7, #19]
            break;
 8004eae:	e006      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0ec      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ebe:	7cfb      	ldrb	r3, [r7, #19]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10c      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	4903      	ldr	r1, [pc, #12]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004edc:	e008      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	74bb      	strb	r3, [r7, #18]
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef0:	7c7b      	ldrb	r3, [r7, #17]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d105      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef6:	4ba0      	ldr	r3, [pc, #640]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	4a9f      	ldr	r2, [pc, #636]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f0e:	4b9a      	ldr	r3, [pc, #616]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f023 0203 	bic.w	r2, r3, #3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	4996      	ldr	r1, [pc, #600]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f30:	4b91      	ldr	r3, [pc, #580]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f023 020c 	bic.w	r2, r3, #12
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	498e      	ldr	r1, [pc, #568]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f52:	4b89      	ldr	r3, [pc, #548]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f60:	4985      	ldr	r1, [pc, #532]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f74:	4b80      	ldr	r3, [pc, #512]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f82:	497d      	ldr	r1, [pc, #500]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f96:	4b78      	ldr	r3, [pc, #480]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa4:	4974      	ldr	r1, [pc, #464]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fb8:	4b6f      	ldr	r3, [pc, #444]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc6:	496c      	ldr	r1, [pc, #432]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fda:	4b67      	ldr	r3, [pc, #412]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe8:	4963      	ldr	r1, [pc, #396]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ffc:	4b5e      	ldr	r3, [pc, #376]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800500a:	495b      	ldr	r1, [pc, #364]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800501e:	4b56      	ldr	r3, [pc, #344]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502c:	4952      	ldr	r1, [pc, #328]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005040:	4b4d      	ldr	r3, [pc, #308]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	494a      	ldr	r1, [pc, #296]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005062:	4b45      	ldr	r3, [pc, #276]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005070:	4941      	ldr	r1, [pc, #260]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005084:	4b3c      	ldr	r3, [pc, #240]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800508a:	f023 0203 	bic.w	r2, r3, #3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005092:	4939      	ldr	r1, [pc, #228]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d028      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050a6:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b4:	4930      	ldr	r1, [pc, #192]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c4:	d106      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c6:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	4a2b      	ldr	r2, [pc, #172]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050d0:	60d3      	str	r3, [r2, #12]
 80050d2:	e011      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f8f9 	bl	80052dc <RCCEx_PLLSAI1_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80050f4:	7cfb      	ldrb	r3, [r7, #19]
 80050f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d04d      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510c:	d108      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800510e:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005110:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005114:	4a18      	ldr	r2, [pc, #96]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800511a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800511e:	e012      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005120:	4b15      	ldr	r3, [pc, #84]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005126:	4a14      	ldr	r2, [pc, #80]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800512c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005130:	4b11      	ldr	r3, [pc, #68]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513e:	490e      	ldr	r1, [pc, #56]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800514a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800514e:	d106      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4a08      	ldr	r2, [pc, #32]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515a:	60d3      	str	r3, [r2, #12]
 800515c:	e020      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005166:	d109      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a02      	ldr	r2, [pc, #8]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	60d3      	str	r3, [r2, #12]
 8005174:	e014      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005176:	bf00      	nop
 8005178:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005184:	d10c      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3304      	adds	r3, #4
 800518a:	2101      	movs	r1, #1
 800518c:	4618      	mov	r0, r3
 800518e:	f000 f8a5 	bl	80052dc <RCCEx_PLLSAI1_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d028      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ac:	4b4a      	ldr	r3, [pc, #296]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ba:	4947      	ldr	r1, [pc, #284]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ca:	d106      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051cc:	4b42      	ldr	r3, [pc, #264]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a41      	ldr	r2, [pc, #260]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d6:	60d3      	str	r3, [r2, #12]
 80051d8:	e011      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051e2:	d10c      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	2101      	movs	r1, #1
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 f876 	bl	80052dc <RCCEx_PLLSAI1_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80051fa:	7cfb      	ldrb	r3, [r7, #19]
 80051fc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01e      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800520a:	4b33      	ldr	r3, [pc, #204]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005210:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521a:	492f      	ldr	r1, [pc, #188]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3304      	adds	r3, #4
 8005232:	2102      	movs	r1, #2
 8005234:	4618      	mov	r0, r3
 8005236:	f000 f851 	bl	80052dc <RCCEx_PLLSAI1_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005244:	7cfb      	ldrb	r3, [r7, #19]
 8005246:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005254:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005256:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800525a:	f023 0204 	bic.w	r2, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005264:	491c      	ldr	r1, [pc, #112]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800527e:	f023 0218 	bic.w	r2, r3, #24
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	4913      	ldr	r1, [pc, #76]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d017      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800529c:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800529e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ac:	490a      	ldr	r1, [pc, #40]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052be:	d105      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000

080052dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052ea:	4b72      	ldr	r3, [pc, #456]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00e      	beq.n	8005314 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052f6:	4b6f      	ldr	r3, [pc, #444]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0203 	and.w	r2, r3, #3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d103      	bne.n	800530e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
       ||
 800530a:	2b00      	cmp	r3, #0
 800530c:	d142      	bne.n	8005394 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	e03f      	b.n	8005394 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d018      	beq.n	800534e <RCCEx_PLLSAI1_Config+0x72>
 800531c:	2b03      	cmp	r3, #3
 800531e:	d825      	bhi.n	800536c <RCCEx_PLLSAI1_Config+0x90>
 8005320:	2b01      	cmp	r3, #1
 8005322:	d002      	beq.n	800532a <RCCEx_PLLSAI1_Config+0x4e>
 8005324:	2b02      	cmp	r3, #2
 8005326:	d009      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x60>
 8005328:	e020      	b.n	800536c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800532a:	4b62      	ldr	r3, [pc, #392]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d11d      	bne.n	8005372 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533a:	e01a      	b.n	8005372 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800533c:	4b5d      	ldr	r3, [pc, #372]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005344:	2b00      	cmp	r3, #0
 8005346:	d116      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800534c:	e013      	b.n	8005376 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800534e:	4b59      	ldr	r3, [pc, #356]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10f      	bne.n	800537a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800535a:	4b56      	ldr	r3, [pc, #344]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800536a:	e006      	b.n	800537a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
      break;
 8005370:	e004      	b.n	800537c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800537a:	bf00      	nop
    }

    if(status == HAL_OK)
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d108      	bne.n	8005394 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005382:	4b4c      	ldr	r3, [pc, #304]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4949      	ldr	r1, [pc, #292]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005390:	4313      	orrs	r3, r2
 8005392:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f040 8086 	bne.w	80054a8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800539c:	4b45      	ldr	r3, [pc, #276]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a44      	ldr	r2, [pc, #272]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a8:	f7fc fc46 	bl	8001c38 <HAL_GetTick>
 80053ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053ae:	e009      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053b0:	f7fc fc42 	bl	8001c38 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d902      	bls.n	80053c4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	73fb      	strb	r3, [r7, #15]
        break;
 80053c2:	e005      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c4:	4b3b      	ldr	r3, [pc, #236]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ef      	bne.n	80053b0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d168      	bne.n	80054a8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d113      	bne.n	8005404 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053dc:	4b35      	ldr	r3, [pc, #212]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6892      	ldr	r2, [r2, #8]
 80053e8:	0211      	lsls	r1, r2, #8
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	68d2      	ldr	r2, [r2, #12]
 80053ee:	06d2      	lsls	r2, r2, #27
 80053f0:	4311      	orrs	r1, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6852      	ldr	r2, [r2, #4]
 80053f6:	3a01      	subs	r2, #1
 80053f8:	0112      	lsls	r2, r2, #4
 80053fa:	430a      	orrs	r2, r1
 80053fc:	492d      	ldr	r1, [pc, #180]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]
 8005402:	e02d      	b.n	8005460 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d115      	bne.n	8005436 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800540a:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	4b2b      	ldr	r3, [pc, #172]	; (80054bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005410:	4013      	ands	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6892      	ldr	r2, [r2, #8]
 8005416:	0211      	lsls	r1, r2, #8
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6912      	ldr	r2, [r2, #16]
 800541c:	0852      	lsrs	r2, r2, #1
 800541e:	3a01      	subs	r2, #1
 8005420:	0552      	lsls	r2, r2, #21
 8005422:	4311      	orrs	r1, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6852      	ldr	r2, [r2, #4]
 8005428:	3a01      	subs	r2, #1
 800542a:	0112      	lsls	r2, r2, #4
 800542c:	430a      	orrs	r2, r1
 800542e:	4921      	ldr	r1, [pc, #132]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005430:	4313      	orrs	r3, r2
 8005432:	610b      	str	r3, [r1, #16]
 8005434:	e014      	b.n	8005460 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005436:	4b1f      	ldr	r3, [pc, #124]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543c:	4013      	ands	r3, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	0211      	lsls	r1, r2, #8
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6952      	ldr	r2, [r2, #20]
 8005448:	0852      	lsrs	r2, r2, #1
 800544a:	3a01      	subs	r2, #1
 800544c:	0652      	lsls	r2, r2, #25
 800544e:	4311      	orrs	r1, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6852      	ldr	r2, [r2, #4]
 8005454:	3a01      	subs	r2, #1
 8005456:	0112      	lsls	r2, r2, #4
 8005458:	430a      	orrs	r2, r1
 800545a:	4916      	ldr	r1, [pc, #88]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800545c:	4313      	orrs	r3, r2
 800545e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005460:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800546a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546c:	f7fc fbe4 	bl	8001c38 <HAL_GetTick>
 8005470:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005472:	e009      	b.n	8005488 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005474:	f7fc fbe0 	bl	8001c38 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d902      	bls.n	8005488 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	73fb      	strb	r3, [r7, #15]
          break;
 8005486:	e005      	b.n	8005494 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0ef      	beq.n	8005474 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	4904      	ldr	r1, [pc, #16]	; (80054b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40021000 	.word	0x40021000
 80054b8:	07ff800f 	.word	0x07ff800f
 80054bc:	ff9f800f 	.word	0xff9f800f
 80054c0:	f9ff800f 	.word	0xf9ff800f

080054c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054d2:	4b72      	ldr	r3, [pc, #456]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00e      	beq.n	80054fc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054de:	4b6f      	ldr	r3, [pc, #444]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0203 	and.w	r2, r3, #3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d103      	bne.n	80054f6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
       ||
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d142      	bne.n	800557c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	e03f      	b.n	800557c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b03      	cmp	r3, #3
 8005502:	d018      	beq.n	8005536 <RCCEx_PLLSAI2_Config+0x72>
 8005504:	2b03      	cmp	r3, #3
 8005506:	d825      	bhi.n	8005554 <RCCEx_PLLSAI2_Config+0x90>
 8005508:	2b01      	cmp	r3, #1
 800550a:	d002      	beq.n	8005512 <RCCEx_PLLSAI2_Config+0x4e>
 800550c:	2b02      	cmp	r3, #2
 800550e:	d009      	beq.n	8005524 <RCCEx_PLLSAI2_Config+0x60>
 8005510:	e020      	b.n	8005554 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005512:	4b62      	ldr	r3, [pc, #392]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d11d      	bne.n	800555a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005522:	e01a      	b.n	800555a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005524:	4b5d      	ldr	r3, [pc, #372]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552c:	2b00      	cmp	r3, #0
 800552e:	d116      	bne.n	800555e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005534:	e013      	b.n	800555e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005536:	4b59      	ldr	r3, [pc, #356]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10f      	bne.n	8005562 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005542:	4b56      	ldr	r3, [pc, #344]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005552:	e006      	b.n	8005562 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
      break;
 8005558:	e004      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005562:	bf00      	nop
    }

    if(status == HAL_OK)
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d108      	bne.n	800557c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800556a:	4b4c      	ldr	r3, [pc, #304]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f023 0203 	bic.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4949      	ldr	r1, [pc, #292]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005578:	4313      	orrs	r3, r2
 800557a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f040 8086 	bne.w	8005690 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005584:	4b45      	ldr	r3, [pc, #276]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a44      	ldr	r2, [pc, #272]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005590:	f7fc fb52 	bl	8001c38 <HAL_GetTick>
 8005594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005596:	e009      	b.n	80055ac <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005598:	f7fc fb4e 	bl	8001c38 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d902      	bls.n	80055ac <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	73fb      	strb	r3, [r7, #15]
        break;
 80055aa:	e005      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ac:	4b3b      	ldr	r3, [pc, #236]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1ef      	bne.n	8005598 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d168      	bne.n	8005690 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d113      	bne.n	80055ec <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055c4:	4b35      	ldr	r3, [pc, #212]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055c6:	695a      	ldr	r2, [r3, #20]
 80055c8:	4b35      	ldr	r3, [pc, #212]	; (80056a0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6892      	ldr	r2, [r2, #8]
 80055d0:	0211      	lsls	r1, r2, #8
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68d2      	ldr	r2, [r2, #12]
 80055d6:	06d2      	lsls	r2, r2, #27
 80055d8:	4311      	orrs	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6852      	ldr	r2, [r2, #4]
 80055de:	3a01      	subs	r2, #1
 80055e0:	0112      	lsls	r2, r2, #4
 80055e2:	430a      	orrs	r2, r1
 80055e4:	492d      	ldr	r1, [pc, #180]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	614b      	str	r3, [r1, #20]
 80055ea:	e02d      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d115      	bne.n	800561e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055f2:	4b2a      	ldr	r3, [pc, #168]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	4b2b      	ldr	r3, [pc, #172]	; (80056a4 <RCCEx_PLLSAI2_Config+0x1e0>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6892      	ldr	r2, [r2, #8]
 80055fe:	0211      	lsls	r1, r2, #8
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6912      	ldr	r2, [r2, #16]
 8005604:	0852      	lsrs	r2, r2, #1
 8005606:	3a01      	subs	r2, #1
 8005608:	0552      	lsls	r2, r2, #21
 800560a:	4311      	orrs	r1, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6852      	ldr	r2, [r2, #4]
 8005610:	3a01      	subs	r2, #1
 8005612:	0112      	lsls	r2, r2, #4
 8005614:	430a      	orrs	r2, r1
 8005616:	4921      	ldr	r1, [pc, #132]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005618:	4313      	orrs	r3, r2
 800561a:	614b      	str	r3, [r1, #20]
 800561c:	e014      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800561e:	4b1f      	ldr	r3, [pc, #124]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005624:	4013      	ands	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6892      	ldr	r2, [r2, #8]
 800562a:	0211      	lsls	r1, r2, #8
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6952      	ldr	r2, [r2, #20]
 8005630:	0852      	lsrs	r2, r2, #1
 8005632:	3a01      	subs	r2, #1
 8005634:	0652      	lsls	r2, r2, #25
 8005636:	4311      	orrs	r1, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6852      	ldr	r2, [r2, #4]
 800563c:	3a01      	subs	r2, #1
 800563e:	0112      	lsls	r2, r2, #4
 8005640:	430a      	orrs	r2, r1
 8005642:	4916      	ldr	r1, [pc, #88]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005644:	4313      	orrs	r3, r2
 8005646:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a13      	ldr	r2, [pc, #76]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800564e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005654:	f7fc faf0 	bl	8001c38 <HAL_GetTick>
 8005658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800565a:	e009      	b.n	8005670 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800565c:	f7fc faec 	bl	8001c38 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d902      	bls.n	8005670 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	73fb      	strb	r3, [r7, #15]
          break;
 800566e:	e005      	b.n	800567c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0ef      	beq.n	800565c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005682:	4b06      	ldr	r3, [pc, #24]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	4904      	ldr	r1, [pc, #16]	; (800569c <RCCEx_PLLSAI2_Config+0x1d8>)
 800568c:	4313      	orrs	r3, r2
 800568e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005690:	7bfb      	ldrb	r3, [r7, #15]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000
 80056a0:	07ff800f 	.word	0x07ff800f
 80056a4:	ff9f800f 	.word	0xff9f800f
 80056a8:	f9ff800f 	.word	0xf9ff800f

080056ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e049      	b.n	8005752 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f841 	bl	800575a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 f9e0 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d001      	beq.n	8005788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e04f      	b.n	8005828 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a23      	ldr	r2, [pc, #140]	; (8005834 <HAL_TIM_Base_Start_IT+0xc4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01d      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0x76>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b2:	d018      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0x76>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1f      	ldr	r2, [pc, #124]	; (8005838 <HAL_TIM_Base_Start_IT+0xc8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0x76>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1e      	ldr	r2, [pc, #120]	; (800583c <HAL_TIM_Base_Start_IT+0xcc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0x76>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <HAL_TIM_Base_Start_IT+0xd0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0x76>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <HAL_TIM_Base_Start_IT+0xd4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIM_Base_Start_IT+0x76>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a19      	ldr	r2, [pc, #100]	; (8005848 <HAL_TIM_Base_Start_IT+0xd8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d115      	bne.n	8005812 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	4b17      	ldr	r3, [pc, #92]	; (800584c <HAL_TIM_Base_Start_IT+0xdc>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b06      	cmp	r3, #6
 80057f6:	d015      	beq.n	8005824 <HAL_TIM_Base_Start_IT+0xb4>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fe:	d011      	beq.n	8005824 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	e008      	b.n	8005824 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0201 	orr.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e000      	b.n	8005826 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800
 8005840:	40000c00 	.word	0x40000c00
 8005844:	40013400 	.word	0x40013400
 8005848:	40014000 	.word	0x40014000
 800584c:	00010007 	.word	0x00010007

08005850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d020      	beq.n	80058b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01b      	beq.n	80058b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0202 	mvn.w	r2, #2
 8005884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f8e9 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 80058a0:	e005      	b.n	80058ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f8db 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f8ec 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d020      	beq.n	8005900 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0204 	mvn.w	r2, #4
 80058d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8c3 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f8b5 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f8c6 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d020      	beq.n	800594c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01b      	beq.n	800594c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0208 	mvn.w	r2, #8
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2204      	movs	r2, #4
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f89d 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f88f 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f8a0 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b00      	cmp	r3, #0
 8005954:	d020      	beq.n	8005998 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0210 	mvn.w	r2, #16
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2208      	movs	r2, #8
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f877 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f869 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f87a 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00c      	beq.n	80059bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0201 	mvn.w	r2, #1
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fd70 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d104      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00c      	beq.n	80059ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80059e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f913 	bl	8005c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00c      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f90b 	bl	8005c24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f834 	bl	8005a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00c      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0220 	mvn.w	r2, #32
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8d3 	bl	8005bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a46      	ldr	r2, [pc, #280]	; (8005bdc <TIM_Base_SetConfig+0x12c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d00f      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a43      	ldr	r2, [pc, #268]	; (8005be0 <TIM_Base_SetConfig+0x130>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a42      	ldr	r2, [pc, #264]	; (8005be4 <TIM_Base_SetConfig+0x134>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a41      	ldr	r2, [pc, #260]	; (8005be8 <TIM_Base_SetConfig+0x138>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a40      	ldr	r2, [pc, #256]	; (8005bec <TIM_Base_SetConfig+0x13c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d108      	bne.n	8005b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a35      	ldr	r2, [pc, #212]	; (8005bdc <TIM_Base_SetConfig+0x12c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01f      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b10:	d01b      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a32      	ldr	r2, [pc, #200]	; (8005be0 <TIM_Base_SetConfig+0x130>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d017      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a31      	ldr	r2, [pc, #196]	; (8005be4 <TIM_Base_SetConfig+0x134>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <TIM_Base_SetConfig+0x138>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00f      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <TIM_Base_SetConfig+0x13c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2e      	ldr	r2, [pc, #184]	; (8005bf0 <TIM_Base_SetConfig+0x140>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <TIM_Base_SetConfig+0x144>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2c      	ldr	r2, [pc, #176]	; (8005bf8 <TIM_Base_SetConfig+0x148>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d108      	bne.n	8005b5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a16      	ldr	r2, [pc, #88]	; (8005bdc <TIM_Base_SetConfig+0x12c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00f      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a18      	ldr	r2, [pc, #96]	; (8005bec <TIM_Base_SetConfig+0x13c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a17      	ldr	r2, [pc, #92]	; (8005bf0 <TIM_Base_SetConfig+0x140>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a16      	ldr	r2, [pc, #88]	; (8005bf4 <TIM_Base_SetConfig+0x144>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <TIM_Base_SetConfig+0x148>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d105      	bne.n	8005bce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f023 0201 	bic.w	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	611a      	str	r2, [r3, #16]
  }
}
 8005bce:	bf00      	nop
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	40000400 	.word	0x40000400
 8005be4:	40000800 	.word	0x40000800
 8005be8:	40000c00 	.word	0x40000c00
 8005bec:	40013400 	.word	0x40013400
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800

08005bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e042      	b.n	8005cd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fb fe01 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2224      	movs	r2, #36	; 0x24
 8005c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fff2 	bl	8006c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fcf3 	bl	8006674 <UART_SetConfig>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e01b      	b.n	8005cd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 f871 	bl	8006db0 <UART_CheckIdleState>
 8005cce:	4603      	mov	r3, r0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d167      	bne.n	8005dc0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_UART_Transmit_DMA+0x24>
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e060      	b.n	8005dc2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	88fa      	ldrh	r2, [r7, #6]
 8005d0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	88fa      	ldrh	r2, [r7, #6]
 8005d12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2221      	movs	r2, #33	; 0x21
 8005d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d028      	beq.n	8005d80 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d32:	4a26      	ldr	r2, [pc, #152]	; (8005dcc <HAL_UART_Transmit_DMA+0xf4>)
 8005d34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d3a:	4a25      	ldr	r2, [pc, #148]	; (8005dd0 <HAL_UART_Transmit_DMA+0xf8>)
 8005d3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d42:	4a24      	ldr	r2, [pc, #144]	; (8005dd4 <HAL_UART_Transmit_DMA+0xfc>)
 8005d44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d56:	4619      	mov	r1, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3328      	adds	r3, #40	; 0x28
 8005d5e:	461a      	mov	r2, r3
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	f7fc f923 	bl	8001fac <HAL_DMA_Start_IT>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2210      	movs	r2, #16
 8005d70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e020      	b.n	8005dc2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2240      	movs	r2, #64	; 0x40
 8005d86:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	613b      	str	r3, [r7, #16]
   return(result);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da8:	623a      	str	r2, [r7, #32]
 8005daa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	69f9      	ldr	r1, [r7, #28]
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e5      	bne.n	8005d88 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e000      	b.n	8005dc2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005dc0:	2302      	movs	r3, #2
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3728      	adds	r7, #40	; 0x28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	0800727b 	.word	0x0800727b
 8005dd0:	08007315 	.word	0x08007315
 8005dd4:	0800749b 	.word	0x0800749b

08005dd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d137      	bne.n	8005e60 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <HAL_UART_Receive_DMA+0x24>
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e030      	b.n	8005e62 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <HAL_UART_Receive_DMA+0x94>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d01f      	beq.n	8005e50 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d018      	beq.n	8005e50 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	623b      	str	r3, [r7, #32]
 8005e3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	69f9      	ldr	r1, [r7, #28]
 8005e42:	6a3a      	ldr	r2, [r7, #32]
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e6      	bne.n	8005e1e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	461a      	mov	r2, r3
 8005e54:	68b9      	ldr	r1, [r7, #8]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f001 f8c2 	bl	8006fe0 <UART_Start_Receive_DMA>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	e000      	b.n	8005e62 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e60:	2302      	movs	r3, #2
  }
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3728      	adds	r7, #40	; 0x28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40008000 	.word	0x40008000

08005e70 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b090      	sub	sp, #64	; 0x40
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d139      	bne.n	8005f0a <HAL_UART_DMAStop+0x9a>
 8005e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e98:	2b21      	cmp	r3, #33	; 0x21
 8005e9a:	d136      	bne.n	8005f0a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e5      	bne.n	8005e9c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d015      	beq.n	8005f04 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fc f8e0 	bl	80020a2 <HAL_DMA_Abort>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00d      	beq.n	8005f04 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fc fa42 	bl	8002376 <HAL_DMA_GetError>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d105      	bne.n	8005f04 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2210      	movs	r2, #16
 8005efc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e047      	b.n	8005f94 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 f911 	bl	800712c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d13c      	bne.n	8005f92 <HAL_UART_DMAStop+0x122>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	2b22      	cmp	r3, #34	; 0x22
 8005f1c:	d139      	bne.n	8005f92 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f34:	633b      	str	r3, [r7, #48]	; 0x30
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3e:	61ba      	str	r2, [r7, #24]
 8005f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6979      	ldr	r1, [r7, #20]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d017      	beq.n	8005f8c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fc f89d 	bl	80020a2 <HAL_DMA_Abort>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00e      	beq.n	8005f8c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fc f9fe 	bl	8002376 <HAL_DMA_GetError>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d105      	bne.n	8005f8c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2210      	movs	r2, #16
 8005f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e003      	b.n	8005f94 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 f90e 	bl	80071ae <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3740      	adds	r7, #64	; 0x40
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b0ba      	sub	sp, #232	; 0xe8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005fc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fca:	4013      	ands	r3, r2
 8005fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d11b      	bne.n	8006010 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8300 	beq.w	8006606 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
      }
      return;
 800600e:	e2fa      	b.n	8006606 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8123 	beq.w	8006260 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800601a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800601e:	4b8d      	ldr	r3, [pc, #564]	; (8006254 <HAL_UART_IRQHandler+0x2b8>)
 8006020:	4013      	ands	r3, r2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006026:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800602a:	4b8b      	ldr	r3, [pc, #556]	; (8006258 <HAL_UART_IRQHandler+0x2bc>)
 800602c:	4013      	ands	r3, r2
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8116 	beq.w	8006260 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d011      	beq.n	8006064 <HAL_UART_IRQHandler+0xc8>
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00b      	beq.n	8006064 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2201      	movs	r2, #1
 8006052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605a:	f043 0201 	orr.w	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d011      	beq.n	8006094 <HAL_UART_IRQHandler+0xf8>
 8006070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2202      	movs	r2, #2
 8006082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	f043 0204 	orr.w	r2, r3, #4
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d011      	beq.n	80060c4 <HAL_UART_IRQHandler+0x128>
 80060a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2204      	movs	r2, #4
 80060b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ba:	f043 0202 	orr.w	r2, r3, #2
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d017      	beq.n	8006100 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d105      	bne.n	80060e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80060dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80060e0:	4b5c      	ldr	r3, [pc, #368]	; (8006254 <HAL_UART_IRQHandler+0x2b8>)
 80060e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2208      	movs	r2, #8
 80060ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f6:	f043 0208 	orr.w	r2, r3, #8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006108:	2b00      	cmp	r3, #0
 800610a:	d012      	beq.n	8006132 <HAL_UART_IRQHandler+0x196>
 800610c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00c      	beq.n	8006132 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006120:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006128:	f043 0220 	orr.w	r2, r3, #32
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8266 	beq.w	800660a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800613e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d013      	beq.n	8006172 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800614a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d105      	bne.n	8006162 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800615a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006178:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d005      	beq.n	8006196 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800618a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800618e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006192:	2b00      	cmp	r3, #0
 8006194:	d054      	beq.n	8006240 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 f809 	bl	80071ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d146      	bne.n	8006238 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1d9      	bne.n	80061aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006206:	4a15      	ldr	r2, [pc, #84]	; (800625c <HAL_UART_IRQHandler+0x2c0>)
 8006208:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006210:	4618      	mov	r0, r3
 8006212:	f7fb ffa2 	bl	800215a <HAL_DMA_Abort_IT>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d019      	beq.n	8006250 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800622a:	4610      	mov	r0, r2
 800622c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622e:	e00f      	b.n	8006250 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f009 ffd9 	bl	80101e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006236:	e00b      	b.n	8006250 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f009 ffd5 	bl	80101e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623e:	e007      	b.n	8006250 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f009 ffd1 	bl	80101e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800624e:	e1dc      	b.n	800660a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006250:	bf00      	nop
    return;
 8006252:	e1da      	b.n	800660a <HAL_UART_IRQHandler+0x66e>
 8006254:	10000001 	.word	0x10000001
 8006258:	04000120 	.word	0x04000120
 800625c:	0800751b 	.word	0x0800751b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006264:	2b01      	cmp	r3, #1
 8006266:	f040 8170 	bne.w	800654a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800626a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626e:	f003 0310 	and.w	r3, r3, #16
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 8169 	beq.w	800654a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 8162 	beq.w	800654a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2210      	movs	r2, #16
 800628c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	f040 80d8 	bne.w	800644e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80af 	beq.w	8006414 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062c0:	429a      	cmp	r2, r3
 80062c2:	f080 80a7 	bcs.w	8006414 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 8087 	bne.w	80063f2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800630e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006312:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800631a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1da      	bne.n	80062e4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800633e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006352:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006356:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800635a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e1      	bne.n	800632e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800637a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800637c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3308      	adds	r3, #8
 800638a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800638e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006390:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006394:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800639c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e3      	bne.n	800636a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c0:	f023 0310 	bic.w	r3, r3, #16
 80063c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80063d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e4      	bne.n	80063b0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fb fe58 	bl	80020a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006404:	b29b      	uxth	r3, r3
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	b29b      	uxth	r3, r3
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f925 	bl	800665c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006412:	e0fc      	b.n	800660e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800641a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800641e:	429a      	cmp	r2, r3
 8006420:	f040 80f5 	bne.w	800660e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b20      	cmp	r3, #32
 8006434:	f040 80eb 	bne.w	800660e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	671a      	str	r2, [r3, #112]	; 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f908 	bl	800665c <HAL_UARTEx_RxEventCallback>
      return;
 800644c:	e0df      	b.n	800660e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800645a:	b29b      	uxth	r3, r3
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80d1 	beq.w	8006612 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80cc 	beq.w	8006612 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800648e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800649c:	647b      	str	r3, [r7, #68]	; 0x44
 800649e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e4      	bne.n	800647a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3308      	adds	r3, #8
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	623b      	str	r3, [r7, #32]
   return(result);
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c6:	f023 0301 	bic.w	r3, r3, #1
 80064ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3308      	adds	r3, #8
 80064d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064d8:	633a      	str	r2, [r7, #48]	; 0x30
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e1      	bne.n	80064b0 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	60fb      	str	r3, [r7, #12]
   return(result);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f023 0310 	bic.w	r3, r3, #16
 8006514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	69b9      	ldr	r1, [r7, #24]
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	617b      	str	r3, [r7, #20]
   return(result);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e4      	bne.n	8006500 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800653c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f88a 	bl	800665c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006548:	e063      	b.n	8006612 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00e      	beq.n	8006574 <HAL_UART_IRQHandler+0x5d8>
 8006556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800655a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d008      	beq.n	8006574 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800656a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 f815 	bl	800759c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006572:	e051      	b.n	8006618 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657c:	2b00      	cmp	r3, #0
 800657e:	d014      	beq.n	80065aa <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006588:	2b00      	cmp	r3, #0
 800658a:	d105      	bne.n	8006598 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800658c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800659c:	2b00      	cmp	r3, #0
 800659e:	d03a      	beq.n	8006616 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
    }
    return;
 80065a8:	e035      	b.n	8006616 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <HAL_UART_IRQHandler+0x62e>
 80065b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 ffbf 	bl	8007546 <UART_EndTransmit_IT>
    return;
 80065c8:	e026      	b.n	8006618 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80065ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <HAL_UART_IRQHandler+0x64e>
 80065d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 ffee 	bl	80075c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065e8:	e016      	b.n	8006618 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d010      	beq.n	8006618 <HAL_UART_IRQHandler+0x67c>
 80065f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da0c      	bge.n	8006618 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 ffd6 	bl	80075b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006604:	e008      	b.n	8006618 <HAL_UART_IRQHandler+0x67c>
      return;
 8006606:	bf00      	nop
 8006608:	e006      	b.n	8006618 <HAL_UART_IRQHandler+0x67c>
    return;
 800660a:	bf00      	nop
 800660c:	e004      	b.n	8006618 <HAL_UART_IRQHandler+0x67c>
      return;
 800660e:	bf00      	nop
 8006610:	e002      	b.n	8006618 <HAL_UART_IRQHandler+0x67c>
      return;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <HAL_UART_IRQHandler+0x67c>
    return;
 8006616:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006618:	37e8      	adds	r7, #232	; 0xe8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop

08006620 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006678:	b08c      	sub	sp, #48	; 0x30
 800667a:	af00      	add	r7, sp, #0
 800667c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	431a      	orrs	r2, r3
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	431a      	orrs	r2, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	4313      	orrs	r3, r2
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	4baa      	ldr	r3, [pc, #680]	; (800694c <UART_SetConfig+0x2d8>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066ac:	430b      	orrs	r3, r1
 80066ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a9f      	ldr	r2, [pc, #636]	; (8006950 <UART_SetConfig+0x2dc>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066dc:	4313      	orrs	r3, r2
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80066ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	6812      	ldr	r2, [r2, #0]
 80066f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	f023 010f 	bic.w	r1, r3, #15
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a90      	ldr	r2, [pc, #576]	; (8006954 <UART_SetConfig+0x2e0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d125      	bne.n	8006764 <UART_SetConfig+0xf0>
 8006718:	4b8f      	ldr	r3, [pc, #572]	; (8006958 <UART_SetConfig+0x2e4>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b03      	cmp	r3, #3
 8006724:	d81a      	bhi.n	800675c <UART_SetConfig+0xe8>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <UART_SetConfig+0xb8>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	0800673d 	.word	0x0800673d
 8006730:	0800674d 	.word	0x0800674d
 8006734:	08006745 	.word	0x08006745
 8006738:	08006755 	.word	0x08006755
 800673c:	2301      	movs	r3, #1
 800673e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006742:	e116      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006744:	2302      	movs	r3, #2
 8006746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674a:	e112      	b.n	8006972 <UART_SetConfig+0x2fe>
 800674c:	2304      	movs	r3, #4
 800674e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006752:	e10e      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006754:	2308      	movs	r3, #8
 8006756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800675a:	e10a      	b.n	8006972 <UART_SetConfig+0x2fe>
 800675c:	2310      	movs	r3, #16
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006762:	e106      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a7c      	ldr	r2, [pc, #496]	; (800695c <UART_SetConfig+0x2e8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d138      	bne.n	80067e0 <UART_SetConfig+0x16c>
 800676e:	4b7a      	ldr	r3, [pc, #488]	; (8006958 <UART_SetConfig+0x2e4>)
 8006770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006774:	f003 030c 	and.w	r3, r3, #12
 8006778:	2b0c      	cmp	r3, #12
 800677a:	d82d      	bhi.n	80067d8 <UART_SetConfig+0x164>
 800677c:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <UART_SetConfig+0x110>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	080067b9 	.word	0x080067b9
 8006788:	080067d9 	.word	0x080067d9
 800678c:	080067d9 	.word	0x080067d9
 8006790:	080067d9 	.word	0x080067d9
 8006794:	080067c9 	.word	0x080067c9
 8006798:	080067d9 	.word	0x080067d9
 800679c:	080067d9 	.word	0x080067d9
 80067a0:	080067d9 	.word	0x080067d9
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	080067d9 	.word	0x080067d9
 80067ac:	080067d9 	.word	0x080067d9
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	080067d1 	.word	0x080067d1
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067be:	e0d8      	b.n	8006972 <UART_SetConfig+0x2fe>
 80067c0:	2302      	movs	r3, #2
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c6:	e0d4      	b.n	8006972 <UART_SetConfig+0x2fe>
 80067c8:	2304      	movs	r3, #4
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ce:	e0d0      	b.n	8006972 <UART_SetConfig+0x2fe>
 80067d0:	2308      	movs	r3, #8
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d6:	e0cc      	b.n	8006972 <UART_SetConfig+0x2fe>
 80067d8:	2310      	movs	r3, #16
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067de:	e0c8      	b.n	8006972 <UART_SetConfig+0x2fe>
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a5e      	ldr	r2, [pc, #376]	; (8006960 <UART_SetConfig+0x2ec>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d125      	bne.n	8006836 <UART_SetConfig+0x1c2>
 80067ea:	4b5b      	ldr	r3, [pc, #364]	; (8006958 <UART_SetConfig+0x2e4>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067f4:	2b30      	cmp	r3, #48	; 0x30
 80067f6:	d016      	beq.n	8006826 <UART_SetConfig+0x1b2>
 80067f8:	2b30      	cmp	r3, #48	; 0x30
 80067fa:	d818      	bhi.n	800682e <UART_SetConfig+0x1ba>
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d00a      	beq.n	8006816 <UART_SetConfig+0x1a2>
 8006800:	2b20      	cmp	r3, #32
 8006802:	d814      	bhi.n	800682e <UART_SetConfig+0x1ba>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <UART_SetConfig+0x19a>
 8006808:	2b10      	cmp	r3, #16
 800680a:	d008      	beq.n	800681e <UART_SetConfig+0x1aa>
 800680c:	e00f      	b.n	800682e <UART_SetConfig+0x1ba>
 800680e:	2300      	movs	r3, #0
 8006810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006814:	e0ad      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006816:	2302      	movs	r3, #2
 8006818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681c:	e0a9      	b.n	8006972 <UART_SetConfig+0x2fe>
 800681e:	2304      	movs	r3, #4
 8006820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006824:	e0a5      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006826:	2308      	movs	r3, #8
 8006828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682c:	e0a1      	b.n	8006972 <UART_SetConfig+0x2fe>
 800682e:	2310      	movs	r3, #16
 8006830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006834:	e09d      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a4a      	ldr	r2, [pc, #296]	; (8006964 <UART_SetConfig+0x2f0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d125      	bne.n	800688c <UART_SetConfig+0x218>
 8006840:	4b45      	ldr	r3, [pc, #276]	; (8006958 <UART_SetConfig+0x2e4>)
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800684a:	2bc0      	cmp	r3, #192	; 0xc0
 800684c:	d016      	beq.n	800687c <UART_SetConfig+0x208>
 800684e:	2bc0      	cmp	r3, #192	; 0xc0
 8006850:	d818      	bhi.n	8006884 <UART_SetConfig+0x210>
 8006852:	2b80      	cmp	r3, #128	; 0x80
 8006854:	d00a      	beq.n	800686c <UART_SetConfig+0x1f8>
 8006856:	2b80      	cmp	r3, #128	; 0x80
 8006858:	d814      	bhi.n	8006884 <UART_SetConfig+0x210>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <UART_SetConfig+0x1f0>
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d008      	beq.n	8006874 <UART_SetConfig+0x200>
 8006862:	e00f      	b.n	8006884 <UART_SetConfig+0x210>
 8006864:	2300      	movs	r3, #0
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686a:	e082      	b.n	8006972 <UART_SetConfig+0x2fe>
 800686c:	2302      	movs	r3, #2
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006872:	e07e      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006874:	2304      	movs	r3, #4
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687a:	e07a      	b.n	8006972 <UART_SetConfig+0x2fe>
 800687c:	2308      	movs	r3, #8
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006882:	e076      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006884:	2310      	movs	r3, #16
 8006886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688a:	e072      	b.n	8006972 <UART_SetConfig+0x2fe>
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a35      	ldr	r2, [pc, #212]	; (8006968 <UART_SetConfig+0x2f4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d12a      	bne.n	80068ec <UART_SetConfig+0x278>
 8006896:	4b30      	ldr	r3, [pc, #192]	; (8006958 <UART_SetConfig+0x2e4>)
 8006898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a4:	d01a      	beq.n	80068dc <UART_SetConfig+0x268>
 80068a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068aa:	d81b      	bhi.n	80068e4 <UART_SetConfig+0x270>
 80068ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b0:	d00c      	beq.n	80068cc <UART_SetConfig+0x258>
 80068b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b6:	d815      	bhi.n	80068e4 <UART_SetConfig+0x270>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <UART_SetConfig+0x250>
 80068bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c0:	d008      	beq.n	80068d4 <UART_SetConfig+0x260>
 80068c2:	e00f      	b.n	80068e4 <UART_SetConfig+0x270>
 80068c4:	2300      	movs	r3, #0
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ca:	e052      	b.n	8006972 <UART_SetConfig+0x2fe>
 80068cc:	2302      	movs	r3, #2
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068d2:	e04e      	b.n	8006972 <UART_SetConfig+0x2fe>
 80068d4:	2304      	movs	r3, #4
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068da:	e04a      	b.n	8006972 <UART_SetConfig+0x2fe>
 80068dc:	2308      	movs	r3, #8
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068e2:	e046      	b.n	8006972 <UART_SetConfig+0x2fe>
 80068e4:	2310      	movs	r3, #16
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ea:	e042      	b.n	8006972 <UART_SetConfig+0x2fe>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a17      	ldr	r2, [pc, #92]	; (8006950 <UART_SetConfig+0x2dc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d13a      	bne.n	800696c <UART_SetConfig+0x2f8>
 80068f6:	4b18      	ldr	r3, [pc, #96]	; (8006958 <UART_SetConfig+0x2e4>)
 80068f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006904:	d01a      	beq.n	800693c <UART_SetConfig+0x2c8>
 8006906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800690a:	d81b      	bhi.n	8006944 <UART_SetConfig+0x2d0>
 800690c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006910:	d00c      	beq.n	800692c <UART_SetConfig+0x2b8>
 8006912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006916:	d815      	bhi.n	8006944 <UART_SetConfig+0x2d0>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <UART_SetConfig+0x2b0>
 800691c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006920:	d008      	beq.n	8006934 <UART_SetConfig+0x2c0>
 8006922:	e00f      	b.n	8006944 <UART_SetConfig+0x2d0>
 8006924:	2300      	movs	r3, #0
 8006926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800692a:	e022      	b.n	8006972 <UART_SetConfig+0x2fe>
 800692c:	2302      	movs	r3, #2
 800692e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006932:	e01e      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006934:	2304      	movs	r3, #4
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800693a:	e01a      	b.n	8006972 <UART_SetConfig+0x2fe>
 800693c:	2308      	movs	r3, #8
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006942:	e016      	b.n	8006972 <UART_SetConfig+0x2fe>
 8006944:	2310      	movs	r3, #16
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694a:	e012      	b.n	8006972 <UART_SetConfig+0x2fe>
 800694c:	cfff69f3 	.word	0xcfff69f3
 8006950:	40008000 	.word	0x40008000
 8006954:	40013800 	.word	0x40013800
 8006958:	40021000 	.word	0x40021000
 800695c:	40004400 	.word	0x40004400
 8006960:	40004800 	.word	0x40004800
 8006964:	40004c00 	.word	0x40004c00
 8006968:	40005000 	.word	0x40005000
 800696c:	2310      	movs	r3, #16
 800696e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4aae      	ldr	r2, [pc, #696]	; (8006c30 <UART_SetConfig+0x5bc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	f040 8097 	bne.w	8006aac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800697e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006982:	2b08      	cmp	r3, #8
 8006984:	d823      	bhi.n	80069ce <UART_SetConfig+0x35a>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x318>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069cf 	.word	0x080069cf
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069cf 	.word	0x080069cf
 800699c:	080069bf 	.word	0x080069bf
 80069a0:	080069cf 	.word	0x080069cf
 80069a4:	080069cf 	.word	0x080069cf
 80069a8:	080069cf 	.word	0x080069cf
 80069ac:	080069c7 	.word	0x080069c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b0:	f7fe f846 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 80069b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069b6:	e010      	b.n	80069da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b8:	4b9e      	ldr	r3, [pc, #632]	; (8006c34 <UART_SetConfig+0x5c0>)
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069bc:	e00d      	b.n	80069da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069be:	f7fd ffa7 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069c4:	e009      	b.n	80069da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069cc:	e005      	b.n	80069da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8130 	beq.w	8006c42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	4a94      	ldr	r2, [pc, #592]	; (8006c38 <UART_SetConfig+0x5c4>)
 80069e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d305      	bcc.n	8006a12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d903      	bls.n	8006a1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a18:	e113      	b.n	8006c42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	60fa      	str	r2, [r7, #12]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	4a84      	ldr	r2, [pc, #528]	; (8006c38 <UART_SetConfig+0x5c4>)
 8006a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2200      	movs	r2, #0
 8006a30:	603b      	str	r3, [r7, #0]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a3c:	f7f9 fd60 	bl	8000500 <__aeabi_uldivmod>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4610      	mov	r0, r2
 8006a46:	4619      	mov	r1, r3
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	020b      	lsls	r3, r1, #8
 8006a52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a56:	0202      	lsls	r2, r0, #8
 8006a58:	6979      	ldr	r1, [r7, #20]
 8006a5a:	6849      	ldr	r1, [r1, #4]
 8006a5c:	0849      	lsrs	r1, r1, #1
 8006a5e:	2000      	movs	r0, #0
 8006a60:	460c      	mov	r4, r1
 8006a62:	4605      	mov	r5, r0
 8006a64:	eb12 0804 	adds.w	r8, r2, r4
 8006a68:	eb43 0905 	adc.w	r9, r3, r5
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	469a      	mov	sl, r3
 8006a74:	4693      	mov	fp, r2
 8006a76:	4652      	mov	r2, sl
 8006a78:	465b      	mov	r3, fp
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	f7f9 fd3f 	bl	8000500 <__aeabi_uldivmod>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4613      	mov	r3, r2
 8006a88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a90:	d308      	bcc.n	8006aa4 <UART_SetConfig+0x430>
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a98:	d204      	bcs.n	8006aa4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a3a      	ldr	r2, [r7, #32]
 8006aa0:	60da      	str	r2, [r3, #12]
 8006aa2:	e0ce      	b.n	8006c42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006aaa:	e0ca      	b.n	8006c42 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab4:	d166      	bne.n	8006b84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d827      	bhi.n	8006b0e <UART_SetConfig+0x49a>
 8006abe:	a201      	add	r2, pc, #4	; (adr r2, 8006ac4 <UART_SetConfig+0x450>)
 8006ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006b0f 	.word	0x08006b0f
 8006ad4:	08006aff 	.word	0x08006aff
 8006ad8:	08006b0f 	.word	0x08006b0f
 8006adc:	08006b0f 	.word	0x08006b0f
 8006ae0:	08006b0f 	.word	0x08006b0f
 8006ae4:	08006b07 	.word	0x08006b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7fd ffaa 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8006aec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006aee:	e014      	b.n	8006b1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af0:	f7fd ffbc 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 8006af4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006af6:	e010      	b.n	8006b1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af8:	4b4e      	ldr	r3, [pc, #312]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006afc:	e00d      	b.n	8006b1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006afe:	f7fd ff07 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 8006b02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b04:	e009      	b.n	8006b1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b0c:	e005      	b.n	8006b1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8090 	beq.w	8006c42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	4a44      	ldr	r2, [pc, #272]	; (8006c38 <UART_SetConfig+0x5c4>)
 8006b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b34:	005a      	lsls	r2, r3, #1
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	441a      	add	r2, r3
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b46:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	2b0f      	cmp	r3, #15
 8006b4c:	d916      	bls.n	8006b7c <UART_SetConfig+0x508>
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b54:	d212      	bcs.n	8006b7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f023 030f 	bic.w	r3, r3, #15
 8006b5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	8bfb      	ldrh	r3, [r7, #30]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	8bfa      	ldrh	r2, [r7, #30]
 8006b78:	60da      	str	r2, [r3, #12]
 8006b7a:	e062      	b.n	8006c42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b82:	e05e      	b.n	8006c42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d828      	bhi.n	8006bde <UART_SetConfig+0x56a>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x520>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bc1 	.word	0x08006bc1
 8006b9c:	08006bc9 	.word	0x08006bc9
 8006ba0:	08006bdf 	.word	0x08006bdf
 8006ba4:	08006bcf 	.word	0x08006bcf
 8006ba8:	08006bdf 	.word	0x08006bdf
 8006bac:	08006bdf 	.word	0x08006bdf
 8006bb0:	08006bdf 	.word	0x08006bdf
 8006bb4:	08006bd7 	.word	0x08006bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb8:	f7fd ff42 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8006bbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bbe:	e014      	b.n	8006bea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc0:	f7fd ff54 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 8006bc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bc6:	e010      	b.n	8006bea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc8:	4b1a      	ldr	r3, [pc, #104]	; (8006c34 <UART_SetConfig+0x5c0>)
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bcc:	e00d      	b.n	8006bea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bce:	f7fd fe9f 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 8006bd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bd4:	e009      	b.n	8006bea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bdc:	e005      	b.n	8006bea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006be8:	bf00      	nop
    }

    if (pclk != 0U)
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d028      	beq.n	8006c42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	4a10      	ldr	r2, [pc, #64]	; (8006c38 <UART_SetConfig+0x5c4>)
 8006bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	085b      	lsrs	r3, r3, #1
 8006c08:	441a      	add	r2, r3
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c12:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	2b0f      	cmp	r3, #15
 8006c18:	d910      	bls.n	8006c3c <UART_SetConfig+0x5c8>
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c20:	d20c      	bcs.n	8006c3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60da      	str	r2, [r3, #12]
 8006c2c:	e009      	b.n	8006c42 <UART_SetConfig+0x5ce>
 8006c2e:	bf00      	nop
 8006c30:	40008000 	.word	0x40008000
 8006c34:	00f42400 	.word	0x00f42400
 8006c38:	080127d0 	.word	0x080127d0
      }
      else
      {
        ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2200      	movs	r2, #0
 8006c56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006c5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3730      	adds	r7, #48	; 0x30
 8006c66:	46bd      	mov	sp, r7
 8006c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01a      	beq.n	8006d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6a:	d10a      	bne.n	8006d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	605a      	str	r2, [r3, #4]
  }
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b098      	sub	sp, #96	; 0x60
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dc0:	f7fa ff3a 	bl	8001c38 <HAL_GetTick>
 8006dc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d12f      	bne.n	8006e34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f88e 	bl	8006f04 <UART_WaitOnFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d022      	beq.n	8006e34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e02:	653b      	str	r3, [r7, #80]	; 0x50
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e6      	bne.n	8006dee <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e063      	b.n	8006efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d149      	bne.n	8006ed6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f857 	bl	8006f04 <UART_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d03c      	beq.n	8006ed6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	623b      	str	r3, [r7, #32]
   return(result);
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e6      	bne.n	8006e5c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eae:	61fa      	str	r2, [r7, #28]
 8006eb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	69b9      	ldr	r1, [r7, #24]
 8006eb4:	69fa      	ldr	r2, [r7, #28]
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	617b      	str	r3, [r7, #20]
   return(result);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e5      	bne.n	8006e8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e012      	b.n	8006efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3758      	adds	r7, #88	; 0x58
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f14:	e04f      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1c:	d04b      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1e:	f7fa fe8b 	bl	8001c38 <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d302      	bcc.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e04e      	b.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d037      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b80      	cmp	r3, #128	; 0x80
 8006f4a:	d034      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d031      	beq.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d110      	bne.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2208      	movs	r2, #8
 8006f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f920 	bl	80071ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2208      	movs	r2, #8
 8006f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e029      	b.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f90:	d111      	bne.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f906 	bl	80071ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e00f      	b.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	79fb      	ldrb	r3, [r7, #7]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d0a0      	beq.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b096      	sub	sp, #88	; 0x58
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2222      	movs	r2, #34	; 0x22
 8007008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007012:	2b00      	cmp	r3, #0
 8007014:	d02d      	beq.n	8007072 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800701c:	4a40      	ldr	r2, [pc, #256]	; (8007120 <UART_Start_Receive_DMA+0x140>)
 800701e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007026:	4a3f      	ldr	r2, [pc, #252]	; (8007124 <UART_Start_Receive_DMA+0x144>)
 8007028:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007030:	4a3d      	ldr	r2, [pc, #244]	; (8007128 <UART_Start_Receive_DMA+0x148>)
 8007032:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800703a:	2200      	movs	r2, #0
 800703c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3324      	adds	r3, #36	; 0x24
 800704a:	4619      	mov	r1, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007050:	461a      	mov	r2, r3
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	f7fa ffaa 	bl	8001fac <HAL_DMA_Start_IT>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2210      	movs	r2, #16
 8007062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e051      	b.n	8007116 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d018      	beq.n	80070ac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708e:	657b      	str	r3, [r7, #84]	; 0x54
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007098:	64bb      	str	r3, [r7, #72]	; 0x48
 800709a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800709e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e6      	bne.n	800707a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3308      	adds	r3, #8
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	653b      	str	r3, [r7, #80]	; 0x50
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3308      	adds	r3, #8
 80070ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070cc:	637a      	str	r2, [r7, #52]	; 0x34
 80070ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e5      	bne.n	80070ac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	613b      	str	r3, [r7, #16]
   return(result);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007100:	623a      	str	r2, [r7, #32]
 8007102:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	69f9      	ldr	r1, [r7, #28]
 8007106:	6a3a      	ldr	r2, [r7, #32]
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	61bb      	str	r3, [r7, #24]
   return(result);
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e5      	bne.n	80070e0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3758      	adds	r7, #88	; 0x58
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	08007331 	.word	0x08007331
 8007124:	0800745d 	.word	0x0800745d
 8007128:	0800749b 	.word	0x0800749b

0800712c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b08f      	sub	sp, #60	; 0x3c
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	61fb      	str	r3, [r7, #28]
   return(result);
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007154:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e6      	bne.n	8007134 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3308      	adds	r3, #8
 800716c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	60bb      	str	r3, [r7, #8]
   return(result);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800717c:	633b      	str	r3, [r7, #48]	; 0x30
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3308      	adds	r3, #8
 8007184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007186:	61ba      	str	r2, [r7, #24]
 8007188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6979      	ldr	r1, [r7, #20]
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	613b      	str	r3, [r7, #16]
   return(result);
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e5      	bne.n	8007166 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80071a2:	bf00      	nop
 80071a4:	373c      	adds	r7, #60	; 0x3c
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b095      	sub	sp, #84	; 0x54
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	e853 3f00 	ldrex	r3, [r3]
 80071c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	461a      	mov	r2, r3
 80071d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d4:	643b      	str	r3, [r7, #64]	; 0x40
 80071d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e6      	bne.n	80071b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3308      	adds	r3, #8
 80071ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071fe:	f023 0301 	bic.w	r3, r3, #1
 8007202:	64bb      	str	r3, [r7, #72]	; 0x48
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800720e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e3      	bne.n	80071e8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d118      	bne.n	800725a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	60bb      	str	r3, [r7, #8]
   return(result);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f023 0310 	bic.w	r3, r3, #16
 800723c:	647b      	str	r3, [r7, #68]	; 0x44
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007246:	61bb      	str	r3, [r7, #24]
 8007248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	6979      	ldr	r1, [r7, #20]
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	613b      	str	r3, [r7, #16]
   return(result);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e6      	bne.n	8007228 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800726e:	bf00      	nop
 8007270:	3754      	adds	r7, #84	; 0x54
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b090      	sub	sp, #64	; 0x40
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d137      	bne.n	8007306 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007298:	2200      	movs	r2, #0
 800729a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800729e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3308      	adds	r3, #8
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	623b      	str	r3, [r7, #32]
   return(result);
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80072b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072be:	633a      	str	r2, [r7, #48]	; 0x30
 80072c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e5      	bne.n	800729e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e6:	637b      	str	r3, [r7, #52]	; 0x34
 80072e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f0:	61fb      	str	r3, [r7, #28]
 80072f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	69b9      	ldr	r1, [r7, #24]
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	617b      	str	r3, [r7, #20]
   return(result);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e6      	bne.n	80072d2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007304:	e002      	b.n	800730c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007308:	f008 ff44 	bl	8010194 <HAL_UART_TxCpltCallback>
}
 800730c:	bf00      	nop
 800730e:	3740      	adds	r7, #64	; 0x40
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f7ff f97c 	bl	8006620 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b09c      	sub	sp, #112	; 0x70
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d171      	bne.n	8007430 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800734c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734e:	2200      	movs	r2, #0
 8007350:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007368:	66bb      	str	r3, [r7, #104]	; 0x68
 800736a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007372:	65bb      	str	r3, [r7, #88]	; 0x58
 8007374:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e6      	bne.n	8007354 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	667b      	str	r3, [r7, #100]	; 0x64
 800739e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3308      	adds	r3, #8
 80073a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80073a6:	647a      	str	r2, [r7, #68]	; 0x44
 80073a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e5      	bne.n	8007386 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	623b      	str	r3, [r7, #32]
   return(result);
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d0:	663b      	str	r3, [r7, #96]	; 0x60
 80073d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3308      	adds	r3, #8
 80073d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073da:	633a      	str	r2, [r7, #48]	; 0x30
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e5      	bne.n	80073ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d118      	bne.n	8007430 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	60fb      	str	r3, [r7, #12]
   return(result);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0310 	bic.w	r3, r3, #16
 8007412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	69b9      	ldr	r1, [r7, #24]
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	e841 2300 	strex	r3, r2, [r1]
 8007428:	617b      	str	r3, [r7, #20]
   return(result);
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1e6      	bne.n	80073fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007432:	2200      	movs	r2, #0
 8007434:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800743a:	2b01      	cmp	r3, #1
 800743c:	d107      	bne.n	800744e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800743e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007440:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007444:	4619      	mov	r1, r3
 8007446:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007448:	f7ff f908 	bl	800665c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800744c:	e002      	b.n	8007454 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800744e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007450:	f7ff f8f0 	bl	8006634 <HAL_UART_RxCpltCallback>
}
 8007454:	bf00      	nop
 8007456:	3770      	adds	r7, #112	; 0x70
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007474:	2b01      	cmp	r3, #1
 8007476:	d109      	bne.n	800748c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	b29b      	uxth	r3, r3
 8007482:	4619      	mov	r1, r3
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f7ff f8e9 	bl	800665c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800748a:	e002      	b.n	8007492 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff f8db 	bl	8006648 <HAL_UART_RxHalfCpltCallback>
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b086      	sub	sp, #24
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c2:	2b80      	cmp	r3, #128	; 0x80
 80074c4:	d109      	bne.n	80074da <UART_DMAError+0x40>
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b21      	cmp	r3, #33	; 0x21
 80074ca:	d106      	bne.n	80074da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80074d4:	6978      	ldr	r0, [r7, #20]
 80074d6:	f7ff fe29 	bl	800712c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e4:	2b40      	cmp	r3, #64	; 0x40
 80074e6:	d109      	bne.n	80074fc <UART_DMAError+0x62>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b22      	cmp	r3, #34	; 0x22
 80074ec:	d106      	bne.n	80074fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80074f6:	6978      	ldr	r0, [r7, #20]
 80074f8:	f7ff fe59 	bl	80071ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007502:	f043 0210 	orr.w	r2, r3, #16
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800750c:	6978      	ldr	r0, [r7, #20]
 800750e:	f008 fe6b 	bl	80101e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007512:	bf00      	nop
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f008 fe55 	bl	80101e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800753e:	bf00      	nop
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b088      	sub	sp, #32
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	60bb      	str	r3, [r7, #8]
   return(result);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6979      	ldr	r1, [r7, #20]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	613b      	str	r3, [r7, #16]
   return(result);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f008 fe00 	bl	8010194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007594:	bf00      	nop
 8007596:	3720      	adds	r7, #32
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_UARTEx_DisableFifoMode+0x16>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e027      	b.n	800763e <HAL_UARTEx_DisableFifoMode+0x66>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2224      	movs	r2, #36	; 0x24
 80075fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800761c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800765e:	2302      	movs	r3, #2
 8007660:	e02d      	b.n	80076be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2224      	movs	r2, #36	; 0x24
 800766e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0201 	bic.w	r2, r2, #1
 8007688:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f850 	bl	8007744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076da:	2302      	movs	r3, #2
 80076dc:	e02d      	b.n	800773a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2224      	movs	r2, #36	; 0x24
 80076ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 0201 	bic.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f812 	bl	8007744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007750:	2b00      	cmp	r3, #0
 8007752:	d108      	bne.n	8007766 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007764:	e031      	b.n	80077ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007766:	2308      	movs	r3, #8
 8007768:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800776a:	2308      	movs	r3, #8
 800776c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	0e5b      	lsrs	r3, r3, #25
 8007776:	b2db      	uxtb	r3, r3
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	0f5b      	lsrs	r3, r3, #29
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	7b3a      	ldrb	r2, [r7, #12]
 8007792:	4911      	ldr	r1, [pc, #68]	; (80077d8 <UARTEx_SetNbDataToProcess+0x94>)
 8007794:	5c8a      	ldrb	r2, [r1, r2]
 8007796:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800779a:	7b3a      	ldrb	r2, [r7, #12]
 800779c:	490f      	ldr	r1, [pc, #60]	; (80077dc <UARTEx_SetNbDataToProcess+0x98>)
 800779e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	7b7a      	ldrb	r2, [r7, #13]
 80077b0:	4909      	ldr	r1, [pc, #36]	; (80077d8 <UARTEx_SetNbDataToProcess+0x94>)
 80077b2:	5c8a      	ldrb	r2, [r1, r2]
 80077b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077b8:	7b7a      	ldrb	r2, [r7, #13]
 80077ba:	4908      	ldr	r1, [pc, #32]	; (80077dc <UARTEx_SetNbDataToProcess+0x98>)
 80077bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077be:	fb93 f3f2 	sdiv	r3, r3, r2
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077ca:	bf00      	nop
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	080127e8 	.word	0x080127e8
 80077dc:	080127f0 	.word	0x080127f0

080077e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077e0:	b084      	sub	sp, #16
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	f107 001c 	add.w	r0, r7, #28
 80077ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fa26 	bl	8008c50 <USB_CoreReset>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007808:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
 800781c:	e005      	b.n	800782a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007836:	b004      	add	sp, #16
 8007838:	4770      	bx	lr
	...

0800783c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d165      	bne.n	800791c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4a3e      	ldr	r2, [pc, #248]	; (800794c <USB_SetTurnaroundTime+0x110>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d906      	bls.n	8007866 <USB_SetTurnaroundTime+0x2a>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4a3d      	ldr	r2, [pc, #244]	; (8007950 <USB_SetTurnaroundTime+0x114>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d202      	bcs.n	8007866 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007860:	230f      	movs	r3, #15
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	e05c      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	4a39      	ldr	r2, [pc, #228]	; (8007950 <USB_SetTurnaroundTime+0x114>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d306      	bcc.n	800787c <USB_SetTurnaroundTime+0x40>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4a38      	ldr	r2, [pc, #224]	; (8007954 <USB_SetTurnaroundTime+0x118>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d202      	bcs.n	800787c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007876:	230e      	movs	r3, #14
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	e051      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4a35      	ldr	r2, [pc, #212]	; (8007954 <USB_SetTurnaroundTime+0x118>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d306      	bcc.n	8007892 <USB_SetTurnaroundTime+0x56>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4a34      	ldr	r2, [pc, #208]	; (8007958 <USB_SetTurnaroundTime+0x11c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d202      	bcs.n	8007892 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800788c:	230d      	movs	r3, #13
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	e046      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	4a30      	ldr	r2, [pc, #192]	; (8007958 <USB_SetTurnaroundTime+0x11c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d306      	bcc.n	80078a8 <USB_SetTurnaroundTime+0x6c>
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	4a2f      	ldr	r2, [pc, #188]	; (800795c <USB_SetTurnaroundTime+0x120>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d802      	bhi.n	80078a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80078a2:	230c      	movs	r3, #12
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	e03b      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	4a2c      	ldr	r2, [pc, #176]	; (800795c <USB_SetTurnaroundTime+0x120>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d906      	bls.n	80078be <USB_SetTurnaroundTime+0x82>
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	4a2b      	ldr	r2, [pc, #172]	; (8007960 <USB_SetTurnaroundTime+0x124>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d802      	bhi.n	80078be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80078b8:	230b      	movs	r3, #11
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	e030      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	4a27      	ldr	r2, [pc, #156]	; (8007960 <USB_SetTurnaroundTime+0x124>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d906      	bls.n	80078d4 <USB_SetTurnaroundTime+0x98>
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4a26      	ldr	r2, [pc, #152]	; (8007964 <USB_SetTurnaroundTime+0x128>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d802      	bhi.n	80078d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80078ce:	230a      	movs	r3, #10
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	e025      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	4a23      	ldr	r2, [pc, #140]	; (8007964 <USB_SetTurnaroundTime+0x128>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d906      	bls.n	80078ea <USB_SetTurnaroundTime+0xae>
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4a22      	ldr	r2, [pc, #136]	; (8007968 <USB_SetTurnaroundTime+0x12c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d202      	bcs.n	80078ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80078e4:	2309      	movs	r3, #9
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e01a      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <USB_SetTurnaroundTime+0x12c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d306      	bcc.n	8007900 <USB_SetTurnaroundTime+0xc4>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	4a1d      	ldr	r2, [pc, #116]	; (800796c <USB_SetTurnaroundTime+0x130>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d802      	bhi.n	8007900 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80078fa:	2308      	movs	r3, #8
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	e00f      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4a1a      	ldr	r2, [pc, #104]	; (800796c <USB_SetTurnaroundTime+0x130>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d906      	bls.n	8007916 <USB_SetTurnaroundTime+0xda>
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4a19      	ldr	r2, [pc, #100]	; (8007970 <USB_SetTurnaroundTime+0x134>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d202      	bcs.n	8007916 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007910:	2307      	movs	r3, #7
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	e004      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007916:	2306      	movs	r3, #6
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	e001      	b.n	8007920 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800791c:	2309      	movs	r3, #9
 800791e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	029b      	lsls	r3, r3, #10
 8007934:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007938:	431a      	orrs	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	371c      	adds	r7, #28
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	00d8acbf 	.word	0x00d8acbf
 8007950:	00e4e1c0 	.word	0x00e4e1c0
 8007954:	00f42400 	.word	0x00f42400
 8007958:	01067380 	.word	0x01067380
 800795c:	011a499f 	.word	0x011a499f
 8007960:	01312cff 	.word	0x01312cff
 8007964:	014ca43f 	.word	0x014ca43f
 8007968:	016e3600 	.word	0x016e3600
 800796c:	01a6ab1f 	.word	0x01a6ab1f
 8007970:	01e84800 	.word	0x01e84800

08007974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f043 0201 	orr.w	r2, r3, #1
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f023 0201 	bic.w	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d115      	bne.n	8007a06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079e6:	200a      	movs	r0, #10
 80079e8:	f7fa f932 	bl	8001c50 <HAL_Delay>
      ms += 10U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	330a      	adds	r3, #10
 80079f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f8b3 	bl	8008b5e <USB_GetMode>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d01e      	beq.n	8007a3c <USB_SetCurrentMode+0x84>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2bc7      	cmp	r3, #199	; 0xc7
 8007a02:	d9f0      	bls.n	80079e6 <USB_SetCurrentMode+0x2e>
 8007a04:	e01a      	b.n	8007a3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a06:	78fb      	ldrb	r3, [r7, #3]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d115      	bne.n	8007a38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a18:	200a      	movs	r0, #10
 8007a1a:	f7fa f919 	bl	8001c50 <HAL_Delay>
      ms += 10U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	330a      	adds	r3, #10
 8007a22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 f89a 	bl	8008b5e <USB_GetMode>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <USB_SetCurrentMode+0x84>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2bc7      	cmp	r3, #199	; 0xc7
 8007a34:	d9f0      	bls.n	8007a18 <USB_SetCurrentMode+0x60>
 8007a36:	e001      	b.n	8007a3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e005      	b.n	8007a48 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2bc8      	cmp	r3, #200	; 0xc8
 8007a40:	d101      	bne.n	8007a46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a50:	b084      	sub	sp, #16
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b086      	sub	sp, #24
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	613b      	str	r3, [r7, #16]
 8007a6e:	e009      	b.n	8007a84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	3340      	adds	r3, #64	; 0x40
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	3301      	adds	r3, #1
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2b0e      	cmp	r3, #14
 8007a88:	d9f2      	bls.n	8007a70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d11c      	bne.n	8007acc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aa0:	f043 0302 	orr.w	r3, r3, #2
 8007aa4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	e005      	b.n	8007ad8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ade:	461a      	mov	r2, r3
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ae4:	2103      	movs	r1, #3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f95a 	bl	8007da0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007aec:	2110      	movs	r1, #16
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f8f6 	bl	8007ce0 <USB_FlushTxFifo>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f920 	bl	8007d44 <USB_FlushRxFifo>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b14:	461a      	mov	r2, r3
 8007b16:	2300      	movs	r3, #0
 8007b18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b20:	461a      	mov	r2, r3
 8007b22:	2300      	movs	r3, #0
 8007b24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	e043      	b.n	8007bc0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b4e:	d118      	bne.n	8007b82 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b62:	461a      	mov	r2, r3
 8007b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	e013      	b.n	8007b94 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	e008      	b.n	8007b94 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8e:	461a      	mov	r2, r3
 8007b90:	2300      	movs	r3, #0
 8007b92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d3b5      	bcc.n	8007b38 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	e043      	b.n	8007c5a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007be8:	d118      	bne.n	8007c1c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10a      	bne.n	8007c06 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	e013      	b.n	8007c2e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	461a      	mov	r2, r3
 8007c14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e008      	b.n	8007c2e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	461a      	mov	r2, r3
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	3301      	adds	r3, #1
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c5e:	461a      	mov	r2, r3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d3b5      	bcc.n	8007bd2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f043 0210 	orr.w	r2, r3, #16
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699a      	ldr	r2, [r3, #24]
 8007c98:	4b10      	ldr	r3, [pc, #64]	; (8007cdc <USB_DevInit+0x28c>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ca0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	f043 0208 	orr.w	r2, r3, #8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d107      	bne.n	8007ccc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cc4:	f043 0304 	orr.w	r3, r3, #4
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cd8:	b004      	add	sp, #16
 8007cda:	4770      	bx	lr
 8007cdc:	803c3800 	.word	0x803c3800

08007ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007cfa:	d901      	bls.n	8007d00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e01b      	b.n	8007d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	daf2      	bge.n	8007cee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	019b      	lsls	r3, r3, #6
 8007d10:	f043 0220 	orr.w	r2, r3, #32
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007d24:	d901      	bls.n	8007d2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e006      	b.n	8007d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d0f0      	beq.n	8007d18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3301      	adds	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007d5c:	d901      	bls.n	8007d62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e018      	b.n	8007d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	daf2      	bge.n	8007d50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2210      	movs	r2, #16
 8007d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007d80:	d901      	bls.n	8007d86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e006      	b.n	8007d94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d0f0      	beq.n	8007d74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b087      	sub	sp, #28
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 0306 	and.w	r3, r3, #6
 8007dea:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d002      	beq.n	8007df8 <USB_GetDevSpeed+0x26>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b06      	cmp	r3, #6
 8007df6:	d102      	bne.n	8007dfe <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	75fb      	strb	r3, [r7, #23]
 8007dfc:	e001      	b.n	8007e02 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8007dfe:	230f      	movs	r3, #15
 8007e00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	785b      	ldrb	r3, [r3, #1]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d13a      	bne.n	8007ea2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	68f9      	ldr	r1, [r7, #12]
 8007e46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d155      	bne.n	8007f10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	791b      	ldrb	r3, [r3, #4]
 8007e7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	059b      	lsls	r3, r3, #22
 8007e86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	e036      	b.n	8007f10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea8:	69da      	ldr	r2, [r3, #28]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb8:	041b      	lsls	r3, r3, #16
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d11a      	bne.n	8007f10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	791b      	ldrb	r3, [r3, #4]
 8007ef4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
	...

08007f20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d161      	bne.n	8008000 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f52:	d11f      	bne.n	8007f94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	0151      	lsls	r1, r2, #5
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	440a      	add	r2, r1
 8007f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 030f 	and.w	r3, r3, #15
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	43db      	mvns	r3, r3
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 030f 	and.w	r3, r3, #15
 8007fc8:	2101      	movs	r1, #1
 8007fca:	fa01 f303 	lsl.w	r3, r1, r3
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	68f9      	ldr	r1, [r7, #12]
 8007fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fd8:	4013      	ands	r3, r2
 8007fda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	0159      	lsls	r1, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	440b      	add	r3, r1
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4b35      	ldr	r3, [pc, #212]	; (80080d0 <USB_DeactivateEndpoint+0x1b0>)
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	600b      	str	r3, [r1, #0]
 8007ffe:	e060      	b.n	80080c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008016:	d11f      	bne.n	8008058 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008032:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008036:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008056:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	2101      	movs	r1, #1
 800806a:	fa01 f303 	lsl.w	r3, r1, r3
 800806e:	041b      	lsls	r3, r3, #16
 8008070:	43db      	mvns	r3, r3
 8008072:	68f9      	ldr	r1, [r7, #12]
 8008074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008078:	4013      	ands	r3, r2
 800807a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008082:	69da      	ldr	r2, [r3, #28]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	2101      	movs	r1, #1
 800808e:	fa01 f303 	lsl.w	r3, r1, r3
 8008092:	041b      	lsls	r3, r3, #16
 8008094:	43db      	mvns	r3, r3
 8008096:	68f9      	ldr	r1, [r7, #12]
 8008098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800809c:	4013      	ands	r3, r2
 800809e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	0159      	lsls	r1, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	440b      	add	r3, r1
 80080b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ba:	4619      	mov	r1, r3
 80080bc:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <USB_DeactivateEndpoint+0x1b4>)
 80080be:	4013      	ands	r3, r2
 80080c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	ec337800 	.word	0xec337800
 80080d4:	eff37800 	.word	0xeff37800

080080d8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	785b      	ldrb	r3, [r3, #1]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	f040 812e 	bne.w	8008352 <USB_EPStartXfer+0x27a>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d132      	bne.n	8008164 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	4413      	add	r3, r2
 8008106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	0151      	lsls	r1, r2, #5
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	440a      	add	r2, r1
 8008114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008118:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800811c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008120:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	0151      	lsls	r1, r2, #5
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	440a      	add	r2, r1
 8008138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800813c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008140:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	4413      	add	r3, r2
 800814a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	0151      	lsls	r1, r2, #5
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	440a      	add	r2, r1
 8008158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815c:	0cdb      	lsrs	r3, r3, #19
 800815e:	04db      	lsls	r3, r3, #19
 8008160:	6113      	str	r3, [r2, #16]
 8008162:	e098      	b.n	8008296 <USB_EPStartXfer+0x1be>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	0151      	lsls	r1, r2, #5
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	440a      	add	r2, r1
 800817a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800817e:	0cdb      	lsrs	r3, r3, #19
 8008180:	04db      	lsls	r3, r3, #19
 8008182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	0151      	lsls	r1, r2, #5
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	440a      	add	r2, r1
 800819a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800819e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081a6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d11a      	bne.n	80081e4 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d903      	bls.n	80081c2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	0151      	lsls	r1, r2, #5
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	440a      	add	r2, r1
 80081d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081e0:	6113      	str	r3, [r2, #16]
 80081e2:	e045      	b.n	8008270 <USB_EPStartXfer+0x198>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	1e5a      	subs	r2, r3, #1
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f8:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008206:	691a      	ldr	r2, [r3, #16]
 8008208:	89fb      	ldrh	r3, [r7, #14]
 800820a:	04db      	lsls	r3, r3, #19
 800820c:	4619      	mov	r1, r3
 800820e:	4b8f      	ldr	r3, [pc, #572]	; (800844c <USB_EPStartXfer+0x374>)
 8008210:	400b      	ands	r3, r1
 8008212:	6939      	ldr	r1, [r7, #16]
 8008214:	0148      	lsls	r0, r1, #5
 8008216:	6979      	ldr	r1, [r7, #20]
 8008218:	4401      	add	r1, r0
 800821a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800821e:	4313      	orrs	r3, r2
 8008220:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	791b      	ldrb	r3, [r3, #4]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d122      	bne.n	8008270 <USB_EPStartXfer+0x198>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	0151      	lsls	r1, r2, #5
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	440a      	add	r2, r1
 8008240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008244:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008248:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	89fb      	ldrh	r3, [r7, #14]
 800825a:	075b      	lsls	r3, r3, #29
 800825c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8008260:	6939      	ldr	r1, [r7, #16]
 8008262:	0148      	lsls	r0, r1, #5
 8008264:	6979      	ldr	r1, [r7, #20]
 8008266:	4401      	add	r1, r0
 8008268:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800826c:	4313      	orrs	r3, r2
 800826e:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008286:	6939      	ldr	r1, [r7, #16]
 8008288:	0148      	lsls	r0, r1, #5
 800828a:	6979      	ldr	r1, [r7, #20]
 800828c:	4401      	add	r1, r0
 800828e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008292:	4313      	orrs	r3, r2
 8008294:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	0151      	lsls	r1, r2, #5
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	440a      	add	r2, r1
 80082ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082b4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	791b      	ldrb	r3, [r3, #4]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d015      	beq.n	80082ea <USB_EPStartXfer+0x212>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8139 	beq.w	800853a <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	f003 030f 	and.w	r3, r3, #15
 80082d8:	2101      	movs	r1, #1
 80082da:	fa01 f303 	lsl.w	r3, r1, r3
 80082de:	6979      	ldr	r1, [r7, #20]
 80082e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082e4:	4313      	orrs	r3, r2
 80082e6:	634b      	str	r3, [r1, #52]	; 0x34
 80082e8:	e127      	b.n	800853a <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d110      	bne.n	800831c <USB_EPStartXfer+0x244>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	0151      	lsls	r1, r2, #5
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	440a      	add	r2, r1
 8008310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	e00f      	b.n	800833c <USB_EPStartXfer+0x264>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	0151      	lsls	r1, r2, #5
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	440a      	add	r2, r1
 8008332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800833a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	68d9      	ldr	r1, [r3, #12]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781a      	ldrb	r2, [r3, #0]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	b29b      	uxth	r3, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f9a6 	bl	800869c <USB_WritePacket>
 8008350:	e0f3      	b.n	800853a <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	440a      	add	r2, r1
 8008368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800836c:	0cdb      	lsrs	r3, r3, #19
 800836e:	04db      	lsls	r3, r3, #19
 8008370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	440a      	add	r2, r1
 8008388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800838c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008394:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d12f      	bne.n	80083fc <USB_EPStartXfer+0x324>
    {
      if (ep->xfer_len > 0U)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <USB_EPStartXfer+0x2d4>
      {
        ep->xfer_len = ep->maxpacket;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083ca:	6939      	ldr	r1, [r7, #16]
 80083cc:	0148      	lsls	r0, r1, #5
 80083ce:	6979      	ldr	r1, [r7, #20]
 80083d0:	4401      	add	r1, r0
 80083d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80083d6:	4313      	orrs	r3, r2
 80083d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	0151      	lsls	r1, r2, #5
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	440a      	add	r2, r1
 80083f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083f8:	6113      	str	r3, [r2, #16]
 80083fa:	e061      	b.n	80084c0 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d125      	bne.n	8008450 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	015a      	lsls	r2, r3, #5
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	4413      	add	r3, r2
 800840c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800841a:	6939      	ldr	r1, [r7, #16]
 800841c:	0148      	lsls	r0, r1, #5
 800841e:	6979      	ldr	r1, [r7, #20]
 8008420:	4401      	add	r1, r0
 8008422:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008426:	4313      	orrs	r3, r2
 8008428:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	015a      	lsls	r2, r3, #5
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	4413      	add	r3, r2
 8008432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	0151      	lsls	r1, r2, #5
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	440a      	add	r2, r1
 8008440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008448:	6113      	str	r3, [r2, #16]
 800844a:	e039      	b.n	80084c0 <USB_EPStartXfer+0x3e8>
 800844c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	691a      	ldr	r2, [r3, #16]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	4413      	add	r3, r2
 800845a:	1e5a      	subs	r2, r3, #1
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	fbb2 f3f3 	udiv	r3, r2, r3
 8008464:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	89fa      	ldrh	r2, [r7, #14]
 800846c:	fb03 f202 	mul.w	r2, r3, r2
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	89fb      	ldrh	r3, [r7, #14]
 8008484:	04d9      	lsls	r1, r3, #19
 8008486:	4b2f      	ldr	r3, [pc, #188]	; (8008544 <USB_EPStartXfer+0x46c>)
 8008488:	400b      	ands	r3, r1
 800848a:	6939      	ldr	r1, [r7, #16]
 800848c:	0148      	lsls	r0, r1, #5
 800848e:	6979      	ldr	r1, [r7, #20]
 8008490:	4401      	add	r1, r0
 8008492:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008496:	4313      	orrs	r3, r2
 8008498:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b0:	6939      	ldr	r1, [r7, #16]
 80084b2:	0148      	lsls	r0, r1, #5
 80084b4:	6979      	ldr	r1, [r7, #20]
 80084b6:	4401      	add	r1, r0
 80084b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084bc:	4313      	orrs	r3, r2
 80084be:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	791b      	ldrb	r3, [r3, #4]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d128      	bne.n	800851a <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d110      	bne.n	80084fa <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	e00f      	b.n	800851a <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	0151      	lsls	r1, r2, #5
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	440a      	add	r2, r1
 8008510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008518:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	0151      	lsls	r1, r2, #5
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	440a      	add	r2, r1
 8008530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008534:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008538:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	1ff80000 	.word	0x1ff80000

08008548 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d14a      	bne.n	80085fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800857a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800857e:	f040 8086 	bne.w	800868e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	440a      	add	r2, r1
 800859c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	7812      	ldrb	r2, [r2, #0]
 80085ba:	0151      	lsls	r1, r2, #5
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	440a      	add	r2, r1
 80085c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3301      	adds	r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d902      	bls.n	80085e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	75fb      	strb	r3, [r7, #23]
          break;
 80085de:	e056      	b.n	800868e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085f8:	d0e7      	beq.n	80085ca <USB_EPStopXfer+0x82>
 80085fa:	e048      	b.n	800868e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008614:	d13b      	bne.n	800868e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	7812      	ldrb	r2, [r2, #0]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	440a      	add	r2, r1
 8008630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008634:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008638:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	7812      	ldrb	r2, [r2, #0]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	440a      	add	r2, r1
 8008654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800865c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3301      	adds	r3, #1
 8008662:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f242 7210 	movw	r2, #10000	; 0x2710
 800866a:	4293      	cmp	r3, r2
 800866c:	d902      	bls.n	8008674 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	75fb      	strb	r3, [r7, #23]
          break;
 8008672:	e00c      	b.n	800868e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800868c:	d0e7      	beq.n	800865e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008690:	4618      	mov	r0, r3
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800869c:	b480      	push	{r7}
 800869e:	b089      	sub	sp, #36	; 0x24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4611      	mov	r1, r2
 80086a8:	461a      	mov	r2, r3
 80086aa:	460b      	mov	r3, r1
 80086ac:	71fb      	strb	r3, [r7, #7]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80086ba:	88bb      	ldrh	r3, [r7, #4]
 80086bc:	3303      	adds	r3, #3
 80086be:	089b      	lsrs	r3, r3, #2
 80086c0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80086c2:	2300      	movs	r3, #0
 80086c4:	61bb      	str	r3, [r7, #24]
 80086c6:	e018      	b.n	80086fa <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	031a      	lsls	r2, r3, #12
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d4:	461a      	mov	r2, r3
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6013      	str	r3, [r2, #0]
    pSrc++;
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	3301      	adds	r3, #1
 80086e0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	3301      	adds	r3, #1
 80086e6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	3301      	adds	r3, #1
 80086ec:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	3301      	adds	r3, #1
 80086f2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	3301      	adds	r3, #1
 80086f8:	61bb      	str	r3, [r7, #24]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d3e2      	bcc.n	80086c8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3724      	adds	r7, #36	; 0x24
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008710:	b480      	push	{r7}
 8008712:	b08b      	sub	sp, #44	; 0x2c
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	4613      	mov	r3, r2
 800871c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	089b      	lsrs	r3, r3, #2
 800872a:	b29b      	uxth	r3, r3
 800872c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008736:	2300      	movs	r3, #0
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	e014      	b.n	8008766 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	601a      	str	r2, [r3, #0]
    pDest++;
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	3301      	adds	r3, #1
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	3301      	adds	r3, #1
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	3301      	adds	r3, #1
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	3301      	adds	r3, #1
 800875e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	3301      	adds	r3, #1
 8008764:	623b      	str	r3, [r7, #32]
 8008766:	6a3a      	ldr	r2, [r7, #32]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	429a      	cmp	r2, r3
 800876c:	d3e6      	bcc.n	800873c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800876e:	8bfb      	ldrh	r3, [r7, #30]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01e      	beq.n	80087b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800877e:	461a      	mov	r2, r3
 8008780:	f107 0310 	add.w	r3, r7, #16
 8008784:	6812      	ldr	r2, [r2, #0]
 8008786:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
 8008794:	b2da      	uxtb	r2, r3
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	701a      	strb	r2, [r3, #0]
      i++;
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	3301      	adds	r3, #1
 800879e:	623b      	str	r3, [r7, #32]
      pDest++;
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	3301      	adds	r3, #1
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80087a6:	8bfb      	ldrh	r3, [r7, #30]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80087ac:	8bfb      	ldrh	r3, [r7, #30]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1ea      	bne.n	8008788 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	372c      	adds	r7, #44	; 0x2c
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	785b      	ldrb	r3, [r3, #1]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d12c      	bne.n	8008836 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	db12      	blt.n	8008814 <USB_EPSetStall+0x54>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00f      	beq.n	8008814 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	0151      	lsls	r1, r2, #5
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	440a      	add	r2, r1
 800880a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800880e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008812:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	440a      	add	r2, r1
 800882a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	e02b      	b.n	800888e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	db12      	blt.n	800886e <USB_EPSetStall+0xae>
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00f      	beq.n	800886e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	0151      	lsls	r1, r2, #5
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	440a      	add	r2, r1
 8008864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008868:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800886c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	0151      	lsls	r1, r2, #5
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	440a      	add	r2, r1
 8008884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800888c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d128      	bne.n	800890a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	791b      	ldrb	r3, [r3, #4]
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d003      	beq.n	80088e8 <USB_EPClearStall+0x4c>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	791b      	ldrb	r3, [r3, #4]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d138      	bne.n	800895a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	e027      	b.n	800895a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	0151      	lsls	r1, r2, #5
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	440a      	add	r2, r1
 8008920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008924:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008928:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	791b      	ldrb	r3, [r3, #4]
 800892e:	2b03      	cmp	r3, #3
 8008930:	d003      	beq.n	800893a <USB_EPClearStall+0x9e>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	791b      	ldrb	r3, [r3, #4]
 8008936:	2b02      	cmp	r3, #2
 8008938:	d10f      	bne.n	800895a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	440a      	add	r2, r1
 8008950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008958:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008986:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800898a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800899c:	68f9      	ldr	r1, [r7, #12]
 800899e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a2:	4313      	orrs	r3, r2
 80089a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80089ce:	f023 0303 	bic.w	r3, r3, #3
 80089d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089e2:	f023 0302 	bic.w	r3, r3, #2
 80089e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a10:	f023 0303 	bic.w	r3, r3, #3
 8008a14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a24:	f043 0302 	orr.w	r3, r3, #2
 8008a28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a50:	68fb      	ldr	r3, [r7, #12]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	0c1b      	lsrs	r3, r3, #16
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b085      	sub	sp, #20
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	b29b      	uxth	r3, r3
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	4013      	ands	r3, r2
 8008af2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008af4:	68bb      	ldr	r3, [r7, #8]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b087      	sub	sp, #28
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b24:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b26:	78fb      	ldrb	r3, [r7, #3]
 8008b28:	f003 030f 	and.w	r3, r3, #15
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b32:	01db      	lsls	r3, r3, #7
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b50:	68bb      	ldr	r3, [r7, #8]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b98:	f023 0307 	bic.w	r3, r3, #7
 8008b9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	333c      	adds	r3, #60	; 0x3c
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4a1c      	ldr	r2, [pc, #112]	; (8008c4c <USB_EP0_OutStart+0x8c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d90a      	bls.n	8008bf6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bf0:	d101      	bne.n	8008bf6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e024      	b.n	8008c40 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c24:	f043 0318 	orr.w	r3, r3, #24
 8008c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c38:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c3c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	4f54300a 	.word	0x4f54300a

08008c50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c68:	d901      	bls.n	8008c6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e01b      	b.n	8008ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	daf2      	bge.n	8008c5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f043 0201 	orr.w	r2, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c92:	d901      	bls.n	8008c98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e006      	b.n	8008ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d0f0      	beq.n	8008c86 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
	...

08008cb4 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b096      	sub	sp, #88	; 0x58
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3303      	adds	r3, #3
 8008cc6:	f023 0303 	bic.w	r3, r3, #3
 8008cca:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8008cd0:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8008cd4:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8008cd6:	b672      	cpsid	i
#endif
    return(int_posture);
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8008cda:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008cdc:	4b55      	ldr	r3, [pc, #340]	; (8008e34 <_tx_byte_allocate+0x180>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cea:	621a      	str	r2, [r3, #32]
 8008cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	f383 8810 	msr	PRIMASK, r3
}
 8008cf6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 f9b2 	bl	8009064 <_tx_byte_pool_search>
 8008d00:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d02:	f3ef 8310 	mrs	r3, PRIMASK
 8008d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8008d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d0c:	b672      	cpsid	i
    return(int_posture);
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8008d10:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8008d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d1c:	e006      	b.n	8008d2c <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d101      	bne.n	8008d2c <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8008d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0d9      	beq.n	8008ce6 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d36:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8008d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d008      	beq.n	8008d50 <_tx_byte_allocate+0x9c>
 8008d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d40:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	f383 8810 	msr	PRIMASK, r3
}
 8008d48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8008d4e:	e06c      	b.n	8008e2a <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d061      	beq.n	8008e1a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8008d56:	4b38      	ldr	r3, [pc, #224]	; (8008e38 <_tx_byte_allocate+0x184>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8008d5e:	2310      	movs	r3, #16
 8008d60:	653b      	str	r3, [r7, #80]	; 0x50
 8008d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d64:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	f383 8810 	msr	PRIMASK, r3
}
 8008d6c:	e05d      	b.n	8008e2a <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8008d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d70:	4a32      	ldr	r2, [pc, #200]	; (8008e3c <_tx_byte_allocate+0x188>)
 8008d72:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8008d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8008d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8008d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8008d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d90:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d109      	bne.n	8008dbe <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dae:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8008db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008db4:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8008db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dba:	675a      	str	r2, [r3, #116]	; 0x74
 8008dbc:	e011      	b.n	8008de2 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dc8:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dce:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dd4:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dda:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008de0:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8008de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de4:	2209      	movs	r2, #9
 8008de6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dea:	2201      	movs	r2, #1
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8008df4:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <_tx_byte_allocate+0x184>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	4a0f      	ldr	r2, [pc, #60]	; (8008e38 <_tx_byte_allocate+0x184>)
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e00:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	f383 8810 	msr	PRIMASK, r3
}
 8008e08:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008e0a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008e0c:	f002 facc 	bl	800b3a8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8008e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e16:	653b      	str	r3, [r7, #80]	; 0x50
 8008e18:	e007      	b.n	8008e2a <_tx_byte_allocate+0x176>
 8008e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f383 8810 	msr	PRIMASK, r3
}
 8008e24:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8008e26:	2310      	movs	r3, #16
 8008e28:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8008e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3758      	adds	r7, #88	; 0x58
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	200056bc 	.word	0x200056bc
 8008e38:	20005754 	.word	0x20005754
 8008e3c:	08008e41 	.word	0x08008e41

08008e40 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08e      	sub	sp, #56	; 0x38
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e4e:	623b      	str	r3, [r7, #32]
    return(posture);
 8008e50:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008e52:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e54:	b672      	cpsid	i
    return(int_posture);
 8008e56:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8008e58:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e5e:	4a33      	ldr	r2, [pc, #204]	; (8008f2c <_tx_byte_pool_cleanup+0xec>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d158      	bne.n	8008f16 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d152      	bne.n	8008f16 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e74:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8008e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d04c      	beq.n	8008f16 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a2b      	ldr	r2, [pc, #172]	; (8008f30 <_tx_byte_pool_cleanup+0xf0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d147      	bne.n	8008f16 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d043      	beq.n	8008f16 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8008e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	1e5a      	subs	r2, r3, #1
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d103      	bne.n	8008eb2 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	2200      	movs	r2, #0
 8008eae:	625a      	str	r2, [r3, #36]	; 0x24
 8008eb0:	e013      	b.n	8008eda <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec2:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ec8:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d102      	bne.n	8008eda <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d119      	bne.n	8008f16 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2210      	movs	r2, #16
 8008ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <_tx_byte_pool_cleanup+0xf4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	4a10      	ldr	r2, [pc, #64]	; (8008f34 <_tx_byte_pool_cleanup+0xf4>)
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f383 8810 	msr	PRIMASK, r3
}
 8008efe:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f002 f951 	bl	800b1a8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f06:	f3ef 8310 	mrs	r3, PRIMASK
 8008f0a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008f0c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008f0e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f10:	b672      	cpsid	i
    return(int_posture);
 8008f12:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008f14:	637b      	str	r3, [r7, #52]	; 0x34
 8008f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f18:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f383 8810 	msr	PRIMASK, r3
}
 8008f20:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008f22:	bf00      	nop
 8008f24:	3738      	adds	r7, #56	; 0x38
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	08008e41 	.word	0x08008e41
 8008f30:	42595445 	.word	0x42595445
 8008f34:	20005754 	.word	0x20005754

08008f38 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08e      	sub	sp, #56	; 0x38
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8008f46:	2234      	movs	r2, #52	; 0x34
 8008f48:	2100      	movs	r1, #0
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f008 fd2a 	bl	80119a4 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	f023 0303 	bic.w	r3, r3, #3
 8008f56:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	f1a3 0208 	sub.w	r2, r3, #8
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2202      	movs	r2, #2
 8008f84:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8008f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	4413      	add	r3, r2
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8008f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f94:	3b04      	subs	r3, #4
 8008f96:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8008fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa8:	3b04      	subs	r3, #4
 8008faa:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8008fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc2:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fca:	3304      	adds	r3, #4
 8008fcc:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8008fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd4:	4a1f      	ldr	r2, [pc, #124]	; (8009054 <_tx_byte_pool_create+0x11c>)
 8008fd6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008fde:	f3ef 8310 	mrs	r3, PRIMASK
 8008fe2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008fe4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008fe6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008fe8:	b672      	cpsid	i
    return(int_posture);
 8008fea:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008fec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4a19      	ldr	r2, [pc, #100]	; (8009058 <_tx_byte_pool_create+0x120>)
 8008ff2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8008ff4:	4b19      	ldr	r3, [pc, #100]	; (800905c <_tx_byte_pool_create+0x124>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d109      	bne.n	8009010 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8008ffc:	4a18      	ldr	r2, [pc, #96]	; (8009060 <_tx_byte_pool_create+0x128>)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	631a      	str	r2, [r3, #48]	; 0x30
 800900e:	e011      	b.n	8009034 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8009010:	4b13      	ldr	r3, [pc, #76]	; (8009060 <_tx_byte_pool_create+0x128>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a3a      	ldr	r2, [r7, #32]
 8009032:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8009034:	4b09      	ldr	r3, [pc, #36]	; (800905c <_tx_byte_pool_create+0x124>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3301      	adds	r3, #1
 800903a:	4a08      	ldr	r2, [pc, #32]	; (800905c <_tx_byte_pool_create+0x124>)
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f383 8810 	msr	PRIMASK, r3
}
 8009048:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3738      	adds	r7, #56	; 0x38
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	ffffeeee 	.word	0xffffeeee
 8009058:	42595445 	.word	0x42595445
 800905c:	200056b0 	.word	0x200056b0
 8009060:	200056ac 	.word	0x200056ac

08009064 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8009064:	b480      	push	{r7}
 8009066:	b097      	sub	sp, #92	; 0x5c
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800906e:	2300      	movs	r3, #0
 8009070:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009072:	f3ef 8310 	mrs	r3, PRIMASK
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800907a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800907c:	b672      	cpsid	i
    return(int_posture);
 800907e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8009080:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689a      	ldr	r2, [r3, #8]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	3b02      	subs	r3, #2
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	4413      	add	r3, r2
 8009090:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009096:	429a      	cmp	r2, r3
 8009098:	d308      	bcc.n	80090ac <_tx_byte_pool_search+0x48>
 800909a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800909c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f383 8810 	msr	PRIMASK, r3
}
 80090a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	653b      	str	r3, [r7, #80]	; 0x50
 80090aa:	e0dd      	b.n	8009268 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80090ac:	4b72      	ldr	r3, [pc, #456]	; (8009278 <_tx_byte_pool_search+0x214>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090b6:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	3301      	adds	r3, #1
 80090c4:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80090c6:	2300      	movs	r3, #0
 80090c8:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80090ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090cc:	3304      	adds	r3, #4
 80090ce:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a68      	ldr	r2, [pc, #416]	; (800927c <_tx_byte_pool_search+0x218>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d143      	bne.n	8009166 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80090de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d104      	bne.n	80090ee <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090e8:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80090ea:	2301      	movs	r3, #1
 80090ec:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80090ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090f0:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80090f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8009100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009102:	3b08      	subs	r3, #8
 8009104:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8009106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d257      	bcs.n	80091be <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800910e:	2300      	movs	r3, #0
 8009110:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	3304      	adds	r3, #4
 8009116:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800911c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a56      	ldr	r2, [pc, #344]	; (800927c <_tx_byte_pool_search+0x218>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d113      	bne.n	800914e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	1e5a      	subs	r2, r3, #1
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009142:	429a      	cmp	r2, r3
 8009144:	d114      	bne.n	8009170 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800914a:	615a      	str	r2, [r3, #20]
 800914c:	e010      	b.n	8009170 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8009158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915a:	2b00      	cmp	r3, #0
 800915c:	d008      	beq.n	8009170 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800915e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009160:	3b01      	subs	r3, #1
 8009162:	64bb      	str	r3, [r7, #72]	; 0x48
 8009164:	e004      	b.n	8009170 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009168:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8009170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8009176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009178:	3b01      	subs	r3, #1
 800917a:	64bb      	str	r3, [r7, #72]	; 0x48
 800917c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800917e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f383 8810 	msr	PRIMASK, r3
}
 8009186:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009188:	f3ef 8310 	mrs	r3, PRIMASK
 800918c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800918e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009190:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009192:	b672      	cpsid	i
    return(int_posture);
 8009194:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8009196:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800919e:	429a      	cmp	r2, r3
 80091a0:	d009      	beq.n	80091b6 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	3301      	adds	r3, #1
 80091ae:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091b4:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80091b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d186      	bne.n	80090ca <_tx_byte_pool_search+0x66>
 80091bc:	e000      	b.n	80091c0 <_tx_byte_pool_search+0x15c>
                    break;
 80091be:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80091c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d048      	beq.n	8009258 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80091c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	2b13      	cmp	r3, #19
 80091ce:	d91e      	bls.n	800920e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	3308      	adds	r3, #8
 80091d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091d6:	4413      	add	r3, r2
 80091d8:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80091de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e0:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	3304      	adds	r3, #4
 80091ee:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80091f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f6:	4a21      	ldr	r2, [pc, #132]	; (800927c <_tx_byte_pool_search+0x218>)
 80091f8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009208:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800920e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009210:	3304      	adds	r3, #4
 8009212:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8009214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009216:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	f1a3 0208 	sub.w	r2, r3, #8
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009234:	429a      	cmp	r2, r3
 8009236:	d105      	bne.n	8009244 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8009238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800923a:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	615a      	str	r2, [r3, #20]
 8009244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009246:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f383 8810 	msr	PRIMASK, r3
}
 800924e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8009250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009252:	3308      	adds	r3, #8
 8009254:	653b      	str	r3, [r7, #80]	; 0x50
 8009256:	e007      	b.n	8009268 <_tx_byte_pool_search+0x204>
 8009258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800925a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f383 8810 	msr	PRIMASK, r3
}
 8009262:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8009268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800926a:	4618      	mov	r0, r3
 800926c:	375c      	adds	r7, #92	; 0x5c
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	200056bc 	.word	0x200056bc
 800927c:	ffffeeee 	.word	0xffffeeee

08009280 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b08e      	sub	sp, #56	; 0x38
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800928a:	f3ef 8310 	mrs	r3, PRIMASK
 800928e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009290:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009292:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009294:	b672      	cpsid	i
    return(int_posture);
 8009296:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 8009298:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800929e:	4a38      	ldr	r2, [pc, #224]	; (8009380 <_tx_event_flags_cleanup+0x100>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d162      	bne.n	800936a <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d15c      	bne.n	800936a <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092b4:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d056      	beq.n	800936a <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 80092bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a30      	ldr	r2, [pc, #192]	; (8009384 <_tx_event_flags_cleanup+0x104>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d151      	bne.n	800936a <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d04d      	beq.n	800936a <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d020      	beq.n	8009328 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	3b01      	subs	r3, #1
 80092ea:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 80092ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092f0:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d103      	bne.n	8009300 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	2200      	movs	r2, #0
 80092fc:	611a      	str	r2, [r3, #16]
 80092fe:	e016      	b.n	800932e <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009304:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800930a:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	6a3a      	ldr	r2, [r7, #32]
 8009310:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009316:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 8009318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d106      	bne.n	800932e <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009324:	611a      	str	r2, [r3, #16]
 8009326:	e002      	b.n	800932e <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	2201      	movs	r2, #1
 800932c:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	2b07      	cmp	r3, #7
 8009334:	d119      	bne.n	800936a <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2207      	movs	r2, #7
 800933a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <_tx_event_flags_cleanup+0x108>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3301      	adds	r3, #1
 8009344:	4a10      	ldr	r2, [pc, #64]	; (8009388 <_tx_event_flags_cleanup+0x108>)
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f383 8810 	msr	PRIMASK, r3
}
 8009352:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 ff27 	bl	800b1a8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800935a:	f3ef 8310 	mrs	r3, PRIMASK
 800935e:	617b      	str	r3, [r7, #20]
    return(posture);
 8009360:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009362:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009364:	b672      	cpsid	i
    return(int_posture);
 8009366:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8009368:	637b      	str	r3, [r7, #52]	; 0x34
 800936a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f383 8810 	msr	PRIMASK, r3
}
 8009374:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009376:	bf00      	nop
 8009378:	3738      	adds	r7, #56	; 0x38
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	08009281 	.word	0x08009281
 8009384:	4456444e 	.word	0x4456444e
 8009388:	20005754 	.word	0x20005754

0800938c <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8009396:	2224      	movs	r2, #36	; 0x24
 8009398:	2100      	movs	r1, #0
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f008 fb02 	bl	80119a4 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093a6:	f3ef 8310 	mrs	r3, PRIMASK
 80093aa:	613b      	str	r3, [r7, #16]
    return(posture);
 80093ac:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80093ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80093b0:	b672      	cpsid	i
    return(int_posture);
 80093b2:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 80093b4:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a18      	ldr	r2, [pc, #96]	; (800941c <_tx_event_flags_create+0x90>)
 80093ba:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 80093bc:	4b18      	ldr	r3, [pc, #96]	; (8009420 <_tx_event_flags_create+0x94>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d109      	bne.n	80093d8 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 80093c4:	4a17      	ldr	r2, [pc, #92]	; (8009424 <_tx_event_flags_create+0x98>)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	61da      	str	r2, [r3, #28]
 80093d6:	e011      	b.n	80093fc <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 80093d8:	4b12      	ldr	r3, [pc, #72]	; (8009424 <_tx_event_flags_create+0x98>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 80093fc:	4b08      	ldr	r3, [pc, #32]	; (8009420 <_tx_event_flags_create+0x94>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3301      	adds	r3, #1
 8009402:	4a07      	ldr	r2, [pc, #28]	; (8009420 <_tx_event_flags_create+0x94>)
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f383 8810 	msr	PRIMASK, r3
}
 8009410:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3720      	adds	r7, #32
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	4456444e 	.word	0x4456444e
 8009420:	20005698 	.word	0x20005698
 8009424:	20005694 	.word	0x20005694

08009428 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b096      	sub	sp, #88	; 0x58
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009436:	f3ef 8310 	mrs	r3, PRIMASK
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800943e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009440:	b672      	cpsid	i
    return(int_posture);
 8009442:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8009444:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	43da      	mvns	r2, r3
 8009452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009454:	401a      	ands	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a1b      	ldr	r3, [r3, #32]
 8009466:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 8009468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946a:	2b00      	cmp	r3, #0
 800946c:	d004      	beq.n	8009478 <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800946e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009470:	43db      	mvns	r3, r3
 8009472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009474:	4013      	ands	r3, r2
 8009476:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8009478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800947a:	2b02      	cmp	r3, #2
 800947c:	d10a      	bne.n	8009494 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800947e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4013      	ands	r3, r2
 8009484:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8009486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	d006      	beq.n	800949c <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800948e:	2300      	movs	r3, #0
 8009490:	64bb      	str	r3, [r7, #72]	; 0x48
 8009492:	e003      	b.n	800949c <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8009494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	4013      	ands	r3, r2
 800949a:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800949c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d026      	beq.n	80094f0 <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d11c      	bne.n	80094ea <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 80094c4:	2301      	movs	r3, #1
 80094c6:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 80094c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d106      	bne.n	80094dc <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a1a      	ldr	r2, [r3, #32]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	621a      	str	r2, [r3, #32]
 80094da:	e006      	b.n	80094ea <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	43db      	mvns	r3, r3
 80094e4:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80094ea:	2300      	movs	r3, #0
 80094ec:	653b      	str	r3, [r7, #80]	; 0x50
 80094ee:	e073      	b.n	80095d8 <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80094f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d06e      	beq.n	80095d4 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 80094f6:	4b3e      	ldr	r3, [pc, #248]	; (80095f0 <_tx_event_flags_get+0x1c8>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <_tx_event_flags_get+0xdc>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d102      	bne.n	800950a <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 8009504:	2307      	movs	r3, #7
 8009506:	653b      	str	r3, [r7, #80]	; 0x50
 8009508:	e066      	b.n	80095d8 <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800950a:	4b3a      	ldr	r3, [pc, #232]	; (80095f4 <_tx_event_flags_get+0x1cc>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8009510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009512:	4a39      	ldr	r2, [pc, #228]	; (80095f8 <_tx_event_flags_get+0x1d0>)
 8009514:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 8009516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8009544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009546:	2b00      	cmp	r3, #0
 8009548:	d109      	bne.n	800955e <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800954e:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009554:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800955a:	675a      	str	r2, [r3, #116]	; 0x74
 800955c:	e011      	b.n	8009582 <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009568:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800956e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009574:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800957a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009580:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800958c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958e:	2207      	movs	r2, #7
 8009590:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	2201      	movs	r2, #1
 8009596:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800959c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800959e:	4b14      	ldr	r3, [pc, #80]	; (80095f0 <_tx_event_flags_get+0x1c8>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3301      	adds	r3, #1
 80095a4:	4a12      	ldr	r2, [pc, #72]	; (80095f0 <_tx_event_flags_get+0x1c8>)
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f383 8810 	msr	PRIMASK, r3
}
 80095b2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80095b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095b6:	f001 fef7 	bl	800b3a8 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095ba:	f3ef 8310 	mrs	r3, PRIMASK
 80095be:	61fb      	str	r3, [r7, #28]
    return(posture);
 80095c0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80095c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80095c4:	b672      	cpsid	i
    return(int_posture);
 80095c6:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 80095c8:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095d0:	653b      	str	r3, [r7, #80]	; 0x50
 80095d2:	e001      	b.n	80095d8 <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 80095d4:	2307      	movs	r3, #7
 80095d6:	653b      	str	r3, [r7, #80]	; 0x50
 80095d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095da:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f383 8810 	msr	PRIMASK, r3
}
 80095e2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 80095e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3758      	adds	r7, #88	; 0x58
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20005754 	.word	0x20005754
 80095f4:	200056bc 	.word	0x200056bc
 80095f8:	08009281 	.word	0x08009281

080095fc <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b0a6      	sub	sp, #152	; 0x98
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009608:	f3ef 8310 	mrs	r3, PRIMASK
 800960c:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800960e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8009610:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009612:	b672      	cpsid	i
    return(int_posture);
 8009614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 8009616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d023      	beq.n	800966c <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 8009624:	2300      	movs	r3, #0
 8009626:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 8009638:	2301      	movs	r3, #1
 800963a:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800963c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800963e:	2b01      	cmp	r3, #1
 8009640:	d107      	bne.n	8009652 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a1a      	ldr	r2, [r3, #32]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	43db      	mvns	r3, r3
 800964a:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	621a      	str	r2, [r3, #32]
 8009650:	e005      	b.n	800965e <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	609a      	str	r2, [r3, #8]
 800965e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009662:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009666:	f383 8810 	msr	PRIMASK, r3
}
 800966a:	e1d2      	b.n	8009a12 <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6a1b      	ldr	r3, [r3, #32]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d006      	beq.n	800968e <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a1a      	ldr	r2, [r3, #32]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	43db      	mvns	r3, r3
 8009688:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800968e:	2300      	movs	r3, #0
 8009690:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 81a4 	beq.w	80099ec <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 80096a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d167      	bne.n	800977c <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80096ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096c0:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 80096c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096ca:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 80096cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ce:	f003 0302 	and.w	r3, r3, #2
 80096d2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 80096d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d10a      	bne.n	80096f0 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80096da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096de:	4013      	ands	r3, r2
 80096e0:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 80096e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80096e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d006      	beq.n	80096f8 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 80096ea:	2300      	movs	r3, #0
 80096ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80096ee:	e003      	b.n	80096f8 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80096f0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096f4:	4013      	ands	r3, r2
 80096f6:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 80096f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f000 817d 	beq.w	80099fa <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8009700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009706:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 8009708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800970a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800970c:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800970e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 8009716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009718:	2b01      	cmp	r3, #1
 800971a:	d106      	bne.n	800972a <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	689a      	ldr	r2, [r3, #8]
 8009720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009722:	43db      	mvns	r3, r3
 8009724:	401a      	ands	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009736:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800973a:	2200      	movs	r2, #0
 800973c:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800973e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009742:	2200      	movs	r2, #0
 8009744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8009748:	4ba7      	ldr	r3, [pc, #668]	; (80099e8 <_tx_event_flags_set+0x3ec>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3301      	adds	r3, #1
 800974e:	4aa6      	ldr	r2, [pc, #664]	; (80099e8 <_tx_event_flags_set+0x3ec>)
 8009750:	6013      	str	r3, [r2, #0]
 8009752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009756:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	f383 8810 	msr	PRIMASK, r3
}
 800975e:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8009760:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8009764:	f001 fd20 	bl	800b1a8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009768:	f3ef 8310 	mrs	r3, PRIMASK
 800976c:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800976e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8009770:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009772:	b672      	cpsid	i
    return(int_posture);
 8009774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8009776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800977a:	e13e      	b.n	80099fa <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 8009784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8009792:	2300      	movs	r3, #0
 8009794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 8009798:	2300      	movs	r3, #0
 800979a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 80097a4:	4b90      	ldr	r3, [pc, #576]	; (80099e8 <_tx_event_flags_set+0x3ec>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	4a8f      	ldr	r2, [pc, #572]	; (80099e8 <_tx_event_flags_set+0x3ec>)
 80097ac:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 80097ae:	2301      	movs	r3, #1
 80097b0:	677b      	str	r3, [r7, #116]	; 0x74
 80097b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	f383 8810 	msr	PRIMASK, r3
}
 80097be:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097c0:	f3ef 8310 	mrs	r3, PRIMASK
 80097c4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80097c8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80097ca:	b672      	cpsid	i
    return(int_posture);
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 80097ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00f      	beq.n	80097fa <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 80097e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80097f6:	4313      	orrs	r3, r2
 80097f8:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80097fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009800:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8009802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009808:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800980a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800980e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009812:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8009814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800981c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800981e:	2b02      	cmp	r3, #2
 8009820:	d10a      	bne.n	8009838 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8009822:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009826:	4013      	ands	r3, r2
 8009828:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800982a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800982c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800982e:	429a      	cmp	r2, r3
 8009830:	d006      	beq.n	8009840 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8009832:	2300      	movs	r3, #0
 8009834:	67bb      	str	r3, [r7, #120]	; 0x78
 8009836:	e003      	b.n	8009840 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8009838:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800983a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800983c:	4013      	ands	r3, r2
 800983e:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8009840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009846:	2b07      	cmp	r3, #7
 8009848:	d001      	beq.n	800984e <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800984a:	2301      	movs	r3, #1
 800984c:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800984e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009850:	2b00      	cmp	r3, #0
 8009852:	d069      	beq.n	8009928 <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8009854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985a:	2b07      	cmp	r3, #7
 800985c:	d11d      	bne.n	800989a <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800985e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009864:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 8009866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009868:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800986a:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800986c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8009874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009876:	2b01      	cmp	r3, #1
 8009878:	d106      	bne.n	8009888 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009880:	43db      	mvns	r3, r3
 8009882:	401a      	ands	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800988c:	2200      	movs	r2, #0
 800988e:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009890:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009894:	2200      	movs	r2, #0
 8009896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800989a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800989e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d103      	bne.n	80098b0 <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098ae:	e018      	b.n	80098e2 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80098b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b6:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80098b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098be:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80098c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098c4:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 80098c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098ca:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 80098cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80098d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d104      	bne.n	80098e2 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 80098d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	1e5a      	subs	r2, r3, #1
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 80098ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10c      	bne.n	800990e <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 80098f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 80098fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 8009904:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009908:	2200      	movs	r2, #0
 800990a:	671a      	str	r2, [r3, #112]	; 0x70
 800990c:	e00c      	b.n	8009928 <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800990e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009912:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009916:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8009918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800991c:	2200      	movs	r2, #0
 800991e:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 8009920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8009928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800992a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800992e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009932:	3b01      	subs	r3, #1
 8009934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 8009938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800993c:	2b00      	cmp	r3, #0
 800993e:	f47f af38 	bne.w	80097b2 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009948:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	43db      	mvns	r3, r3
 800995c:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	621a      	str	r2, [r3, #32]
 8009968:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800996c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009970:	f383 8810 	msr	PRIMASK, r3
}
 8009974:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8009976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800997a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800997e:	e01f      	b.n	80099c0 <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009980:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009986:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009988:	f3ef 8310 	mrs	r3, PRIMASK
 800998c:	623b      	str	r3, [r7, #32]
    return(posture);
 800998e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009990:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009992:	b672      	cpsid	i
    return(int_posture);
 8009994:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8009996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800999a:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <_tx_event_flags_set+0x3ec>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	3301      	adds	r3, #1
 80099a0:	4a11      	ldr	r2, [pc, #68]	; (80099e8 <_tx_event_flags_set+0x3ec>)
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	f383 8810 	msr	PRIMASK, r3
}
 80099b0:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 80099b2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80099b6:	f001 fbf7 	bl	800b1a8 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 80099ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 80099c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1db      	bne.n	8009980 <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099c8:	f3ef 8310 	mrs	r3, PRIMASK
 80099cc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80099ce:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80099d0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80099d2:	b672      	cpsid	i
    return(int_posture);
 80099d4:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 80099d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 80099da:	4b03      	ldr	r3, [pc, #12]	; (80099e8 <_tx_event_flags_set+0x3ec>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3b01      	subs	r3, #1
 80099e0:	4a01      	ldr	r2, [pc, #4]	; (80099e8 <_tx_event_flags_set+0x3ec>)
 80099e2:	6013      	str	r3, [r2, #0]
 80099e4:	e009      	b.n	80099fa <_tx_event_flags_set+0x3fe>
 80099e6:	bf00      	nop
 80099e8:	20005754 	.word	0x20005754
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	60da      	str	r2, [r3, #12]
 80099fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f383 8810 	msr	PRIMASK, r3
}
 8009a06:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 8009a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 8009a0e:	f001 fb91 	bl	800b134 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3798      	adds	r7, #152	; 0x98
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8009a20:	f001 fa80 	bl	800af24 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8009a24:	f001 fe88 	bl	800b738 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8009a28:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <_tx_initialize_high_level+0x58>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <_tx_initialize_high_level+0x5c>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8009a34:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <_tx_initialize_high_level+0x60>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	4b11      	ldr	r3, [pc, #68]	; (8009a80 <_tx_initialize_high_level+0x64>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8009a40:	4b10      	ldr	r3, [pc, #64]	; (8009a84 <_tx_initialize_high_level+0x68>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <_tx_initialize_high_level+0x6c>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8009a4c:	4b0f      	ldr	r3, [pc, #60]	; (8009a8c <_tx_initialize_high_level+0x70>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	4b0f      	ldr	r3, [pc, #60]	; (8009a90 <_tx_initialize_high_level+0x74>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8009a58:	4b0e      	ldr	r3, [pc, #56]	; (8009a94 <_tx_initialize_high_level+0x78>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <_tx_initialize_high_level+0x7c>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8009a64:	4b0d      	ldr	r3, [pc, #52]	; (8009a9c <_tx_initialize_high_level+0x80>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <_tx_initialize_high_level+0x84>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
#endif
}
 8009a70:	bf00      	nop
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20005684 	.word	0x20005684
 8009a78:	20005688 	.word	0x20005688
 8009a7c:	2000568c 	.word	0x2000568c
 8009a80:	20005690 	.word	0x20005690
 8009a84:	20005694 	.word	0x20005694
 8009a88:	20005698 	.word	0x20005698
 8009a8c:	200056a4 	.word	0x200056a4
 8009a90:	200056a8 	.word	0x200056a8
 8009a94:	200056ac 	.word	0x200056ac
 8009a98:	200056b0 	.word	0x200056b0
 8009a9c:	2000569c 	.word	0x2000569c
 8009aa0:	200056a0 	.word	0x200056a0

08009aa4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8009aa8:	4b10      	ldr	r3, [pc, #64]	; (8009aec <_tx_initialize_kernel_enter+0x48>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8009ab0:	d00c      	beq.n	8009acc <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009ab2:	4b0e      	ldr	r3, [pc, #56]	; (8009aec <_tx_initialize_kernel_enter+0x48>)
 8009ab4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8009ab8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8009aba:	f7f6 fba1 	bl	8000200 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8009abe:	f7ff ffad 	bl	8009a1c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8009ac2:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <_tx_initialize_kernel_enter+0x4c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	4a09      	ldr	r2, [pc, #36]	; (8009af0 <_tx_initialize_kernel_enter+0x4c>)
 8009aca:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8009acc:	4b07      	ldr	r3, [pc, #28]	; (8009aec <_tx_initialize_kernel_enter+0x48>)
 8009ace:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8009ad2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8009ad4:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <_tx_initialize_kernel_enter+0x50>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7f6 fe8f 	bl	80007fc <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8009ade:	4b03      	ldr	r3, [pc, #12]	; (8009aec <_tx_initialize_kernel_enter+0x48>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8009ae4:	f7f6 fbcc 	bl	8000280 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009ae8:	bf00      	nop
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	2000000c 	.word	0x2000000c
 8009af0:	20005754 	.word	0x20005754
 8009af4:	200056b4 	.word	0x200056b4

08009af8 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08e      	sub	sp, #56	; 0x38
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b02:	f3ef 8310 	mrs	r3, PRIMASK
 8009b06:	623b      	str	r3, [r7, #32]
    return(posture);
 8009b08:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009b0a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b0c:	b672      	cpsid	i
    return(int_posture);
 8009b0e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b16:	4a33      	ldr	r2, [pc, #204]	; (8009be4 <_tx_mutex_cleanup+0xec>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d158      	bne.n	8009bce <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d152      	bne.n	8009bce <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b2c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d04c      	beq.n	8009bce <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a2b      	ldr	r2, [pc, #172]	; (8009be8 <_tx_mutex_cleanup+0xf0>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d147      	bne.n	8009bce <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d043      	beq.n	8009bce <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	1e5a      	subs	r2, r3, #1
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8009b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d103      	bne.n	8009b6a <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	2200      	movs	r2, #0
 8009b66:	619a      	str	r2, [r3, #24]
 8009b68:	e013      	b.n	8009b92 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b74:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b80:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8009b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d102      	bne.n	8009b92 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b90:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	2b0d      	cmp	r3, #13
 8009b98:	d119      	bne.n	8009bce <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	221d      	movs	r2, #29
 8009b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8009ba2:	4b12      	ldr	r3, [pc, #72]	; (8009bec <_tx_mutex_cleanup+0xf4>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	4a10      	ldr	r2, [pc, #64]	; (8009bec <_tx_mutex_cleanup+0xf4>)
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f383 8810 	msr	PRIMASK, r3
}
 8009bb6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f001 faf5 	bl	800b1a8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8009bc2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009bc4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009bc6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009bc8:	b672      	cpsid	i
    return(int_posture);
 8009bca:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8009bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8009bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f383 8810 	msr	PRIMASK, r3
}
 8009bd8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009bda:	bf00      	nop
 8009bdc:	3738      	adds	r7, #56	; 0x38
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	08009af9 	.word	0x08009af9
 8009be8:	4d555445 	.word	0x4d555445
 8009bec:	20005754 	.word	0x20005754

08009bf0 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08a      	sub	sp, #40	; 0x28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8009bfc:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009bfe:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009c00:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c02:	b672      	cpsid	i
    return(int_posture);
 8009c04:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009c08:	4b1a      	ldr	r3, [pc, #104]	; (8009c74 <_tx_mutex_thread_release+0x84>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	4a19      	ldr	r2, [pc, #100]	; (8009c74 <_tx_mutex_thread_release+0x84>)
 8009c10:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c18:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d017      	beq.n	8009c50 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8009c20:	6a3b      	ldr	r3, [r7, #32]
 8009c22:	2201      	movs	r2, #1
 8009c24:	609a      	str	r2, [r3, #8]
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c28:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f383 8810 	msr	PRIMASK, r3
}
 8009c30:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8009c32:	6a38      	ldr	r0, [r7, #32]
 8009c34:	f000 fb9c 	bl	800a370 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c38:	f3ef 8310 	mrs	r3, PRIMASK
 8009c3c:	617b      	str	r3, [r7, #20]
    return(posture);
 8009c3e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009c40:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c42:	b672      	cpsid	i
    return(int_posture);
 8009c44:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009c4e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1dd      	bne.n	8009c12 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8009c56:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <_tx_mutex_thread_release+0x84>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	4a05      	ldr	r2, [pc, #20]	; (8009c74 <_tx_mutex_thread_release+0x84>)
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f383 8810 	msr	PRIMASK, r3
}
 8009c6a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009c6c:	bf00      	nop
 8009c6e:	3728      	adds	r7, #40	; 0x28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20005754 	.word	0x20005754

08009c78 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8009c84:	2234      	movs	r2, #52	; 0x34
 8009c86:	2100      	movs	r1, #0
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f007 fe8b 	bl	80119a4 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c9e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009ca0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009ca2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ca4:	b672      	cpsid	i
    return(int_posture);
 8009ca6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4a1a      	ldr	r2, [pc, #104]	; (8009d18 <_tx_mutex_create+0xa0>)
 8009cae:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8009cb0:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <_tx_mutex_create+0xa4>)
 8009cb2:	4a1b      	ldr	r2, [pc, #108]	; (8009d20 <_tx_mutex_create+0xa8>)
 8009cb4:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8009cb6:	4b1b      	ldr	r3, [pc, #108]	; (8009d24 <_tx_mutex_create+0xac>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d109      	bne.n	8009cd2 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8009cbe:	4a1a      	ldr	r2, [pc, #104]	; (8009d28 <_tx_mutex_create+0xb0>)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	625a      	str	r2, [r3, #36]	; 0x24
 8009cd0:	e011      	b.n	8009cf6 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8009cd2:	4b15      	ldr	r3, [pc, #84]	; (8009d28 <_tx_mutex_create+0xb0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cdc:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6a3a      	ldr	r2, [r7, #32]
 8009cf4:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <_tx_mutex_create+0xac>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	4a09      	ldr	r2, [pc, #36]	; (8009d24 <_tx_mutex_create+0xac>)
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f383 8810 	msr	PRIMASK, r3
}
 8009d0a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3728      	adds	r7, #40	; 0x28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	4d555445 	.word	0x4d555445
 8009d1c:	20005758 	.word	0x20005758
 8009d20:	08009bf1 	.word	0x08009bf1
 8009d24:	200056a0 	.word	0x200056a0
 8009d28:	2000569c 	.word	0x2000569c

08009d2c <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b096      	sub	sp, #88	; 0x58
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d34:	f3ef 8310 	mrs	r3, PRIMASK
 8009d38:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8009d3c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d3e:	b672      	cpsid	i
    return(int_posture);
 8009d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8009d42:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8009d4a:	4b4a      	ldr	r3, [pc, #296]	; (8009e74 <_tx_mutex_delete+0x148>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	4a48      	ldr	r2, [pc, #288]	; (8009e74 <_tx_mutex_delete+0x148>)
 8009d52:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8009d54:	4b47      	ldr	r3, [pc, #284]	; (8009e74 <_tx_mutex_delete+0x148>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8009d5c:	4b46      	ldr	r3, [pc, #280]	; (8009e78 <_tx_mutex_delete+0x14c>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	e013      	b.n	8009d8c <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8009d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8009d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d7a:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8009d7c:	4b3e      	ldr	r3, [pc, #248]	; (8009e78 <_tx_mutex_delete+0x14c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d102      	bne.n	8009d8c <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8009d86:	4a3c      	ldr	r2, [pc, #240]	; (8009e78 <_tx_mutex_delete+0x14c>)
 8009d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d8a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009d8c:	4b3b      	ldr	r3, [pc, #236]	; (8009e7c <_tx_mutex_delete+0x150>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3301      	adds	r3, #1
 8009d92:	4a3a      	ldr	r2, [pc, #232]	; (8009e7c <_tx_mutex_delete+0x150>)
 8009d94:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8009db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d013      	beq.n	8009de2 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	609a      	str	r2, [r3, #8]
 8009dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	f383 8810 	msr	PRIMASK, r3
}
 8009dca:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 facf 	bl	800a370 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8009dd6:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8009dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ddc:	b672      	cpsid	i
    return(int_posture);
 8009dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8009de0:	657b      	str	r3, [r7, #84]	; 0x54
 8009de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	f383 8810 	msr	PRIMASK, r3
}
 8009dec:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8009dee:	e024      	b.n	8009e3a <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8009df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009df2:	3b01      	subs	r3, #1
 8009df4:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009df6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dfa:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009dfc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009dfe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e00:	b672      	cpsid	i
    return(int_posture);
 8009e02:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8009e04:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e08:	2200      	movs	r2, #0
 8009e0a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8009e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8009e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8009e1a:	4b18      	ldr	r3, [pc, #96]	; (8009e7c <_tx_mutex_delete+0x150>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	4a16      	ldr	r2, [pc, #88]	; (8009e7c <_tx_mutex_delete+0x150>)
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e26:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	f383 8810 	msr	PRIMASK, r3
}
 8009e2e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009e30:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009e32:	f001 f9b9 	bl	800b1a8 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8009e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e38:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 8009e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1d7      	bne.n	8009df0 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e40:	f3ef 8310 	mrs	r3, PRIMASK
 8009e44:	613b      	str	r3, [r7, #16]
    return(posture);
 8009e46:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8009e48:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e4a:	b672      	cpsid	i
    return(int_posture);
 8009e4c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8009e4e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8009e50:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <_tx_mutex_delete+0x150>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	4a09      	ldr	r2, [pc, #36]	; (8009e7c <_tx_mutex_delete+0x150>)
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e5c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f383 8810 	msr	PRIMASK, r3
}
 8009e64:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8009e66:	f001 f965 	bl	800b134 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3758      	adds	r7, #88	; 0x58
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	200056a0 	.word	0x200056a0
 8009e78:	2000569c 	.word	0x2000569c
 8009e7c:	20005754 	.word	0x20005754

08009e80 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b092      	sub	sp, #72	; 0x48
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e8e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8009e92:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e94:	b672      	cpsid	i
    return(int_posture);
 8009e96:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8009e98:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009e9a:	4b7a      	ldr	r3, [pc, #488]	; (800a084 <_tx_mutex_get+0x204>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d144      	bne.n	8009f32 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009eb2:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8009eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d032      	beq.n	8009f20 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d106      	bne.n	8009ed0 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8009ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00f      	beq.n	8009efe <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8009ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee2:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8009ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ef4:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009efa:	62da      	str	r2, [r3, #44]	; 0x2c
 8009efc:	e009      	b.n	8009f12 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8009efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8009f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8009f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	f383 8810 	msr	PRIMASK, r3
}
 8009f2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8009f30:	e0a2      	b.n	800a078 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d10d      	bne.n	8009f58 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	609a      	str	r2, [r3, #8]
 8009f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f48:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	f383 8810 	msr	PRIMASK, r3
}
 8009f50:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8009f52:	2300      	movs	r3, #0
 8009f54:	647b      	str	r3, [r7, #68]	; 0x44
 8009f56:	e08f      	b.n	800a078 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 8084 	beq.w	800a068 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8009f60:	4b49      	ldr	r3, [pc, #292]	; (800a088 <_tx_mutex_get+0x208>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d008      	beq.n	8009f7a <_tx_mutex_get+0xfa>
 8009f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f383 8810 	msr	PRIMASK, r3
}
 8009f72:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8009f74:	231d      	movs	r3, #29
 8009f76:	647b      	str	r3, [r7, #68]	; 0x44
 8009f78:	e07e      	b.n	800a078 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8009f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f82:	4a42      	ldr	r2, [pc, #264]	; (800a08c <_tx_mutex_get+0x20c>)
 8009f84:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8009f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8009f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f96:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	69db      	ldr	r3, [r3, #28]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d109      	bne.n	8009fb6 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fa6:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8009fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fac:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fb2:	675a      	str	r2, [r3, #116]	; 0x74
 8009fb4:	e011      	b.n	8009fda <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fc0:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fc6:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8009fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fcc:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fd2:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fd8:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8009fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe6:	220d      	movs	r2, #13
 8009fe8:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fec:	2201      	movs	r2, #1
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8009ff6:	4b24      	ldr	r3, [pc, #144]	; (800a088 <_tx_mutex_get+0x208>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	4a22      	ldr	r2, [pc, #136]	; (800a088 <_tx_mutex_get+0x208>)
 8009ffe:	6013      	str	r3, [r2, #0]
 800a000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a002:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f383 8810 	msr	PRIMASK, r3
}
 800a00a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d121      	bne.n	800a058 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d903      	bls.n	800a028 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800a020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800a028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a032:	429a      	cmp	r2, r3
 800a034:	d204      	bcs.n	800a040 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800a036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800a040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	429a      	cmp	r2, r3
 800a04a:	d905      	bls.n	800a058 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800a04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a050:	4619      	mov	r1, r3
 800a052:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a054:	f000 f8ce 	bl	800a1f4 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a058:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a05a:	f001 f9a5 	bl	800b3a8 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800a05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a064:	647b      	str	r3, [r7, #68]	; 0x44
 800a066:	e007      	b.n	800a078 <_tx_mutex_get+0x1f8>
 800a068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a06a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f383 8810 	msr	PRIMASK, r3
}
 800a072:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800a074:	231d      	movs	r3, #29
 800a076:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800a078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3748      	adds	r7, #72	; 0x48
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	200056bc 	.word	0x200056bc
 800a088:	20005754 	.word	0x20005754
 800a08c:	08009af9 	.word	0x08009af9

0800a090 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b092      	sub	sp, #72	; 0x48
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a098:	f3ef 8310 	mrs	r3, PRIMASK
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800a0a0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0a2:	b672      	cpsid	i
    return(int_posture);
 800a0a4:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800a0a6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800a0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d805      	bhi.n	800a0c0 <_tx_mutex_prioritize+0x30>
 800a0b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	f383 8810 	msr	PRIMASK, r3
}
 800a0be:	e092      	b.n	800a1e6 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800a0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d114      	bne.n	800a0f0 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d202      	bcs.n	800a0e4 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0e2:	619a      	str	r2, [r3, #24]
 800a0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0e6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	f383 8810 	msr	PRIMASK, r3
}
 800a0ee:	e07a      	b.n	800a1e6 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800a0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800a0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fe:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800a100:	4b3b      	ldr	r3, [pc, #236]	; (800a1f0 <_tx_mutex_prioritize+0x160>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	4a3a      	ldr	r2, [pc, #232]	; (800a1f0 <_tx_mutex_prioritize+0x160>)
 800a108:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800a10a:	2300      	movs	r3, #0
 800a10c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800a10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a116:	429a      	cmp	r2, r3
 800a118:	d201      	bcs.n	800a11e <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800a11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a11c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a120:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f383 8810 	msr	PRIMASK, r3
}
 800a128:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a12a:	f3ef 8310 	mrs	r3, PRIMASK
 800a12e:	617b      	str	r3, [r7, #20]
    return(posture);
 800a130:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a132:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a134:	b672      	cpsid	i
    return(int_posture);
 800a136:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800a138:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a140:	429a      	cmp	r2, r3
 800a142:	d002      	beq.n	800a14a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800a144:	2301      	movs	r3, #1
 800a146:	633b      	str	r3, [r7, #48]	; 0x30
 800a148:	e006      	b.n	800a158 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a150:	429a      	cmp	r2, r3
 800a152:	d001      	beq.n	800a158 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d103      	bne.n	800a166 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800a15e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a162:	643b      	str	r3, [r7, #64]	; 0x40
 800a164:	e00c      	b.n	800a180 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	69db      	ldr	r3, [r3, #28]
 800a170:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800a176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a17a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800a17c:	2300      	movs	r3, #0
 800a17e:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800a180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a184:	429a      	cmp	r2, r3
 800a186:	d1c2      	bne.n	800a10e <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800a188:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <_tx_mutex_prioritize+0x160>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	4a18      	ldr	r2, [pc, #96]	; (800a1f0 <_tx_mutex_prioritize+0x160>)
 800a190:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800a192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	429a      	cmp	r2, r3
 800a198:	d01d      	beq.n	800a1d6 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800a19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19e:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800a1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1a4:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1aa:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1b0:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800a1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1bc:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800a1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1c8:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1ce:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1d4:	619a      	str	r2, [r3, #24]
 800a1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	f383 8810 	msr	PRIMASK, r3
}
 800a1e0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a1e2:	f000 ffa7 	bl	800b134 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800a1e6:	2300      	movs	r3, #0
#endif
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3748      	adds	r7, #72	; 0x48
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	20005754 	.word	0x20005754

0800a1f4 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b090      	sub	sp, #64	; 0x40
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a202:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a206:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a208:	b672      	cpsid	i
    return(int_posture);
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800a20c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a212:	2b00      	cmp	r3, #0
 800a214:	d017      	beq.n	800a246 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	429a      	cmp	r2, r3
 800a226:	d905      	bls.n	800a234 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	63da      	str	r2, [r3, #60]	; 0x3c
 800a232:	e002      	b.n	800a23a <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	63da      	str	r2, [r3, #60]	; 0x3c
 800a23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	f383 8810 	msr	PRIMASK, r3
}
 800a244:	e089      	b.n	800a35a <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800a246:	4b47      	ldr	r3, [pc, #284]	; (800a364 <_tx_mutex_priority_change+0x170>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a250:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800a252:	4b45      	ldr	r3, [pc, #276]	; (800a368 <_tx_mutex_priority_change+0x174>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3302      	adds	r3, #2
 800a258:	4a43      	ldr	r2, [pc, #268]	; (800a368 <_tx_mutex_priority_change+0x174>)
 800a25a:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	220e      	movs	r2, #14
 800a260:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	64da      	str	r2, [r3, #76]	; 0x4c
 800a26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a270:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	f383 8810 	msr	PRIMASK, r3
}
 800a278:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 f894 	bl	800b3a8 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a280:	f3ef 8310 	mrs	r3, PRIMASK
 800a284:	623b      	str	r3, [r7, #32]
    return(posture);
 800a286:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a288:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a28a:	b672      	cpsid	i
    return(int_posture);
 800a28c:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d905      	bls.n	800a2ae <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	63da      	str	r2, [r3, #60]	; 0x3c
 800a2ac:	e002      	b.n	800a2b4 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	683a      	ldr	r2, [r7, #0]
 800a2b2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f383 8810 	msr	PRIMASK, r3
}
 800a2be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 ff71 	bl	800b1a8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ca:	617b      	str	r3, [r7, #20]
    return(posture);
 800a2cc:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a2ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2d0:	b672      	cpsid	i
    return(int_posture);
 800a2d2:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800a2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800a2d6:	4b23      	ldr	r3, [pc, #140]	; (800a364 <_tx_mutex_priority_change+0x170>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d034      	beq.n	800a34e <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d130      	bne.n	800a34e <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d811      	bhi.n	800a31c <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d126      	bne.n	800a34e <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800a300:	4a18      	ldr	r2, [pc, #96]	; (800a364 <_tx_mutex_priority_change+0x170>)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800a306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d21f      	bcs.n	800a34e <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a312:	4916      	ldr	r1, [pc, #88]	; (800a36c <_tx_mutex_priority_change+0x178>)
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a31a:	e018      	b.n	800a34e <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	429a      	cmp	r2, r3
 800a326:	d212      	bcs.n	800a34e <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	429a      	cmp	r2, r3
 800a332:	d80c      	bhi.n	800a34e <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800a334:	4a0b      	ldr	r2, [pc, #44]	; (800a364 <_tx_mutex_priority_change+0x170>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800a33a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d205      	bcs.n	800a34e <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a346:	4909      	ldr	r1, [pc, #36]	; (800a36c <_tx_mutex_priority_change+0x178>)
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a34e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a350:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f383 8810 	msr	PRIMASK, r3
}
 800a358:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800a35a:	bf00      	nop
 800a35c:	3740      	adds	r7, #64	; 0x40
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	200056c0 	.word	0x200056c0
 800a368:	20005754 	.word	0x20005754
 800a36c:	200056d4 	.word	0x200056d4

0800a370 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b0a6      	sub	sp, #152	; 0x98
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800a378:	2320      	movs	r3, #32
 800a37a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a37e:	f3ef 8310 	mrs	r3, PRIMASK
 800a382:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800a384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800a386:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800a388:	b672      	cpsid	i
    return(int_posture);
 800a38a:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800a38c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 81ff 	beq.w	800a798 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800a3a0:	4ba3      	ldr	r3, [pc, #652]	; (800a630 <_tx_mutex_put+0x2c0>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d00d      	beq.n	800a3cc <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800a3b0:	4ba0      	ldr	r3, [pc, #640]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d109      	bne.n	800a3cc <_tx_mutex_put+0x5c>
 800a3b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3bc:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a3be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3c0:	f383 8810 	msr	PRIMASK, r3
}
 800a3c4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800a3c6:	231e      	movs	r3, #30
 800a3c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800a3cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3d0:	2b20      	cmp	r3, #32
 800a3d2:	f040 81eb 	bne.w	800a7ac <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	1e5a      	subs	r2, r3, #1
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00a      	beq.n	800a3fe <_tx_mutex_put+0x8e>
 800a3e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3ec:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3f0:	f383 8810 	msr	PRIMASK, r3
}
 800a3f4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3fc:	e1d6      	b.n	800a7ac <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800a3fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <_tx_mutex_put+0xaa>
 800a404:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a408:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40c:	f383 8810 	msr	PRIMASK, r3
}
 800a410:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800a412:	2300      	movs	r3, #0
 800a414:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a418:	e1c8      	b.n	800a7ac <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800a41a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a41c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a420:	1e5a      	subs	r2, r3, #1
 800a422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a424:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800a428:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a42a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d104      	bne.n	800a43c <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800a432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a434:	2200      	movs	r2, #0
 800a436:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800a43a:	e019      	b.n	800a470 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800a44a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a44e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a450:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800a452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a454:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a458:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800a45a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a45c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	429a      	cmp	r2, r3
 800a464:	d104      	bne.n	800a470 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800a466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a468:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a46c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d110      	bne.n	800a49a <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10c      	bne.n	800a49a <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	60da      	str	r2, [r3, #12]
 800a486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a48a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a48c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a48e:	f383 8810 	msr	PRIMASK, r3
}
 800a492:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800a494:	2300      	movs	r3, #0
 800a496:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800a49a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	f040 8184 	bne.w	800a7ac <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800a4aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d155      	bne.n	800a568 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a4bc:	4b5d      	ldr	r3, [pc, #372]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	4a5c      	ldr	r2, [pc, #368]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a4ca:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ce:	f383 8810 	msr	PRIMASK, r3
}
 800a4d2:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a4d4:	2320      	movs	r3, #32
 800a4d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800a4da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a4e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800a4e4:	e01f      	b.n	800a526 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800a4e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d10b      	bne.n	800a508 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800a4f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d904      	bls.n	800a508 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800a4fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800a508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800a512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a518:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d102      	bne.n	800a526 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800a520:	2300      	movs	r3, #0
 800a522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800a526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1db      	bne.n	800a4e6 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a52e:	f3ef 8310 	mrs	r3, PRIMASK
 800a532:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800a534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800a536:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800a538:	b672      	cpsid	i
    return(int_posture);
 800a53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a53c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800a540:	4b3c      	ldr	r3, [pc, #240]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3b01      	subs	r3, #1
 800a546:	4a3b      	ldr	r2, [pc, #236]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a548:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800a54a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a54c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a550:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800a554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d203      	bcs.n	800a568 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800a560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d920      	bls.n	800a5b2 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d11c      	bne.n	800a5b2 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800a578:	4b2e      	ldr	r3, [pc, #184]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3301      	adds	r3, #1
 800a57e:	4a2d      	ldr	r2, [pc, #180]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a580:	6013      	str	r3, [r2, #0]
 800a582:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a586:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	f383 8810 	msr	PRIMASK, r3
}
 800a58e:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff fd7d 	bl	800a090 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a596:	f3ef 8310 	mrs	r3, PRIMASK
 800a59a:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800a59e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5a0:	b672      	cpsid	i
    return(int_posture);
 800a5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800a5a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800a5a8:	4b22      	ldr	r3, [pc, #136]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	4a21      	ldr	r2, [pc, #132]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a5b0:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d13e      	bne.n	800a638 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a5ba:	4b1e      	ldr	r3, [pc, #120]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	4a1c      	ldr	r2, [pc, #112]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5cc:	f383 8810 	msr	PRIMASK, r3
}
 800a5d0:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d006      	beq.n	800a5f4 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff fe00 	bl	800a1f4 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a5f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5f8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800a5fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5fe:	b672      	cpsid	i
    return(int_posture);
 800a600:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800a602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800a606:	4b0b      	ldr	r3, [pc, #44]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	4a09      	ldr	r2, [pc, #36]	; (800a634 <_tx_mutex_put+0x2c4>)
 800a60e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	60da      	str	r2, [r3, #12]
 800a616:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a61a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	f383 8810 	msr	PRIMASK, r3
}
 800a622:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800a624:	f000 fd86 	bl	800b134 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a62e:	e0bd      	b.n	800a7ac <_tx_mutex_put+0x43c>
 800a630:	200056bc 	.word	0x200056bc
 800a634:	20005754 	.word	0x20005754
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d10a      	bne.n	800a65c <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800a64e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2220      	movs	r2, #32
 800a65a:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800a65c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a65e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a662:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800a664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10a      	bne.n	800a680 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800a66a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	631a      	str	r2, [r3, #48]	; 0x30
 800a67e:	e016      	b.n	800a6ae <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800a680:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a682:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800a68a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a690:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800a692:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800a69a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a6a4:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a6ac:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800a6ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a6c2:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	1e5a      	subs	r2, r3, #1
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800a6d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d103      	bne.n	800a6e2 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	619a      	str	r2, [r3, #24]
 800a6e0:	e00e      	b.n	800a700 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800a6e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e6:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6ec:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800a6ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f2:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800a6f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6f8:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800a6fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6fe:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a702:	2200      	movs	r2, #0
 800a704:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800a706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a708:	2200      	movs	r2, #0
 800a70a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a70e:	4b2a      	ldr	r3, [pc, #168]	; (800a7b8 <_tx_mutex_put+0x448>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3301      	adds	r3, #1
 800a714:	4a28      	ldr	r2, [pc, #160]	; (800a7b8 <_tx_mutex_put+0x448>)
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a71c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	f383 8810 	msr	PRIMASK, r3
}
 800a724:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d12d      	bne.n	800a78a <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d01c      	beq.n	800a770 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7ff fcaa 	bl	800a090 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a73c:	f3ef 8310 	mrs	r3, PRIMASK
 800a740:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a742:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a744:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a746:	b672      	cpsid	i
    return(int_posture);
 800a748:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800a74a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	699b      	ldr	r3, [r3, #24]
 800a752:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 800a754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800a75a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	629a      	str	r2, [r3, #40]	; 0x28
 800a762:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a766:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	f383 8810 	msr	PRIMASK, r3
}
 800a76e:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800a770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d005      	beq.n	800a78a <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800a77e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800a782:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800a786:	f7ff fd35 	bl	800a1f4 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800a78a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a78c:	f000 fd0c 	bl	800b1a8 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800a790:	2300      	movs	r3, #0
 800a792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a796:	e009      	b.n	800a7ac <_tx_mutex_put+0x43c>
 800a798:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a79c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f383 8810 	msr	PRIMASK, r3
}
 800a7a4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800a7a6:	231e      	movs	r3, #30
 800a7a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 800a7ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3798      	adds	r7, #152	; 0x98
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20005754 	.word	0x20005754

0800a7bc <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08e      	sub	sp, #56	; 0x38
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a7c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ca:	623b      	str	r3, [r7, #32]
    return(posture);
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a7ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a7d0:	b672      	cpsid	i
    return(int_posture);
 800a7d2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800a7d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7da:	4a33      	ldr	r2, [pc, #204]	; (800a8a8 <_tx_semaphore_cleanup+0xec>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d158      	bne.n	800a892 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d152      	bne.n	800a892 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d04c      	beq.n	800a892 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a2b      	ldr	r2, [pc, #172]	; (800a8ac <_tx_semaphore_cleanup+0xf0>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d147      	bne.n	800a892 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d043      	beq.n	800a892 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	1e5a      	subs	r2, r3, #1
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	2200      	movs	r2, #0
 800a82a:	60da      	str	r2, [r3, #12]
 800a82c:	e013      	b.n	800a856 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a832:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a838:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a844:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d102      	bne.n	800a856 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a854:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	2b06      	cmp	r3, #6
 800a85c:	d119      	bne.n	800a892 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	220d      	movs	r2, #13
 800a862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a866:	4b12      	ldr	r3, [pc, #72]	; (800a8b0 <_tx_semaphore_cleanup+0xf4>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3301      	adds	r3, #1
 800a86c:	4a10      	ldr	r2, [pc, #64]	; (800a8b0 <_tx_semaphore_cleanup+0xf4>)
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a872:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	f383 8810 	msr	PRIMASK, r3
}
 800a87a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fc93 	bl	800b1a8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a882:	f3ef 8310 	mrs	r3, PRIMASK
 800a886:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a888:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a88a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a88c:	b672      	cpsid	i
    return(int_posture);
 800a88e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a890:	637b      	str	r3, [r7, #52]	; 0x34
 800a892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a894:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f383 8810 	msr	PRIMASK, r3
}
 800a89c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a89e:	bf00      	nop
 800a8a0:	3738      	adds	r7, #56	; 0x38
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0800a7bd 	.word	0x0800a7bd
 800a8ac:	53454d41 	.word	0x53454d41
 800a8b0:	20005754 	.word	0x20005754

0800a8b4 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08a      	sub	sp, #40	; 0x28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800a8c0:	221c      	movs	r2, #28
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f007 f86d 	bl	80119a4 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8d6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8da:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a8dc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a8de:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8e0:	b672      	cpsid	i
    return(int_posture);
 800a8e2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800a8e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4a18      	ldr	r2, [pc, #96]	; (800a94c <_tx_semaphore_create+0x98>)
 800a8ea:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800a8ec:	4b18      	ldr	r3, [pc, #96]	; (800a950 <_tx_semaphore_create+0x9c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d109      	bne.n	800a908 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800a8f4:	4a17      	ldr	r2, [pc, #92]	; (800a954 <_tx_semaphore_create+0xa0>)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	619a      	str	r2, [r3, #24]
 800a906:	e011      	b.n	800a92c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800a908:	4b12      	ldr	r3, [pc, #72]	; (800a954 <_tx_semaphore_create+0xa0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800a90e:	6a3b      	ldr	r3, [r7, #32]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	69fa      	ldr	r2, [r7, #28]
 800a924:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6a3a      	ldr	r2, [r7, #32]
 800a92a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800a92c:	4b08      	ldr	r3, [pc, #32]	; (800a950 <_tx_semaphore_create+0x9c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3301      	adds	r3, #1
 800a932:	4a07      	ldr	r2, [pc, #28]	; (800a950 <_tx_semaphore_create+0x9c>)
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f383 8810 	msr	PRIMASK, r3
}
 800a940:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3728      	adds	r7, #40	; 0x28
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	53454d41 	.word	0x53454d41
 800a950:	20005688 	.word	0x20005688
 800a954:	20005684 	.word	0x20005684

0800a958 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b092      	sub	sp, #72	; 0x48
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a960:	f3ef 8310 	mrs	r3, PRIMASK
 800a964:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a968:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a96a:	b672      	cpsid	i
    return(int_posture);
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800a976:	4b3d      	ldr	r3, [pc, #244]	; (800aa6c <_tx_semaphore_delete+0x114>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3b01      	subs	r3, #1
 800a97c:	4a3b      	ldr	r2, [pc, #236]	; (800aa6c <_tx_semaphore_delete+0x114>)
 800a97e:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800a980:	4b3a      	ldr	r3, [pc, #232]	; (800aa6c <_tx_semaphore_delete+0x114>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d103      	bne.n	800a990 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800a988:	4b39      	ldr	r3, [pc, #228]	; (800aa70 <_tx_semaphore_delete+0x118>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	e013      	b.n	800a9b8 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 800a99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9a0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 800a9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9a6:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800a9a8:	4b31      	ldr	r3, [pc, #196]	; (800aa70 <_tx_semaphore_delete+0x118>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d102      	bne.n	800a9b8 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 800a9b2:	4a2f      	ldr	r2, [pc, #188]	; (800aa70 <_tx_semaphore_delete+0x118>)
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a9b8:	4b2e      	ldr	r3, [pc, #184]	; (800aa74 <_tx_semaphore_delete+0x11c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	4a2d      	ldr	r2, [pc, #180]	; (800aa74 <_tx_semaphore_delete+0x11c>)
 800a9c0:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	611a      	str	r2, [r3, #16]
 800a9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	f383 8810 	msr	PRIMASK, r3
}
 800a9e4:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800a9e6:	e024      	b.n	800aa32 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800a9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800a9f2:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a9f4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a9f6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9f8:	b672      	cpsid	i
    return(int_posture);
 800a9fa:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa00:	2200      	movs	r2, #0
 800aa02:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800aa04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa06:	2201      	movs	r2, #1
 800aa08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800aa0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa10:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800aa12:	4b18      	ldr	r3, [pc, #96]	; (800aa74 <_tx_semaphore_delete+0x11c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3301      	adds	r3, #1
 800aa18:	4a16      	ldr	r2, [pc, #88]	; (800aa74 <_tx_semaphore_delete+0x11c>)
 800aa1a:	6013      	str	r3, [r2, #0]
 800aa1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa1e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	f383 8810 	msr	PRIMASK, r3
}
 800aa26:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800aa28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800aa2a:	f000 fbbd 	bl	800b1a8 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa30:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 800aa32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1d7      	bne.n	800a9e8 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa38:	f3ef 8310 	mrs	r3, PRIMASK
 800aa3c:	613b      	str	r3, [r7, #16]
    return(posture);
 800aa3e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800aa40:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa42:	b672      	cpsid	i
    return(int_posture);
 800aa44:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800aa48:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <_tx_semaphore_delete+0x11c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	4a09      	ldr	r2, [pc, #36]	; (800aa74 <_tx_semaphore_delete+0x11c>)
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa54:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f383 8810 	msr	PRIMASK, r3
}
 800aa5c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800aa5e:	f000 fb69 	bl	800b134 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3748      	adds	r7, #72	; 0x48
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	20005688 	.word	0x20005688
 800aa70:	20005684 	.word	0x20005684
 800aa74:	20005754 	.word	0x20005754

0800aa78 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b08e      	sub	sp, #56	; 0x38
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800aa82:	2300      	movs	r3, #0
 800aa84:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa86:	f3ef 8310 	mrs	r3, PRIMASK
 800aa8a:	623b      	str	r3, [r7, #32]
    return(posture);
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800aa8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa90:	b672      	cpsid	i
    return(int_posture);
 800aa92:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800aa94:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00a      	beq.n	800aab4 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	1e5a      	subs	r2, r3, #1
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	609a      	str	r2, [r3, #8]
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	f383 8810 	msr	PRIMASK, r3
}
 800aab2:	e068      	b.n	800ab86 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d05d      	beq.n	800ab76 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800aaba:	4b35      	ldr	r3, [pc, #212]	; (800ab90 <_tx_semaphore_get+0x118>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d008      	beq.n	800aad4 <_tx_semaphore_get+0x5c>
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f383 8810 	msr	PRIMASK, r3
}
 800aacc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800aace:	230d      	movs	r3, #13
 800aad0:	637b      	str	r3, [r7, #52]	; 0x34
 800aad2:	e058      	b.n	800ab86 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800aad4:	4b2f      	ldr	r3, [pc, #188]	; (800ab94 <_tx_semaphore_get+0x11c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	4a2e      	ldr	r2, [pc, #184]	; (800ab98 <_tx_semaphore_get+0x120>)
 800aade:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800aae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d109      	bne.n	800ab10 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab00:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab06:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800ab08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab0c:	675a      	str	r2, [r3, #116]	; 0x74
 800ab0e:	e011      	b.n	800ab34 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab1a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab20:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab26:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab2c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab32:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab40:	2206      	movs	r2, #6
 800ab42:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ab44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab46:	2201      	movs	r2, #1
 800ab48:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ab4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <_tx_semaphore_get+0x118>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3301      	adds	r3, #1
 800ab56:	4a0e      	ldr	r2, [pc, #56]	; (800ab90 <_tx_semaphore_get+0x118>)
 800ab58:	6013      	str	r3, [r2, #0]
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	f383 8810 	msr	PRIMASK, r3
}
 800ab64:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ab66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab68:	f000 fc1e 	bl	800b3a8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab72:	637b      	str	r3, [r7, #52]	; 0x34
 800ab74:	e007      	b.n	800ab86 <_tx_semaphore_get+0x10e>
 800ab76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab78:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f383 8810 	msr	PRIMASK, r3
}
 800ab80:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800ab82:	230d      	movs	r3, #13
 800ab84:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800ab86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3738      	adds	r7, #56	; 0x38
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20005754 	.word	0x20005754
 800ab94:	200056bc 	.word	0x200056bc
 800ab98:	0800a7bd 	.word	0x0800a7bd

0800ab9c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08c      	sub	sp, #48	; 0x30
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aba4:	f3ef 8310 	mrs	r3, PRIMASK
 800aba8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800abaa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800abac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800abae:	b672      	cpsid	i
    return(int_posture);
 800abb0:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800abba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	609a      	str	r2, [r3, #8]
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abcc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	f383 8810 	msr	PRIMASK, r3
}
 800abd4:	e033      	b.n	800ac3e <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	3b01      	subs	r3, #1
 800abe0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d103      	bne.n	800abf0 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	60da      	str	r2, [r3, #12]
 800abee:	e00e      	b.n	800ac0e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf4:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a3a      	ldr	r2, [r7, #32]
 800abfa:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac00:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	69fa      	ldr	r2, [r7, #28]
 800ac06:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	6a3a      	ldr	r2, [r7, #32]
 800ac0c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac12:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	2200      	movs	r2, #0
 800ac18:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800ac22:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <_tx_semaphore_put+0xac>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3301      	adds	r3, #1
 800ac28:	4a07      	ldr	r2, [pc, #28]	; (800ac48 <_tx_semaphore_put+0xac>)
 800ac2a:	6013      	str	r3, [r2, #0]
 800ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f383 8810 	msr	PRIMASK, r3
}
 800ac36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ac38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac3a:	f000 fab5 	bl	800b1a8 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3730      	adds	r7, #48	; 0x30
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	20005754 	.word	0x20005754

0800ac4c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b092      	sub	sp, #72	; 0x48
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800ac5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac60:	21ef      	movs	r1, #239	; 0xef
 800ac62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ac64:	f006 fe9e 	bl	80119a4 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800ac68:	22b0      	movs	r2, #176	; 0xb0
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f006 fe99 	bl	80119a4 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac88:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac8e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac94:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aca2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aca8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2220      	movs	r2, #32
 800acae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800acb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800acb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acb8:	3b01      	subs	r3, #1
 800acba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acbc:	4413      	add	r3, r2
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acc4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800acc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acca:	429a      	cmp	r2, r3
 800accc:	d007      	beq.n	800acde <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800acdc:	e006      	b.n	800acec <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ace2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ace8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2203      	movs	r2, #3
 800acf0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	4a48      	ldr	r2, [pc, #288]	; (800ae18 <_tx_thread_create+0x1cc>)
 800acf6:	655a      	str	r2, [r3, #84]	; 0x54
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800acfe:	4947      	ldr	r1, [pc, #284]	; (800ae1c <_tx_thread_create+0x1d0>)
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7f5 fb1d 	bl	8000340 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad06:	f3ef 8310 	mrs	r3, PRIMASK
 800ad0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800ad0e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad10:	b672      	cpsid	i
    return(int_posture);
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ad14:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	4a41      	ldr	r2, [pc, #260]	; (800ae20 <_tx_thread_create+0x1d4>)
 800ad1a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800ad1c:	4b41      	ldr	r3, [pc, #260]	; (800ae24 <_tx_thread_create+0x1d8>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10b      	bne.n	800ad3c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800ad24:	4a40      	ldr	r2, [pc, #256]	; (800ae28 <_tx_thread_create+0x1dc>)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ad3a:	e016      	b.n	800ad6a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800ad3c:	4b3a      	ldr	r3, [pc, #232]	; (800ae28 <_tx_thread_create+0x1dc>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800ad42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad48:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ad4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800ad6a:	4b2e      	ldr	r3, [pc, #184]	; (800ae24 <_tx_thread_create+0x1d8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	4a2c      	ldr	r2, [pc, #176]	; (800ae24 <_tx_thread_create+0x1d8>)
 800ad72:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ad74:	4b2d      	ldr	r3, [pc, #180]	; (800ae2c <_tx_thread_create+0x1e0>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	4a2c      	ldr	r2, [pc, #176]	; (800ae2c <_tx_thread_create+0x1e0>)
 800ad7c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800ad7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d129      	bne.n	800add8 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ad84:	f3ef 8305 	mrs	r3, IPSR
 800ad88:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800ad8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ad8c:	4b28      	ldr	r3, [pc, #160]	; (800ae30 <_tx_thread_create+0x1e4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ad96:	d30d      	bcc.n	800adb4 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ad98:	4b26      	ldr	r3, [pc, #152]	; (800ae34 <_tx_thread_create+0x1e8>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ad9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d009      	beq.n	800adb8 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ada4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada8:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800adaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adb0:	63da      	str	r2, [r3, #60]	; 0x3c
 800adb2:	e001      	b.n	800adb8 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800adb4:	2300      	movs	r3, #0
 800adb6:	647b      	str	r3, [r7, #68]	; 0x44
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	f383 8810 	msr	PRIMASK, r3
}
 800adc2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 f9ef 	bl	800b1a8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800adca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d01e      	beq.n	800ae0e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800add0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800add2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800add4:	63da      	str	r2, [r3, #60]	; 0x3c
 800add6:	e01a      	b.n	800ae0e <_tx_thread_create+0x1c2>
 800add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adda:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f383 8810 	msr	PRIMASK, r3
}
 800ade2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ade4:	f3ef 8310 	mrs	r3, PRIMASK
 800ade8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800adea:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800adec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800adee:	b672      	cpsid	i
    return(int_posture);
 800adf0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800adf2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800adf4:	4b0d      	ldr	r3, [pc, #52]	; (800ae2c <_tx_thread_create+0x1e0>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	4a0c      	ldr	r2, [pc, #48]	; (800ae2c <_tx_thread_create+0x1e0>)
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae00:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	f383 8810 	msr	PRIMASK, r3
}
 800ae08:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ae0a:	f000 f993 	bl	800b134 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3748      	adds	r7, #72	; 0x48
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	0800b67d 	.word	0x0800b67d
 800ae1c:	0800af9d 	.word	0x0800af9d
 800ae20:	54485244 	.word	0x54485244
 800ae24:	200056c8 	.word	0x200056c8
 800ae28:	200056c4 	.word	0x200056c4
 800ae2c:	20005754 	.word	0x20005754
 800ae30:	2000000c 	.word	0x2000000c
 800ae34:	200056c0 	.word	0x200056c0

0800ae38 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b087      	sub	sp, #28
 800ae3c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae3e:	f3ef 8310 	mrs	r3, PRIMASK
 800ae42:	60bb      	str	r3, [r7, #8]
    return(posture);
 800ae44:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800ae46:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae48:	b672      	cpsid	i
    return(int_posture);
 800ae4a:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800ae4c:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ae4e:	4b08      	ldr	r3, [pc, #32]	; (800ae70 <_tx_thread_identify+0x38>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	613b      	str	r3, [r7, #16]
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f383 8810 	msr	PRIMASK, r3
}
 800ae5e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800ae60:	693b      	ldr	r3, [r7, #16]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	371c      	adds	r7, #28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	200056bc 	.word	0x200056bc

0800ae74 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b089      	sub	sp, #36	; 0x24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae82:	f3ef 8310 	mrs	r3, PRIMASK
 800ae86:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ae88:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ae8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae8c:	b672      	cpsid	i
    return(int_posture);
 800ae8e:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800ae90:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d003      	beq.n	800aea0 <_tx_thread_info_get+0x2c>
    {

        *name =  thread_ptr -> tx_thread_name;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <_tx_thread_info_get+0x3a>
    {

        *state =  thread_ptr -> tx_thread_state;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d003      	beq.n	800aebc <_tx_thread_info_get+0x48>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d004      	beq.n	800aecc <_tx_thread_info_get+0x58>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800aec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeca:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d004      	beq.n	800aedc <_tx_thread_info_get+0x68>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 800aedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d003      	beq.n	800aeea <_tx_thread_info_get+0x76>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	699a      	ldr	r2, [r3, #24]
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 800aeea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d004      	beq.n	800aefa <_tx_thread_info_get+0x86>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef8:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 800aefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <_tx_thread_info_get+0x94>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af06:	601a      	str	r2, [r3, #0]
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f383 8810 	msr	PRIMASK, r3
}
 800af12:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3724      	adds	r7, #36	; 0x24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
	...

0800af24 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800af28:	4b12      	ldr	r3, [pc, #72]	; (800af74 <_tx_thread_initialize+0x50>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800af2e:	4b12      	ldr	r3, [pc, #72]	; (800af78 <_tx_thread_initialize+0x54>)
 800af30:	2200      	movs	r2, #0
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	4b11      	ldr	r3, [pc, #68]	; (800af7c <_tx_thread_initialize+0x58>)
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800af3a:	4b11      	ldr	r3, [pc, #68]	; (800af80 <_tx_thread_initialize+0x5c>)
 800af3c:	2220      	movs	r2, #32
 800af3e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800af40:	2280      	movs	r2, #128	; 0x80
 800af42:	2100      	movs	r1, #0
 800af44:	480f      	ldr	r0, [pc, #60]	; (800af84 <_tx_thread_initialize+0x60>)
 800af46:	f006 fd2d 	bl	80119a4 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800af4a:	4b0f      	ldr	r3, [pc, #60]	; (800af88 <_tx_thread_initialize+0x64>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800af50:	4b0e      	ldr	r3, [pc, #56]	; (800af8c <_tx_thread_initialize+0x68>)
 800af52:	2200      	movs	r2, #0
 800af54:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800af56:	4b0e      	ldr	r3, [pc, #56]	; (800af90 <_tx_thread_initialize+0x6c>)
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800af5c:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <_tx_thread_initialize+0x70>)
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800af62:	4b0d      	ldr	r3, [pc, #52]	; (800af98 <_tx_thread_initialize+0x74>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800af6a:	4a0b      	ldr	r2, [pc, #44]	; (800af98 <_tx_thread_initialize+0x74>)
 800af6c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800af6e:	bf00      	nop
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	200056bc 	.word	0x200056bc
 800af78:	200056c0 	.word	0x200056c0
 800af7c:	200056cc 	.word	0x200056cc
 800af80:	200056d0 	.word	0x200056d0
 800af84:	200056d4 	.word	0x200056d4
 800af88:	200056c4 	.word	0x200056c4
 800af8c:	200056c8 	.word	0x200056c8
 800af90:	20005754 	.word	0x20005754
 800af94:	20005758 	.word	0x20005758
 800af98:	2000575c 	.word	0x2000575c

0800af9c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800afa2:	4b21      	ldr	r3, [pc, #132]	; (800b028 <_tx_thread_shell_entry+0x8c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afac:	69fa      	ldr	r2, [r7, #28]
 800afae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800afb0:	4610      	mov	r0, r2
 800afb2:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800afb4:	4b1d      	ldr	r3, [pc, #116]	; (800b02c <_tx_thread_shell_entry+0x90>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d003      	beq.n	800afc4 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800afbc:	4b1b      	ldr	r3, [pc, #108]	; (800b02c <_tx_thread_shell_entry+0x90>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	69f8      	ldr	r0, [r7, #28]
 800afc2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afc4:	f3ef 8310 	mrs	r3, PRIMASK
 800afc8:	607b      	str	r3, [r7, #4]
    return(posture);
 800afca:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800afcc:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800afce:	b672      	cpsid	i
    return(int_posture);
 800afd0:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800afd2:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	2201      	movs	r2, #1
 800afd8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	2201      	movs	r2, #1
 800afde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	2200      	movs	r2, #0
 800afe4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800afe6:	4b12      	ldr	r3, [pc, #72]	; (800b030 <_tx_thread_shell_entry+0x94>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	4a10      	ldr	r2, [pc, #64]	; (800b030 <_tx_thread_shell_entry+0x94>)
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f383 8810 	msr	PRIMASK, r3
}
 800affa:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800affc:	f3ef 8314 	mrs	r3, CONTROL
 800b000:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800b002:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800b004:	617b      	str	r3, [r7, #20]
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f023 0304 	bic.w	r3, r3, #4
 800b00c:	617b      	str	r3, [r7, #20]
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f383 8814 	msr	CONTROL, r3
}
 800b018:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800b01a:	69f8      	ldr	r0, [r7, #28]
 800b01c:	f000 f9c4 	bl	800b3a8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b020:	bf00      	nop
 800b022:	3720      	adds	r7, #32
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	200056bc 	.word	0x200056bc
 800b02c:	20005758 	.word	0x20005758
 800b030:	20005754 	.word	0x20005754

0800b034 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b08e      	sub	sp, #56	; 0x38
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b03c:	f3ef 8310 	mrs	r3, PRIMASK
 800b040:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800b042:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800b044:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b046:	b672      	cpsid	i
    return(int_posture);
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b04a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b04c:	4b35      	ldr	r3, [pc, #212]	; (800b124 <_tx_thread_sleep+0xf0>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800b052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b054:	2b00      	cmp	r3, #0
 800b056:	d108      	bne.n	800b06a <_tx_thread_sleep+0x36>
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	f383 8810 	msr	PRIMASK, r3
}
 800b062:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b064:	2313      	movs	r3, #19
 800b066:	637b      	str	r3, [r7, #52]	; 0x34
 800b068:	e056      	b.n	800b118 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b06a:	f3ef 8305 	mrs	r3, IPSR
 800b06e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b070:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b072:	4b2d      	ldr	r3, [pc, #180]	; (800b128 <_tx_thread_sleep+0xf4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4313      	orrs	r3, r2
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d008      	beq.n	800b08e <_tx_thread_sleep+0x5a>
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	f383 8810 	msr	PRIMASK, r3
}
 800b086:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b088:	2313      	movs	r3, #19
 800b08a:	637b      	str	r3, [r7, #52]	; 0x34
 800b08c:	e044      	b.n	800b118 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	4a26      	ldr	r2, [pc, #152]	; (800b12c <_tx_thread_sleep+0xf8>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d108      	bne.n	800b0a8 <_tx_thread_sleep+0x74>
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f383 8810 	msr	PRIMASK, r3
}
 800b0a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b0a2:	2313      	movs	r3, #19
 800b0a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b0a6:	e037      	b.n	800b118 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d108      	bne.n	800b0c0 <_tx_thread_sleep+0x8c>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	f383 8810 	msr	PRIMASK, r3
}
 800b0b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b0be:	e02b      	b.n	800b118 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b0c0:	4b1b      	ldr	r3, [pc, #108]	; (800b130 <_tx_thread_sleep+0xfc>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d008      	beq.n	800b0da <_tx_thread_sleep+0xa6>
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f383 8810 	msr	PRIMASK, r3
}
 800b0d2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800b0d4:	2313      	movs	r3, #19
 800b0d6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0d8:	e01e      	b.n	800b118 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0dc:	2204      	movs	r2, #4
 800b0de:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800b0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b0f4:	4b0e      	ldr	r3, [pc, #56]	; (800b130 <_tx_thread_sleep+0xfc>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	4a0d      	ldr	r2, [pc, #52]	; (800b130 <_tx_thread_sleep+0xfc>)
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	f383 8810 	msr	PRIMASK, r3
}
 800b108:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b10c:	f000 f94c 	bl	800b3a8 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b116:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800b118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3738      	adds	r7, #56	; 0x38
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	200056bc 	.word	0x200056bc
 800b128:	2000000c 	.word	0x2000000c
 800b12c:	20005804 	.word	0x20005804
 800b130:	20005754 	.word	0x20005754

0800b134 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800b134:	b480      	push	{r7}
 800b136:	b089      	sub	sp, #36	; 0x24
 800b138:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b13a:	4b17      	ldr	r3, [pc, #92]	; (800b198 <_tx_thread_system_preempt_check+0x64>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d121      	bne.n	800b18a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800b146:	4b15      	ldr	r3, [pc, #84]	; (800b19c <_tx_thread_system_preempt_check+0x68>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800b14c:	4b14      	ldr	r3, [pc, #80]	; (800b1a0 <_tx_thread_system_preempt_check+0x6c>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	429a      	cmp	r2, r3
 800b158:	d017      	beq.n	800b18a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b15a:	4b12      	ldr	r3, [pc, #72]	; (800b1a4 <_tx_thread_system_preempt_check+0x70>)
 800b15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b160:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b162:	f3ef 8305 	mrs	r3, IPSR
 800b166:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b168:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10c      	bne.n	800b188 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b16e:	f3ef 8310 	mrs	r3, PRIMASK
 800b172:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b174:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800b176:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b178:	b662      	cpsie	i
}
 800b17a:	bf00      	nop
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f383 8810 	msr	PRIMASK, r3
}
 800b186:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800b188:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800b18a:	bf00      	nop
 800b18c:	3724      	adds	r7, #36	; 0x24
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	20005754 	.word	0x20005754
 800b19c:	200056bc 	.word	0x200056bc
 800b1a0:	200056c0 	.word	0x200056c0
 800b1a4:	e000ed04 	.word	0xe000ed04

0800b1a8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b096      	sub	sp, #88	; 0x58
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1b0:	f3ef 8310 	mrs	r3, PRIMASK
 800b1b4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800b1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800b1b8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1ba:	b672      	cpsid	i
    return(int_posture);
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b1be:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	334c      	adds	r3, #76	; 0x4c
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fb91 	bl	800b8f4 <_tx_timer_system_deactivate>
 800b1d2:	e002      	b.n	800b1da <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b1da:	4b6c      	ldr	r3, [pc, #432]	; (800b38c <_tx_thread_system_resume+0x1e4>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	4a6a      	ldr	r2, [pc, #424]	; (800b38c <_tx_thread_system_resume+0x1e4>)
 800b1e2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f040 8083 	bne.w	800b2f4 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 8097 	beq.w	800b326 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d172      	bne.n	800b2e6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800b20c:	4a60      	ldr	r2, [pc, #384]	; (800b390 <_tx_thread_system_resume+0x1e8>)
 800b20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b214:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800b216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d154      	bne.n	800b2c6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800b21c:	495c      	ldr	r1, [pc, #368]	; (800b390 <_tx_thread_system_resume+0x1e8>)
 800b21e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800b232:	2201      	movs	r2, #1
 800b234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b236:	fa02 f303 	lsl.w	r3, r2, r3
 800b23a:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800b23c:	4b55      	ldr	r3, [pc, #340]	; (800b394 <_tx_thread_system_resume+0x1ec>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b242:	4313      	orrs	r3, r2
 800b244:	4a53      	ldr	r2, [pc, #332]	; (800b394 <_tx_thread_system_resume+0x1ec>)
 800b246:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800b248:	4b53      	ldr	r3, [pc, #332]	; (800b398 <_tx_thread_system_resume+0x1f0>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b24e:	429a      	cmp	r2, r3
 800b250:	d269      	bcs.n	800b326 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800b252:	4a51      	ldr	r2, [pc, #324]	; (800b398 <_tx_thread_system_resume+0x1f0>)
 800b254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b256:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800b258:	4b50      	ldr	r3, [pc, #320]	; (800b39c <_tx_thread_system_resume+0x1f4>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800b25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b260:	2b00      	cmp	r3, #0
 800b262:	d103      	bne.n	800b26c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800b264:	4a4d      	ldr	r2, [pc, #308]	; (800b39c <_tx_thread_system_resume+0x1f4>)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6013      	str	r3, [r2, #0]
 800b26a:	e05c      	b.n	800b326 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800b26c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b270:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b272:	429a      	cmp	r2, r3
 800b274:	d257      	bcs.n	800b326 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800b276:	4a49      	ldr	r2, [pc, #292]	; (800b39c <_tx_thread_system_resume+0x1f4>)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b27e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b282:	f383 8810 	msr	PRIMASK, r3
}
 800b286:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b288:	4b40      	ldr	r3, [pc, #256]	; (800b38c <_tx_thread_system_resume+0x1e4>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800b28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b290:	2b00      	cmp	r3, #0
 800b292:	d174      	bne.n	800b37e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b294:	4b42      	ldr	r3, [pc, #264]	; (800b3a0 <_tx_thread_system_resume+0x1f8>)
 800b296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b29a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b29c:	f3ef 8305 	mrs	r3, IPSR
 800b2a0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10c      	bne.n	800b2c2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2ac:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800b2b0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b2b2:	b662      	cpsie	i
}
 800b2b4:	bf00      	nop
 800b2b6:	6a3b      	ldr	r3, [r7, #32]
 800b2b8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	f383 8810 	msr	PRIMASK, r3
}
 800b2c0:	bf00      	nop
}
 800b2c2:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800b2c4:	e05b      	b.n	800b37e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800b2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ca:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800b2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800b2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2dc:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2e2:	621a      	str	r2, [r3, #32]
 800b2e4:	e01f      	b.n	800b326 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2203      	movs	r2, #3
 800b2f0:	631a      	str	r2, [r3, #48]	; 0x30
 800b2f2:	e018      	b.n	800b326 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d014      	beq.n	800b326 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b300:	2b02      	cmp	r3, #2
 800b302:	d010      	beq.n	800b326 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d106      	bne.n	800b31a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	631a      	str	r2, [r3, #48]	; 0x30
 800b318:	e005      	b.n	800b326 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2203      	movs	r2, #3
 800b324:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b326:	4b1f      	ldr	r3, [pc, #124]	; (800b3a4 <_tx_thread_system_resume+0x1fc>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b32c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b32e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	f383 8810 	msr	PRIMASK, r3
}
 800b336:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b338:	4b18      	ldr	r3, [pc, #96]	; (800b39c <_tx_thread_system_resume+0x1f4>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b33e:	429a      	cmp	r2, r3
 800b340:	d020      	beq.n	800b384 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <_tx_thread_system_resume+0x1e4>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800b348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d11a      	bne.n	800b384 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b34e:	4b14      	ldr	r3, [pc, #80]	; (800b3a0 <_tx_thread_system_resume+0x1f8>)
 800b350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b354:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b356:	f3ef 8305 	mrs	r3, IPSR
 800b35a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b35c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10f      	bne.n	800b382 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b362:	f3ef 8310 	mrs	r3, PRIMASK
 800b366:	613b      	str	r3, [r7, #16]
    return(posture);
 800b368:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800b36a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b36c:	b662      	cpsie	i
}
 800b36e:	bf00      	nop
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f383 8810 	msr	PRIMASK, r3
}
 800b37a:	bf00      	nop
}
 800b37c:	e001      	b.n	800b382 <_tx_thread_system_resume+0x1da>
                                return;
 800b37e:	bf00      	nop
 800b380:	e000      	b.n	800b384 <_tx_thread_system_resume+0x1dc>
 800b382:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800b384:	3758      	adds	r7, #88	; 0x58
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20005754 	.word	0x20005754
 800b390:	200056d4 	.word	0x200056d4
 800b394:	200056cc 	.word	0x200056cc
 800b398:	200056d0 	.word	0x200056d0
 800b39c:	200056c0 	.word	0x200056c0
 800b3a0:	e000ed04 	.word	0xe000ed04
 800b3a4:	200056bc 	.word	0x200056bc

0800b3a8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b09e      	sub	sp, #120	; 0x78
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b3b0:	4b81      	ldr	r3, [pc, #516]	; (800b5b8 <_tx_thread_system_suspend+0x210>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800b3bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800b3be:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3c0:	b672      	cpsid	i
    return(int_posture);
 800b3c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b3c4:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d112      	bne.n	800b3f4 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3d2:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800b3d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d008      	beq.n	800b3ec <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800b3da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e0:	d004      	beq.n	800b3ec <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	334c      	adds	r3, #76	; 0x4c
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 fa22 	bl	800b830 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	4a72      	ldr	r2, [pc, #456]	; (800b5bc <_tx_thread_system_suspend+0x214>)
 800b3f2:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b3f4:	4b72      	ldr	r3, [pc, #456]	; (800b5c0 <_tx_thread_system_suspend+0x218>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	4a71      	ldr	r2, [pc, #452]	; (800b5c0 <_tx_thread_system_suspend+0x218>)
 800b3fc:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b402:	2b01      	cmp	r3, #1
 800b404:	f040 80a6 	bne.w	800b554 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b412:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800b41a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d015      	beq.n	800b44e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b426:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800b428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b42a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b42c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800b42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b430:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b432:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800b434:	4a63      	ldr	r2, [pc, #396]	; (800b5c4 <_tx_thread_system_suspend+0x21c>)
 800b436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d157      	bne.n	800b4f2 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800b442:	4960      	ldr	r1, [pc, #384]	; (800b5c4 <_tx_thread_system_suspend+0x21c>)
 800b444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b446:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b44c:	e051      	b.n	800b4f2 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800b44e:	4a5d      	ldr	r2, [pc, #372]	; (800b5c4 <_tx_thread_system_suspend+0x21c>)
 800b450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b452:	2100      	movs	r1, #0
 800b454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800b458:	2201      	movs	r2, #1
 800b45a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b45c:	fa02 f303 	lsl.w	r3, r2, r3
 800b460:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800b462:	4b59      	ldr	r3, [pc, #356]	; (800b5c8 <_tx_thread_system_suspend+0x220>)
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b468:	43db      	mvns	r3, r3
 800b46a:	4013      	ands	r3, r2
 800b46c:	4a56      	ldr	r2, [pc, #344]	; (800b5c8 <_tx_thread_system_suspend+0x220>)
 800b46e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800b470:	2300      	movs	r3, #0
 800b472:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800b474:	4b54      	ldr	r3, [pc, #336]	; (800b5c8 <_tx_thread_system_suspend+0x220>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800b47a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d12b      	bne.n	800b4d8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b480:	4b52      	ldr	r3, [pc, #328]	; (800b5cc <_tx_thread_system_suspend+0x224>)
 800b482:	2220      	movs	r2, #32
 800b484:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800b486:	4b52      	ldr	r3, [pc, #328]	; (800b5d0 <_tx_thread_system_suspend+0x228>)
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b48e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b492:	f383 8810 	msr	PRIMASK, r3
}
 800b496:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b498:	4b49      	ldr	r3, [pc, #292]	; (800b5c0 <_tx_thread_system_suspend+0x218>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800b49e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f040 8081 	bne.w	800b5a8 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b4a6:	4b4b      	ldr	r3, [pc, #300]	; (800b5d4 <_tx_thread_system_suspend+0x22c>)
 800b4a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ac:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4ae:	f3ef 8305 	mrs	r3, IPSR
 800b4b2:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800b4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10c      	bne.n	800b4d4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4ba:	f3ef 8310 	mrs	r3, PRIMASK
 800b4be:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800b4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800b4c2:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b4c4:	b662      	cpsie	i
}
 800b4c6:	bf00      	nop
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ce:	f383 8810 	msr	PRIMASK, r3
}
 800b4d2:	bf00      	nop
}
 800b4d4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800b4d6:	e067      	b.n	800b5a8 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800b4d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4da:	fa93 f3a3 	rbit	r3, r3
 800b4de:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4e2:	fab3 f383 	clz	r3, r3
 800b4e6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800b4e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4ec:	4413      	add	r3, r2
 800b4ee:	4a37      	ldr	r2, [pc, #220]	; (800b5cc <_tx_thread_system_suspend+0x224>)
 800b4f0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800b4f2:	4b37      	ldr	r3, [pc, #220]	; (800b5d0 <_tx_thread_system_suspend+0x228>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d12b      	bne.n	800b554 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b4fc:	4b33      	ldr	r3, [pc, #204]	; (800b5cc <_tx_thread_system_suspend+0x224>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a30      	ldr	r2, [pc, #192]	; (800b5c4 <_tx_thread_system_suspend+0x21c>)
 800b502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b506:	4a32      	ldr	r2, [pc, #200]	; (800b5d0 <_tx_thread_system_suspend+0x228>)
 800b508:	6013      	str	r3, [r2, #0]
 800b50a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b50c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	f383 8810 	msr	PRIMASK, r3
}
 800b514:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b516:	4b2a      	ldr	r3, [pc, #168]	; (800b5c0 <_tx_thread_system_suspend+0x218>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800b51c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d144      	bne.n	800b5ac <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b522:	4b2c      	ldr	r3, [pc, #176]	; (800b5d4 <_tx_thread_system_suspend+0x22c>)
 800b524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b528:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b52a:	f3ef 8305 	mrs	r3, IPSR
 800b52e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10c      	bne.n	800b550 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b536:	f3ef 8310 	mrs	r3, PRIMASK
 800b53a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b540:	b662      	cpsie	i
}
 800b542:	bf00      	nop
 800b544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b546:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b548:	6a3b      	ldr	r3, [r7, #32]
 800b54a:	f383 8810 	msr	PRIMASK, r3
}
 800b54e:	bf00      	nop
}
 800b550:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800b552:	e02b      	b.n	800b5ac <_tx_thread_system_suspend+0x204>
 800b554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b556:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	f383 8810 	msr	PRIMASK, r3
}
 800b55e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b560:	4b1b      	ldr	r3, [pc, #108]	; (800b5d0 <_tx_thread_system_suspend+0x228>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b566:	429a      	cmp	r2, r3
 800b568:	d022      	beq.n	800b5b0 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b56a:	4b15      	ldr	r3, [pc, #84]	; (800b5c0 <_tx_thread_system_suspend+0x218>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800b570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b572:	2b00      	cmp	r3, #0
 800b574:	d11c      	bne.n	800b5b0 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b576:	4b17      	ldr	r3, [pc, #92]	; (800b5d4 <_tx_thread_system_suspend+0x22c>)
 800b578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b57c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b57e:	f3ef 8305 	mrs	r3, IPSR
 800b582:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b584:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10c      	bne.n	800b5a4 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b58a:	f3ef 8310 	mrs	r3, PRIMASK
 800b58e:	617b      	str	r3, [r7, #20]
    return(posture);
 800b590:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800b592:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b594:	b662      	cpsie	i
}
 800b596:	bf00      	nop
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f383 8810 	msr	PRIMASK, r3
}
 800b5a2:	bf00      	nop
}
 800b5a4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800b5a6:	e003      	b.n	800b5b0 <_tx_thread_system_suspend+0x208>
                return;
 800b5a8:	bf00      	nop
 800b5aa:	e002      	b.n	800b5b2 <_tx_thread_system_suspend+0x20a>
            return;
 800b5ac:	bf00      	nop
 800b5ae:	e000      	b.n	800b5b2 <_tx_thread_system_suspend+0x20a>
    return;
 800b5b0:	bf00      	nop
}
 800b5b2:	3778      	adds	r7, #120	; 0x78
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	200056bc 	.word	0x200056bc
 800b5bc:	20005cc0 	.word	0x20005cc0
 800b5c0:	20005754 	.word	0x20005754
 800b5c4:	200056d4 	.word	0x200056d4
 800b5c8:	200056cc 	.word	0x200056cc
 800b5cc:	200056d0 	.word	0x200056d0
 800b5d0:	200056c0 	.word	0x200056c0
 800b5d4:	e000ed04 	.word	0xe000ed04

0800b5d8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b087      	sub	sp, #28
 800b5dc:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b5de:	4b21      	ldr	r3, [pc, #132]	; (800b664 <_tx_thread_time_slice+0x8c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b5e8:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b5ec:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5ee:	b672      	cpsid	i
    return(int_posture);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800b5f2:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b5f4:	4b1c      	ldr	r3, [pc, #112]	; (800b668 <_tx_thread_time_slice+0x90>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d024      	beq.n	800b64a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b604:	2b00      	cmp	r3, #0
 800b606:	d120      	bne.n	800b64a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	69da      	ldr	r2, [r3, #28]
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	699b      	ldr	r3, [r3, #24]
 800b614:	4a15      	ldr	r2, [pc, #84]	; (800b66c <_tx_thread_time_slice+0x94>)
 800b616:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	697a      	ldr	r2, [r7, #20]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d013      	beq.n	800b64a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d10d      	bne.n	800b64a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	6a12      	ldr	r2, [r2, #32]
 800b636:	490e      	ldr	r1, [pc, #56]	; (800b670 <_tx_thread_time_slice+0x98>)
 800b638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b63c:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <_tx_thread_time_slice+0x9c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a0b      	ldr	r2, [pc, #44]	; (800b670 <_tx_thread_time_slice+0x98>)
 800b642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b646:	4a0c      	ldr	r2, [pc, #48]	; (800b678 <_tx_thread_time_slice+0xa0>)
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f383 8810 	msr	PRIMASK, r3
}
 800b654:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800b656:	bf00      	nop
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	200056bc 	.word	0x200056bc
 800b668:	20005764 	.word	0x20005764
 800b66c:	20005cc0 	.word	0x20005cc0
 800b670:	200056d4 	.word	0x200056d4
 800b674:	200056d0 	.word	0x200056d0
 800b678:	200056c0 	.word	0x200056c0

0800b67c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08a      	sub	sp, #40	; 0x28
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b688:	f3ef 8310 	mrs	r3, PRIMASK
 800b68c:	617b      	str	r3, [r7, #20]
    return(posture);
 800b68e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b690:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b692:	b672      	cpsid	i
    return(int_posture);
 800b694:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b696:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69c:	2b04      	cmp	r3, #4
 800b69e:	d10e      	bne.n	800b6be <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800b6a0:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <_tx_thread_timeout+0x74>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	4a12      	ldr	r2, [pc, #72]	; (800b6f0 <_tx_thread_timeout+0x74>)
 800b6a8:	6013      	str	r3, [r2, #0]
 800b6aa:	6a3b      	ldr	r3, [r7, #32]
 800b6ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f383 8810 	msr	PRIMASK, r3
}
 800b6b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b6b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6b8:	f7ff fd76 	bl	800b1a8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b6bc:	e013      	b.n	800b6e6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6c2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b6ca:	61bb      	str	r3, [r7, #24]
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
 800b6ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f383 8810 	msr	PRIMASK, r3
}
 800b6d6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d003      	beq.n	800b6e6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	69b9      	ldr	r1, [r7, #24]
 800b6e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6e4:	4798      	blx	r3
}
 800b6e6:	bf00      	nop
 800b6e8:	3728      	adds	r7, #40	; 0x28
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20005754 	.word	0x20005754

0800b6f4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b6fe:	607b      	str	r3, [r7, #4]
    return(posture);
 800b700:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b702:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b704:	b672      	cpsid	i
    return(int_posture);
 800b706:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b708:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b70a:	4b09      	ldr	r3, [pc, #36]	; (800b730 <_tx_timer_expiration_process+0x3c>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3301      	adds	r3, #1
 800b710:	4a07      	ldr	r2, [pc, #28]	; (800b730 <_tx_timer_expiration_process+0x3c>)
 800b712:	6013      	str	r3, [r2, #0]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	f383 8810 	msr	PRIMASK, r3
}
 800b71e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b720:	4804      	ldr	r0, [pc, #16]	; (800b734 <_tx_timer_expiration_process+0x40>)
 800b722:	f7ff fd41 	bl	800b1a8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b726:	bf00      	nop
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20005754 	.word	0x20005754
 800b734:	20005804 	.word	0x20005804

0800b738 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800b738:	b590      	push	{r4, r7, lr}
 800b73a:	b089      	sub	sp, #36	; 0x24
 800b73c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800b73e:	4b28      	ldr	r3, [pc, #160]	; (800b7e0 <_tx_timer_initialize+0xa8>)
 800b740:	2200      	movs	r2, #0
 800b742:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800b744:	4b27      	ldr	r3, [pc, #156]	; (800b7e4 <_tx_timer_initialize+0xac>)
 800b746:	2200      	movs	r2, #0
 800b748:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b74a:	4b27      	ldr	r3, [pc, #156]	; (800b7e8 <_tx_timer_initialize+0xb0>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800b750:	4b26      	ldr	r3, [pc, #152]	; (800b7ec <_tx_timer_initialize+0xb4>)
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800b756:	4b26      	ldr	r3, [pc, #152]	; (800b7f0 <_tx_timer_initialize+0xb8>)
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800b75c:	2280      	movs	r2, #128	; 0x80
 800b75e:	2100      	movs	r1, #0
 800b760:	4824      	ldr	r0, [pc, #144]	; (800b7f4 <_tx_timer_initialize+0xbc>)
 800b762:	f006 f91f 	bl	80119a4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800b766:	4b24      	ldr	r3, [pc, #144]	; (800b7f8 <_tx_timer_initialize+0xc0>)
 800b768:	4a22      	ldr	r2, [pc, #136]	; (800b7f4 <_tx_timer_initialize+0xbc>)
 800b76a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800b76c:	4b23      	ldr	r3, [pc, #140]	; (800b7fc <_tx_timer_initialize+0xc4>)
 800b76e:	4a21      	ldr	r2, [pc, #132]	; (800b7f4 <_tx_timer_initialize+0xbc>)
 800b770:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800b772:	4b23      	ldr	r3, [pc, #140]	; (800b800 <_tx_timer_initialize+0xc8>)
 800b774:	4a23      	ldr	r2, [pc, #140]	; (800b804 <_tx_timer_initialize+0xcc>)
 800b776:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800b778:	4b21      	ldr	r3, [pc, #132]	; (800b800 <_tx_timer_initialize+0xc8>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3304      	adds	r3, #4
 800b77e:	4a20      	ldr	r2, [pc, #128]	; (800b800 <_tx_timer_initialize+0xc8>)
 800b780:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800b782:	4b21      	ldr	r3, [pc, #132]	; (800b808 <_tx_timer_initialize+0xd0>)
 800b784:	4a21      	ldr	r2, [pc, #132]	; (800b80c <_tx_timer_initialize+0xd4>)
 800b786:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800b788:	4b21      	ldr	r3, [pc, #132]	; (800b810 <_tx_timer_initialize+0xd8>)
 800b78a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b78e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800b790:	4b20      	ldr	r3, [pc, #128]	; (800b814 <_tx_timer_initialize+0xdc>)
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800b796:	4b1c      	ldr	r3, [pc, #112]	; (800b808 <_tx_timer_initialize+0xd0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a1d      	ldr	r2, [pc, #116]	; (800b810 <_tx_timer_initialize+0xd8>)
 800b79c:	6812      	ldr	r2, [r2, #0]
 800b79e:	491d      	ldr	r1, [pc, #116]	; (800b814 <_tx_timer_initialize+0xdc>)
 800b7a0:	6809      	ldr	r1, [r1, #0]
 800b7a2:	481c      	ldr	r0, [pc, #112]	; (800b814 <_tx_timer_initialize+0xdc>)
 800b7a4:	6800      	ldr	r0, [r0, #0]
 800b7a6:	2400      	movs	r4, #0
 800b7a8:	9405      	str	r4, [sp, #20]
 800b7aa:	2400      	movs	r4, #0
 800b7ac:	9404      	str	r4, [sp, #16]
 800b7ae:	9003      	str	r0, [sp, #12]
 800b7b0:	9102      	str	r1, [sp, #8]
 800b7b2:	9201      	str	r2, [sp, #4]
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	4b18      	ldr	r3, [pc, #96]	; (800b818 <_tx_timer_initialize+0xe0>)
 800b7b8:	4a18      	ldr	r2, [pc, #96]	; (800b81c <_tx_timer_initialize+0xe4>)
 800b7ba:	4919      	ldr	r1, [pc, #100]	; (800b820 <_tx_timer_initialize+0xe8>)
 800b7bc:	4819      	ldr	r0, [pc, #100]	; (800b824 <_tx_timer_initialize+0xec>)
 800b7be:	f7ff fa45 	bl	800ac4c <_tx_thread_create>
 800b7c2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1e5      	bne.n	800b796 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800b7ca:	4b17      	ldr	r3, [pc, #92]	; (800b828 <_tx_timer_initialize+0xf0>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800b7d0:	4b16      	ldr	r3, [pc, #88]	; (800b82c <_tx_timer_initialize+0xf4>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd90      	pop	{r4, r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	20005760 	.word	0x20005760
 800b7e4:	20005cc0 	.word	0x20005cc0
 800b7e8:	20005764 	.word	0x20005764
 800b7ec:	200057f4 	.word	0x200057f4
 800b7f0:	20005800 	.word	0x20005800
 800b7f4:	20005768 	.word	0x20005768
 800b7f8:	200057e8 	.word	0x200057e8
 800b7fc:	200057f0 	.word	0x200057f0
 800b800:	200057ec 	.word	0x200057ec
 800b804:	200057e4 	.word	0x200057e4
 800b808:	200058b4 	.word	0x200058b4
 800b80c:	200058c0 	.word	0x200058c0
 800b810:	200058b8 	.word	0x200058b8
 800b814:	200058bc 	.word	0x200058bc
 800b818:	4154494d 	.word	0x4154494d
 800b81c:	0800b965 	.word	0x0800b965
 800b820:	08012620 	.word	0x08012620
 800b824:	20005804 	.word	0x20005804
 800b828:	200057f8 	.word	0x200057f8
 800b82c:	200057fc 	.word	0x200057fc

0800b830 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b830:	b480      	push	{r7}
 800b832:	b089      	sub	sp, #36	; 0x24
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d04a      	beq.n	800b8da <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84a:	d046      	beq.n	800b8da <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d142      	bne.n	800b8da <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2b20      	cmp	r3, #32
 800b858:	d902      	bls.n	800b860 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800b85a:	231f      	movs	r3, #31
 800b85c:	61bb      	str	r3, [r7, #24]
 800b85e:	e002      	b.n	800b866 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	3b01      	subs	r3, #1
 800b864:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800b866:	4b20      	ldr	r3, [pc, #128]	; (800b8e8 <_tx_timer_system_activate+0xb8>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4413      	add	r3, r2
 800b870:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b872:	4b1e      	ldr	r3, [pc, #120]	; (800b8ec <_tx_timer_system_activate+0xbc>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69fa      	ldr	r2, [r7, #28]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d30b      	bcc.n	800b894 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800b87c:	4b1b      	ldr	r3, [pc, #108]	; (800b8ec <_tx_timer_system_activate+0xbc>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	69fa      	ldr	r2, [r7, #28]
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	109b      	asrs	r3, r3, #2
 800b886:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800b888:	4b19      	ldr	r3, [pc, #100]	; (800b8f0 <_tx_timer_system_activate+0xc0>)
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4413      	add	r3, r2
 800b892:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d109      	bne.n	800b8b0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	e011      	b.n	800b8d4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	69fa      	ldr	r2, [r7, #28]
 800b8d8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800b8da:	bf00      	nop
 800b8dc:	3724      	adds	r7, #36	; 0x24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	200057f0 	.word	0x200057f0
 800b8ec:	200057ec 	.word	0x200057ec
 800b8f0:	200057e8 	.word	0x200057e8

0800b8f4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b087      	sub	sp, #28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d026      	beq.n	800b956 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	429a      	cmp	r2, r3
 800b914:	d108      	bne.n	800b928 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d117      	bne.n	800b950 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2200      	movs	r2, #0
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	e013      	b.n	800b950 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	693a      	ldr	r2, [r7, #16]
 800b938:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d105      	bne.n	800b950 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	619a      	str	r2, [r3, #24]
    }
}
 800b956:	bf00      	nop
 800b958:	371c      	adds	r7, #28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
	...

0800b964 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b098      	sub	sp, #96	; 0x60
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800b96c:	2300      	movs	r3, #0
 800b96e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a73      	ldr	r2, [pc, #460]	; (800bb40 <_tx_timer_thread_entry+0x1dc>)
 800b974:	4293      	cmp	r3, r2
 800b976:	f040 80de 	bne.w	800bb36 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b97a:	f3ef 8310 	mrs	r3, PRIMASK
 800b97e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800b980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800b982:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b984:	b672      	cpsid	i
    return(int_posture);
 800b986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800b988:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800b98a:	4b6e      	ldr	r3, [pc, #440]	; (800bb44 <_tx_timer_thread_entry+0x1e0>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f107 020c 	add.w	r2, r7, #12
 800b99e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800b9a0:	4b68      	ldr	r3, [pc, #416]	; (800bb44 <_tx_timer_thread_entry+0x1e0>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800b9a8:	4b66      	ldr	r3, [pc, #408]	; (800bb44 <_tx_timer_thread_entry+0x1e0>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4a65      	ldr	r2, [pc, #404]	; (800bb44 <_tx_timer_thread_entry+0x1e0>)
 800b9b0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800b9b2:	4b64      	ldr	r3, [pc, #400]	; (800bb44 <_tx_timer_thread_entry+0x1e0>)
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	4b64      	ldr	r3, [pc, #400]	; (800bb48 <_tx_timer_thread_entry+0x1e4>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d103      	bne.n	800b9c6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800b9be:	4b63      	ldr	r3, [pc, #396]	; (800bb4c <_tx_timer_thread_entry+0x1e8>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a60      	ldr	r2, [pc, #384]	; (800bb44 <_tx_timer_thread_entry+0x1e0>)
 800b9c4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800b9c6:	4b62      	ldr	r3, [pc, #392]	; (800bb50 <_tx_timer_thread_entry+0x1ec>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9ce:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d2:	f383 8810 	msr	PRIMASK, r3
}
 800b9d6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b9dc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800b9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800b9e0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9e2:	b672      	cpsid	i
    return(int_posture);
 800b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800b9e6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800b9e8:	e07f      	b.n	800baea <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800b9f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d102      	bne.n	800ba06 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800ba00:	2300      	movs	r3, #0
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	e00e      	b.n	800ba24 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800ba06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ba0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba10:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ba12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba16:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800ba18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba1a:	f107 020c 	add.w	r2, r7, #12
 800ba1e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800ba20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba22:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ba24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b20      	cmp	r3, #32
 800ba2a:	d911      	bls.n	800ba50 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800ba2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800ba34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba36:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ba3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba3e:	f107 0208 	add.w	r2, r7, #8
 800ba42:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800ba44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba48:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800ba4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba4c:	60bb      	str	r3, [r7, #8]
 800ba4e:	e01a      	b.n	800ba86 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800ba50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800ba56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ba5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba5e:	685a      	ldr	r2, [r3, #4]
 800ba60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba62:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800ba64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d009      	beq.n	800ba80 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ba6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6e:	f107 0208 	add.w	r2, r7, #8
 800ba72:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ba74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba78:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800ba7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba7c:	60bb      	str	r3, [r7, #8]
 800ba7e:	e002      	b.n	800ba86 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ba80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba82:	2200      	movs	r2, #0
 800ba84:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800ba86:	4a33      	ldr	r2, [pc, #204]	; (800bb54 <_tx_timer_thread_entry+0x1f0>)
 800ba88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba92:	f383 8810 	msr	PRIMASK, r3
}
 800ba96:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800ba98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800ba9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800baa0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800baa2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800baa4:	f3ef 8310 	mrs	r3, PRIMASK
 800baa8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800baac:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800baae:	b672      	cpsid	i
    return(int_posture);
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bab2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800bab4:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <_tx_timer_thread_entry+0x1f0>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800babe:	429a      	cmp	r2, r3
 800bac0:	d105      	bne.n	800bace <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800bac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac4:	2200      	movs	r2, #0
 800bac6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800bac8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800baca:	f7ff feb1 	bl	800b830 <_tx_timer_system_activate>
 800bace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bad0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	f383 8810 	msr	PRIMASK, r3
}
 800bad8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bada:	f3ef 8310 	mrs	r3, PRIMASK
 800bade:	623b      	str	r3, [r7, #32]
    return(posture);
 800bae0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bae2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bae4:	b672      	cpsid	i
    return(int_posture);
 800bae6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bae8:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	f47f af7c 	bne.w	800b9ea <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800baf2:	4b17      	ldr	r3, [pc, #92]	; (800bb50 <_tx_timer_thread_entry+0x1ec>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d116      	bne.n	800bb28 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800bafa:	4b17      	ldr	r3, [pc, #92]	; (800bb58 <_tx_timer_thread_entry+0x1f4>)
 800bafc:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb00:	2203      	movs	r2, #3
 800bb02:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb06:	2201      	movs	r2, #1
 800bb08:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800bb0a:	4b14      	ldr	r3, [pc, #80]	; (800bb5c <_tx_timer_thread_entry+0x1f8>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	4a12      	ldr	r2, [pc, #72]	; (800bb5c <_tx_timer_thread_entry+0x1f8>)
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb16:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f383 8810 	msr	PRIMASK, r3
}
 800bb1e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bb20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bb22:	f7ff fc41 	bl	800b3a8 <_tx_thread_system_suspend>
 800bb26:	e728      	b.n	800b97a <_tx_timer_thread_entry+0x16>
 800bb28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	f383 8810 	msr	PRIMASK, r3
}
 800bb32:	bf00      	nop
            TX_DISABLE
 800bb34:	e721      	b.n	800b97a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800bb36:	bf00      	nop
 800bb38:	3760      	adds	r7, #96	; 0x60
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	4154494d 	.word	0x4154494d
 800bb44:	200057f0 	.word	0x200057f0
 800bb48:	200057ec 	.word	0x200057ec
 800bb4c:	200057e8 	.word	0x200057e8
 800bb50:	200057f4 	.word	0x200057f4
 800bb54:	20005800 	.word	0x20005800
 800bb58:	20005804 	.word	0x20005804
 800bb5c:	20005754 	.word	0x20005754

0800bb60 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b08a      	sub	sp, #40	; 0x28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
 800bb6c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bb78:	2302      	movs	r3, #2
 800bb7a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7c:	e029      	b.n	800bbd2 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a2d      	ldr	r2, [pc, #180]	; (800bc38 <_txe_byte_allocate+0xd8>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d002      	beq.n	800bb8e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bb88:	2302      	movs	r3, #2
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb8c:	e021      	b.n	800bbd2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d102      	bne.n	800bb9a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800bb94:	2303      	movs	r3, #3
 800bb96:	627b      	str	r3, [r7, #36]	; 0x24
 800bb98:	e01b      	b.n	800bbd2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d102      	bne.n	800bba6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bba0:	2305      	movs	r3, #5
 800bba2:	627b      	str	r3, [r7, #36]	; 0x24
 800bba4:	e015      	b.n	800bbd2 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	69db      	ldr	r3, [r3, #28]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d902      	bls.n	800bbb6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bbb0:	2305      	movs	r3, #5
 800bbb2:	627b      	str	r3, [r7, #36]	; 0x24
 800bbb4:	e00d      	b.n	800bbd2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00a      	beq.n	800bbd2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bbbc:	f3ef 8305 	mrs	r3, IPSR
 800bbc0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800bbc2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bbc4:	4b1d      	ldr	r3, [pc, #116]	; (800bc3c <_txe_byte_allocate+0xdc>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bbce:	2304      	movs	r3, #4
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d108      	bne.n	800bbea <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bbd8:	4b19      	ldr	r3, [pc, #100]	; (800bc40 <_txe_byte_allocate+0xe0>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	4a18      	ldr	r2, [pc, #96]	; (800bc44 <_txe_byte_allocate+0xe4>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d101      	bne.n	800bbea <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bbe6:	2313      	movs	r3, #19
 800bbe8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d114      	bne.n	800bc1a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bbf0:	f3ef 8305 	mrs	r3, IPSR
 800bbf4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bbf6:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bbf8:	4b10      	ldr	r3, [pc, #64]	; (800bc3c <_txe_byte_allocate+0xdc>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00b      	beq.n	800bc1a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc02:	f3ef 8305 	mrs	r3, IPSR
 800bc06:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bc08:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bc0a:	4b0c      	ldr	r3, [pc, #48]	; (800bc3c <_txe_byte_allocate+0xdc>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bc14:	d201      	bcs.n	800bc1a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bc16:	2313      	movs	r3, #19
 800bc18:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d106      	bne.n	800bc2e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	68b9      	ldr	r1, [r7, #8]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7fd f844 	bl	8008cb4 <_tx_byte_allocate>
 800bc2c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3728      	adds	r7, #40	; 0x28
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	42595445 	.word	0x42595445
 800bc3c:	2000000c 	.word	0x2000000c
 800bc40:	200056bc 	.word	0x200056bc
 800bc44:	20005804 	.word	0x20005804

0800bc48 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b092      	sub	sp, #72	; 0x48
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bc56:	2300      	movs	r3, #0
 800bc58:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d102      	bne.n	800bc66 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bc60:	2302      	movs	r3, #2
 800bc62:	647b      	str	r3, [r7, #68]	; 0x44
 800bc64:	e075      	b.n	800bd52 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800bc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc68:	2b34      	cmp	r3, #52	; 0x34
 800bc6a:	d002      	beq.n	800bc72 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc70:	e06f      	b.n	800bd52 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc72:	f3ef 8310 	mrs	r3, PRIMASK
 800bc76:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bc7a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc7c:	b672      	cpsid	i
    return(int_posture);
 800bc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bc80:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bc82:	4b3b      	ldr	r3, [pc, #236]	; (800bd70 <_txe_byte_pool_create+0x128>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3301      	adds	r3, #1
 800bc88:	4a39      	ldr	r2, [pc, #228]	; (800bd70 <_txe_byte_pool_create+0x128>)
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc92:	f383 8810 	msr	PRIMASK, r3
}
 800bc96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800bc98:	4b36      	ldr	r3, [pc, #216]	; (800bd74 <_txe_byte_pool_create+0x12c>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bc9e:	2300      	movs	r3, #0
 800bca0:	643b      	str	r3, [r7, #64]	; 0x40
 800bca2:	e009      	b.n	800bcb8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d00b      	beq.n	800bcc4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800bcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bcb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	643b      	str	r3, [r7, #64]	; 0x40
 800bcb8:	4b2f      	ldr	r3, [pc, #188]	; (800bd78 <_txe_byte_pool_create+0x130>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d3f0      	bcc.n	800bca4 <_txe_byte_pool_create+0x5c>
 800bcc2:	e000      	b.n	800bcc6 <_txe_byte_pool_create+0x7e>
                break;
 800bcc4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcc6:	f3ef 8310 	mrs	r3, PRIMASK
 800bcca:	623b      	str	r3, [r7, #32]
    return(posture);
 800bccc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bcce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcd0:	b672      	cpsid	i
    return(int_posture);
 800bcd2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bcd4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bcd6:	4b26      	ldr	r3, [pc, #152]	; (800bd70 <_txe_byte_pool_create+0x128>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	4a24      	ldr	r2, [pc, #144]	; (800bd70 <_txe_byte_pool_create+0x128>)
 800bcde:	6013      	str	r3, [r2, #0]
 800bce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	f383 8810 	msr	PRIMASK, r3
}
 800bcea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bcec:	f7ff fa22 	bl	800b134 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d102      	bne.n	800bcfe <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	647b      	str	r3, [r7, #68]	; 0x44
 800bcfc:	e029      	b.n	800bd52 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d102      	bne.n	800bd0a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800bd04:	2303      	movs	r3, #3
 800bd06:	647b      	str	r3, [r7, #68]	; 0x44
 800bd08:	e023      	b.n	800bd52 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b63      	cmp	r3, #99	; 0x63
 800bd0e:	d802      	bhi.n	800bd16 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800bd10:	2305      	movs	r3, #5
 800bd12:	647b      	str	r3, [r7, #68]	; 0x44
 800bd14:	e01d      	b.n	800bd52 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bd16:	4b19      	ldr	r3, [pc, #100]	; (800bd7c <_txe_byte_pool_create+0x134>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd1e:	4a18      	ldr	r2, [pc, #96]	; (800bd80 <_txe_byte_pool_create+0x138>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d101      	bne.n	800bd28 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bd24:	2313      	movs	r3, #19
 800bd26:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd28:	f3ef 8305 	mrs	r3, IPSR
 800bd2c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bd2e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bd30:	4b14      	ldr	r3, [pc, #80]	; (800bd84 <_txe_byte_pool_create+0x13c>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00b      	beq.n	800bd52 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd3a:	f3ef 8305 	mrs	r3, IPSR
 800bd3e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bd40:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bd42:	4b10      	ldr	r3, [pc, #64]	; (800bd84 <_txe_byte_pool_create+0x13c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bd4c:	d201      	bcs.n	800bd52 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800bd4e:	2313      	movs	r3, #19
 800bd50:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bd52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d106      	bne.n	800bd66 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	68b9      	ldr	r1, [r7, #8]
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f7fd f8ea 	bl	8008f38 <_tx_byte_pool_create>
 800bd64:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800bd66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3748      	adds	r7, #72	; 0x48
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	20005754 	.word	0x20005754
 800bd74:	200056ac 	.word	0x200056ac
 800bd78:	200056b0 	.word	0x200056b0
 800bd7c:	200056bc 	.word	0x200056bc
 800bd80:	20005804 	.word	0x20005804
 800bd84:	2000000c 	.word	0x2000000c

0800bd88 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b092      	sub	sp, #72	; 0x48
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bd94:	2300      	movs	r3, #0
 800bd96:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d102      	bne.n	800bda4 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bd9e:	2306      	movs	r3, #6
 800bda0:	647b      	str	r3, [r7, #68]	; 0x44
 800bda2:	e069      	b.n	800be78 <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b24      	cmp	r3, #36	; 0x24
 800bda8:	d002      	beq.n	800bdb0 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bdaa:	2306      	movs	r3, #6
 800bdac:	647b      	str	r3, [r7, #68]	; 0x44
 800bdae:	e063      	b.n	800be78 <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdb0:	f3ef 8310 	mrs	r3, PRIMASK
 800bdb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bdb8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdba:	b672      	cpsid	i
    return(int_posture);
 800bdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bdbe:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bdc0:	4b34      	ldr	r3, [pc, #208]	; (800be94 <_txe_event_flags_create+0x10c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	4a33      	ldr	r2, [pc, #204]	; (800be94 <_txe_event_flags_create+0x10c>)
 800bdc8:	6013      	str	r3, [r2, #0]
 800bdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdcc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	f383 8810 	msr	PRIMASK, r3
}
 800bdd4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800bdd6:	4b30      	ldr	r3, [pc, #192]	; (800be98 <_txe_event_flags_create+0x110>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800bddc:	2300      	movs	r3, #0
 800bdde:	643b      	str	r3, [r7, #64]	; 0x40
 800bde0:	e009      	b.n	800bdf6 <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d00b      	beq.n	800be02 <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800bdea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800bdf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	643b      	str	r3, [r7, #64]	; 0x40
 800bdf6:	4b29      	ldr	r3, [pc, #164]	; (800be9c <_txe_event_flags_create+0x114>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d3f0      	bcc.n	800bde2 <_txe_event_flags_create+0x5a>
 800be00:	e000      	b.n	800be04 <_txe_event_flags_create+0x7c>
                break;
 800be02:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be04:	f3ef 8310 	mrs	r3, PRIMASK
 800be08:	623b      	str	r3, [r7, #32]
    return(posture);
 800be0a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800be0c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be0e:	b672      	cpsid	i
    return(int_posture);
 800be10:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800be12:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800be14:	4b1f      	ldr	r3, [pc, #124]	; (800be94 <_txe_event_flags_create+0x10c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	3b01      	subs	r3, #1
 800be1a:	4a1e      	ldr	r2, [pc, #120]	; (800be94 <_txe_event_flags_create+0x10c>)
 800be1c:	6013      	str	r3, [r2, #0]
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be24:	f383 8810 	msr	PRIMASK, r3
}
 800be28:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800be2a:	f7ff f983 	bl	800b134 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be32:	429a      	cmp	r2, r3
 800be34:	d102      	bne.n	800be3c <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800be36:	2306      	movs	r3, #6
 800be38:	647b      	str	r3, [r7, #68]	; 0x44
 800be3a:	e01d      	b.n	800be78 <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800be3c:	4b18      	ldr	r3, [pc, #96]	; (800bea0 <_txe_event_flags_create+0x118>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800be42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be44:	4a17      	ldr	r2, [pc, #92]	; (800bea4 <_txe_event_flags_create+0x11c>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d101      	bne.n	800be4e <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800be4a:	2313      	movs	r3, #19
 800be4c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be4e:	f3ef 8305 	mrs	r3, IPSR
 800be52:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800be54:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800be56:	4b14      	ldr	r3, [pc, #80]	; (800bea8 <_txe_event_flags_create+0x120>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00b      	beq.n	800be78 <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be60:	f3ef 8305 	mrs	r3, IPSR
 800be64:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800be66:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800be68:	4b0f      	ldr	r3, [pc, #60]	; (800bea8 <_txe_event_flags_create+0x120>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800be72:	d201      	bcs.n	800be78 <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800be74:	2313      	movs	r3, #19
 800be76:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800be78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d104      	bne.n	800be88 <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800be7e:	68b9      	ldr	r1, [r7, #8]
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f7fd fa83 	bl	800938c <_tx_event_flags_create>
 800be86:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800be88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3748      	adds	r7, #72	; 0x48
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	20005754 	.word	0x20005754
 800be98:	20005694 	.word	0x20005694
 800be9c:	20005698 	.word	0x20005698
 800bea0:	200056bc 	.word	0x200056bc
 800bea4:	20005804 	.word	0x20005804
 800bea8:	2000000c 	.word	0x2000000c

0800beac <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08a      	sub	sp, #40	; 0x28
 800beb0:	af02      	add	r7, sp, #8
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
 800beb8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800beba:	2300      	movs	r3, #0
 800bebc:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d102      	bne.n	800beca <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bec4:	2306      	movs	r3, #6
 800bec6:	61fb      	str	r3, [r7, #28]
 800bec8:	e025      	b.n	800bf16 <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a1e      	ldr	r2, [pc, #120]	; (800bf48 <_txe_event_flags_get+0x9c>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d002      	beq.n	800beda <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bed4:	2306      	movs	r3, #6
 800bed6:	61fb      	str	r3, [r7, #28]
 800bed8:	e01d      	b.n	800bf16 <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d102      	bne.n	800bee6 <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800bee0:	2303      	movs	r3, #3
 800bee2:	61fb      	str	r3, [r7, #28]
 800bee4:	e017      	b.n	800bf16 <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d014      	beq.n	800bf16 <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800beec:	f3ef 8305 	mrs	r3, IPSR
 800bef0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bef2:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bef4:	4b15      	ldr	r3, [pc, #84]	; (800bf4c <_txe_event_flags_get+0xa0>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4313      	orrs	r3, r2
 800befa:	2b00      	cmp	r3, #0
 800befc:	d002      	beq.n	800bf04 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800befe:	2304      	movs	r3, #4
 800bf00:	61fb      	str	r3, [r7, #28]
 800bf02:	e008      	b.n	800bf16 <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800bf04:	4b12      	ldr	r3, [pc, #72]	; (800bf50 <_txe_event_flags_get+0xa4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	4a11      	ldr	r2, [pc, #68]	; (800bf54 <_txe_event_flags_get+0xa8>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d101      	bne.n	800bf16 <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800bf12:	2304      	movs	r3, #4
 800bf14:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d104      	bne.n	800bf26 <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d901      	bls.n	800bf26 <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 800bf22:	2308      	movs	r3, #8
 800bf24:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d108      	bne.n	800bf3e <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	68b9      	ldr	r1, [r7, #8]
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f7fd fa76 	bl	8009428 <_tx_event_flags_get>
 800bf3c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800bf3e:	69fb      	ldr	r3, [r7, #28]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3720      	adds	r7, #32
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	4456444e 	.word	0x4456444e
 800bf4c:	2000000c 	.word	0x2000000c
 800bf50:	200056bc 	.word	0x200056bc
 800bf54:	20005804 	.word	0x20005804

0800bf58 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bf64:	2300      	movs	r3, #0
 800bf66:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d102      	bne.n	800bf74 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bf6e:	2306      	movs	r3, #6
 800bf70:	617b      	str	r3, [r7, #20]
 800bf72:	e00f      	b.n	800bf94 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a0d      	ldr	r2, [pc, #52]	; (800bfb0 <_txe_event_flags_set+0x58>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d002      	beq.n	800bf84 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800bf7e:	2306      	movs	r3, #6
 800bf80:	617b      	str	r3, [r7, #20]
 800bf82:	e007      	b.n	800bf94 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d004      	beq.n	800bf94 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 800bf90:	2308      	movs	r3, #8
 800bf92:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d105      	bne.n	800bfa6 <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	68b9      	ldr	r1, [r7, #8]
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f7fd fb2c 	bl	80095fc <_tx_event_flags_set>
 800bfa4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800bfa6:	697b      	ldr	r3, [r7, #20]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	4456444e 	.word	0x4456444e

0800bfb4 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b092      	sub	sp, #72	; 0x48
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
 800bfc0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d102      	bne.n	800bfd2 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bfcc:	231c      	movs	r3, #28
 800bfce:	647b      	str	r3, [r7, #68]	; 0x44
 800bfd0:	e053      	b.n	800c07a <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b34      	cmp	r3, #52	; 0x34
 800bfd6:	d002      	beq.n	800bfde <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800bfd8:	231c      	movs	r3, #28
 800bfda:	647b      	str	r3, [r7, #68]	; 0x44
 800bfdc:	e04d      	b.n	800c07a <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfde:	f3ef 8310 	mrs	r3, PRIMASK
 800bfe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bfe6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bfe8:	b672      	cpsid	i
    return(int_posture);
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bfec:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bfee:	4b3a      	ldr	r3, [pc, #232]	; (800c0d8 <_txe_mutex_create+0x124>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3301      	adds	r3, #1
 800bff4:	4a38      	ldr	r2, [pc, #224]	; (800c0d8 <_txe_mutex_create+0x124>)
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	f383 8810 	msr	PRIMASK, r3
}
 800c002:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 800c004:	4b35      	ldr	r3, [pc, #212]	; (800c0dc <_txe_mutex_create+0x128>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800c00a:	2300      	movs	r3, #0
 800c00c:	643b      	str	r3, [r7, #64]	; 0x40
 800c00e:	e009      	b.n	800c024 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c014:	429a      	cmp	r2, r3
 800c016:	d00b      	beq.n	800c030 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800c018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c01a:	6a1b      	ldr	r3, [r3, #32]
 800c01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800c01e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c020:	3301      	adds	r3, #1
 800c022:	643b      	str	r3, [r7, #64]	; 0x40
 800c024:	4b2e      	ldr	r3, [pc, #184]	; (800c0e0 <_txe_mutex_create+0x12c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d3f0      	bcc.n	800c010 <_txe_mutex_create+0x5c>
 800c02e:	e000      	b.n	800c032 <_txe_mutex_create+0x7e>
                break;
 800c030:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c032:	f3ef 8310 	mrs	r3, PRIMASK
 800c036:	623b      	str	r3, [r7, #32]
    return(posture);
 800c038:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c03a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c03c:	b672      	cpsid	i
    return(int_posture);
 800c03e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c040:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c042:	4b25      	ldr	r3, [pc, #148]	; (800c0d8 <_txe_mutex_create+0x124>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3b01      	subs	r3, #1
 800c048:	4a23      	ldr	r2, [pc, #140]	; (800c0d8 <_txe_mutex_create+0x124>)
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c052:	f383 8810 	msr	PRIMASK, r3
}
 800c056:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c058:	f7ff f86c 	bl	800b134 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c060:	429a      	cmp	r2, r3
 800c062:	d102      	bne.n	800c06a <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 800c064:	231c      	movs	r3, #28
 800c066:	647b      	str	r3, [r7, #68]	; 0x44
 800c068:	e007      	b.n	800c07a <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d004      	beq.n	800c07a <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 800c076:	231f      	movs	r3, #31
 800c078:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c07a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d11d      	bne.n	800c0bc <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c080:	4b18      	ldr	r3, [pc, #96]	; (800c0e4 <_txe_mutex_create+0x130>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c088:	4a17      	ldr	r2, [pc, #92]	; (800c0e8 <_txe_mutex_create+0x134>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d101      	bne.n	800c092 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c08e:	2313      	movs	r3, #19
 800c090:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c092:	f3ef 8305 	mrs	r3, IPSR
 800c096:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c098:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c09a:	4b14      	ldr	r3, [pc, #80]	; (800c0ec <_txe_mutex_create+0x138>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00b      	beq.n	800c0bc <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0a4:	f3ef 8305 	mrs	r3, IPSR
 800c0a8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c0aa:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c0ac:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <_txe_mutex_create+0x138>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c0b6:	d201      	bcs.n	800c0bc <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c0b8:	2313      	movs	r3, #19
 800c0ba:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c0bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d105      	bne.n	800c0ce <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	68b9      	ldr	r1, [r7, #8]
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f7fd fdd6 	bl	8009c78 <_tx_mutex_create>
 800c0cc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3748      	adds	r7, #72	; 0x48
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	20005754 	.word	0x20005754
 800c0dc:	2000569c 	.word	0x2000569c
 800c0e0:	200056a0 	.word	0x200056a0
 800c0e4:	200056bc 	.word	0x200056bc
 800c0e8:	20005804 	.word	0x20005804
 800c0ec:	2000000c 	.word	0x2000000c

0800c0f0 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d102      	bne.n	800c108 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c102:	231c      	movs	r3, #28
 800c104:	617b      	str	r3, [r7, #20]
 800c106:	e023      	b.n	800c150 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a13      	ldr	r2, [pc, #76]	; (800c15c <_txe_mutex_delete+0x6c>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d002      	beq.n	800c118 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c112:	231c      	movs	r3, #28
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	e01b      	b.n	800c150 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c118:	f3ef 8305 	mrs	r3, IPSR
 800c11c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c11e:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c120:	4b0f      	ldr	r3, [pc, #60]	; (800c160 <_txe_mutex_delete+0x70>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4313      	orrs	r3, r2
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c12a:	2313      	movs	r3, #19
 800c12c:	617b      	str	r3, [r7, #20]
 800c12e:	e00f      	b.n	800c150 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c130:	4b0c      	ldr	r3, [pc, #48]	; (800c164 <_txe_mutex_delete+0x74>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	4a0b      	ldr	r2, [pc, #44]	; (800c168 <_txe_mutex_delete+0x78>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d101      	bne.n	800c142 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c13e:	2313      	movs	r3, #19
 800c140:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d103      	bne.n	800c150 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7fd fdef 	bl	8009d2c <_tx_mutex_delete>
 800c14e:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800c150:	697b      	ldr	r3, [r7, #20]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3718      	adds	r7, #24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	4d555445 	.word	0x4d555445
 800c160:	2000000c 	.word	0x2000000c
 800c164:	200056bc 	.word	0x200056bc
 800c168:	20005804 	.word	0x20005804

0800c16c <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b088      	sub	sp, #32
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c176:	2300      	movs	r3, #0
 800c178:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d102      	bne.n	800c186 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c180:	231c      	movs	r3, #28
 800c182:	61fb      	str	r3, [r7, #28]
 800c184:	e01f      	b.n	800c1c6 <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a21      	ldr	r2, [pc, #132]	; (800c210 <_txe_mutex_get+0xa4>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d002      	beq.n	800c196 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c190:	231c      	movs	r3, #28
 800c192:	61fb      	str	r3, [r7, #28]
 800c194:	e017      	b.n	800c1c6 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d014      	beq.n	800c1c6 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c19c:	f3ef 8305 	mrs	r3, IPSR
 800c1a0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c1a2:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c1a4:	4b1b      	ldr	r3, [pc, #108]	; (800c214 <_txe_mutex_get+0xa8>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c1ae:	2304      	movs	r3, #4
 800c1b0:	61fb      	str	r3, [r7, #28]
 800c1b2:	e008      	b.n	800c1c6 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c1b4:	4b18      	ldr	r3, [pc, #96]	; (800c218 <_txe_mutex_get+0xac>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	4a17      	ldr	r2, [pc, #92]	; (800c21c <_txe_mutex_get+0xb0>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d101      	bne.n	800c1c6 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c1c2:	2304      	movs	r3, #4
 800c1c4:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d114      	bne.n	800c1f6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1cc:	f3ef 8305 	mrs	r3, IPSR
 800c1d0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c1d2:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c1d4:	4b0f      	ldr	r3, [pc, #60]	; (800c214 <_txe_mutex_get+0xa8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00b      	beq.n	800c1f6 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1de:	f3ef 8305 	mrs	r3, IPSR
 800c1e2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c1e4:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c1e6:	4b0b      	ldr	r3, [pc, #44]	; (800c214 <_txe_mutex_get+0xa8>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c1f0:	d201      	bcs.n	800c1f6 <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c1f2:	2313      	movs	r3, #19
 800c1f4:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d104      	bne.n	800c206 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7fd fe3e 	bl	8009e80 <_tx_mutex_get>
 800c204:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800c206:	69fb      	ldr	r3, [r7, #28]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3720      	adds	r7, #32
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	4d555445 	.word	0x4d555445
 800c214:	2000000c 	.word	0x2000000c
 800c218:	200056bc 	.word	0x200056bc
 800c21c:	20005804 	.word	0x20005804

0800c220 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c228:	2300      	movs	r3, #0
 800c22a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d102      	bne.n	800c238 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c232:	231c      	movs	r3, #28
 800c234:	617b      	str	r3, [r7, #20]
 800c236:	e01c      	b.n	800c272 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a13      	ldr	r2, [pc, #76]	; (800c28c <_txe_mutex_put+0x6c>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d002      	beq.n	800c248 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c242:	231c      	movs	r3, #28
 800c244:	617b      	str	r3, [r7, #20]
 800c246:	e014      	b.n	800c272 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c248:	f3ef 8305 	mrs	r3, IPSR
 800c24c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c24e:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c250:	4b0f      	ldr	r3, [pc, #60]	; (800c290 <_txe_mutex_put+0x70>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4313      	orrs	r3, r2
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00b      	beq.n	800c272 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c25a:	f3ef 8305 	mrs	r3, IPSR
 800c25e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c260:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c262:	4b0b      	ldr	r3, [pc, #44]	; (800c290 <_txe_mutex_put+0x70>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4313      	orrs	r3, r2
 800c268:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c26c:	d201      	bcs.n	800c272 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c26e:	2313      	movs	r3, #19
 800c270:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d103      	bne.n	800c280 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f7fe f879 	bl	800a370 <_tx_mutex_put>
 800c27e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c280:	697b      	ldr	r3, [r7, #20]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3718      	adds	r7, #24
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	4d555445 	.word	0x4d555445
 800c290:	2000000c 	.word	0x2000000c

0800c294 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b092      	sub	sp, #72	; 0x48
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d102      	bne.n	800c2b2 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c2ac:	230c      	movs	r3, #12
 800c2ae:	647b      	str	r3, [r7, #68]	; 0x44
 800c2b0:	e054      	b.n	800c35c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b1c      	cmp	r3, #28
 800c2b6:	d002      	beq.n	800c2be <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c2b8:	230c      	movs	r3, #12
 800c2ba:	647b      	str	r3, [r7, #68]	; 0x44
 800c2bc:	e04e      	b.n	800c35c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2be:	f3ef 8310 	mrs	r3, PRIMASK
 800c2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c2c6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2c8:	b672      	cpsid	i
    return(int_posture);
 800c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c2cc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c2ce:	4b36      	ldr	r3, [pc, #216]	; (800c3a8 <_txe_semaphore_create+0x114>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	4a34      	ldr	r2, [pc, #208]	; (800c3a8 <_txe_semaphore_create+0x114>)
 800c2d6:	6013      	str	r3, [r2, #0]
 800c2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2da:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2de:	f383 8810 	msr	PRIMASK, r3
}
 800c2e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800c2e4:	4b31      	ldr	r3, [pc, #196]	; (800c3ac <_txe_semaphore_create+0x118>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c2ee:	e009      	b.n	800c304 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d00b      	beq.n	800c310 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800c2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c300:	3301      	adds	r3, #1
 800c302:	643b      	str	r3, [r7, #64]	; 0x40
 800c304:	4b2a      	ldr	r3, [pc, #168]	; (800c3b0 <_txe_semaphore_create+0x11c>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d3f0      	bcc.n	800c2f0 <_txe_semaphore_create+0x5c>
 800c30e:	e000      	b.n	800c312 <_txe_semaphore_create+0x7e>
                break;
 800c310:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c312:	f3ef 8310 	mrs	r3, PRIMASK
 800c316:	623b      	str	r3, [r7, #32]
    return(posture);
 800c318:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c31a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c31c:	b672      	cpsid	i
    return(int_posture);
 800c31e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c320:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c322:	4b21      	ldr	r3, [pc, #132]	; (800c3a8 <_txe_semaphore_create+0x114>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3b01      	subs	r3, #1
 800c328:	4a1f      	ldr	r2, [pc, #124]	; (800c3a8 <_txe_semaphore_create+0x114>)
 800c32a:	6013      	str	r3, [r2, #0]
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c332:	f383 8810 	msr	PRIMASK, r3
}
 800c336:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c338:	f7fe fefc 	bl	800b134 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c340:	429a      	cmp	r2, r3
 800c342:	d102      	bne.n	800c34a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800c344:	230c      	movs	r3, #12
 800c346:	647b      	str	r3, [r7, #68]	; 0x44
 800c348:	e008      	b.n	800c35c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c34a:	4b1a      	ldr	r3, [pc, #104]	; (800c3b4 <_txe_semaphore_create+0x120>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c352:	4a19      	ldr	r2, [pc, #100]	; (800c3b8 <_txe_semaphore_create+0x124>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d101      	bne.n	800c35c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c358:	2313      	movs	r3, #19
 800c35a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d114      	bne.n	800c38c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c362:	f3ef 8305 	mrs	r3, IPSR
 800c366:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c368:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c36a:	4b14      	ldr	r3, [pc, #80]	; (800c3bc <_txe_semaphore_create+0x128>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4313      	orrs	r3, r2
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00b      	beq.n	800c38c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c374:	f3ef 8305 	mrs	r3, IPSR
 800c378:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c37a:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c37c:	4b0f      	ldr	r3, [pc, #60]	; (800c3bc <_txe_semaphore_create+0x128>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4313      	orrs	r3, r2
 800c382:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c386:	d201      	bcs.n	800c38c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c388:	2313      	movs	r3, #19
 800c38a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d105      	bne.n	800c39e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	68b9      	ldr	r1, [r7, #8]
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f7fe fa8c 	bl	800a8b4 <_tx_semaphore_create>
 800c39c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800c39e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3748      	adds	r7, #72	; 0x48
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	20005754 	.word	0x20005754
 800c3ac:	20005684 	.word	0x20005684
 800c3b0:	20005688 	.word	0x20005688
 800c3b4:	200056bc 	.word	0x200056bc
 800c3b8:	20005804 	.word	0x20005804
 800c3bc:	2000000c 	.word	0x2000000c

0800c3c0 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d102      	bne.n	800c3d8 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c3d2:	230c      	movs	r3, #12
 800c3d4:	617b      	str	r3, [r7, #20]
 800c3d6:	e01c      	b.n	800c412 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a13      	ldr	r2, [pc, #76]	; (800c42c <_txe_semaphore_delete+0x6c>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d002      	beq.n	800c3e8 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	617b      	str	r3, [r7, #20]
 800c3e6:	e014      	b.n	800c412 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c3e8:	f3ef 8305 	mrs	r3, IPSR
 800c3ec:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c3ee:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c3f0:	4b0f      	ldr	r3, [pc, #60]	; (800c430 <_txe_semaphore_delete+0x70>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d002      	beq.n	800c400 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c3fa:	2313      	movs	r3, #19
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	e008      	b.n	800c412 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c400:	4b0c      	ldr	r3, [pc, #48]	; (800c434 <_txe_semaphore_delete+0x74>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	4a0b      	ldr	r2, [pc, #44]	; (800c438 <_txe_semaphore_delete+0x78>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d101      	bne.n	800c412 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c40e:	2313      	movs	r3, #19
 800c410:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d103      	bne.n	800c420 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7fe fa9d 	bl	800a958 <_tx_semaphore_delete>
 800c41e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c420:	697b      	ldr	r3, [r7, #20]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	53454d41 	.word	0x53454d41
 800c430:	2000000c 	.word	0x2000000c
 800c434:	200056bc 	.word	0x200056bc
 800c438:	20005804 	.word	0x20005804

0800c43c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c446:	2300      	movs	r3, #0
 800c448:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d102      	bne.n	800c456 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c450:	230c      	movs	r3, #12
 800c452:	617b      	str	r3, [r7, #20]
 800c454:	e01f      	b.n	800c496 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a15      	ldr	r2, [pc, #84]	; (800c4b0 <_txe_semaphore_get+0x74>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d002      	beq.n	800c466 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c460:	230c      	movs	r3, #12
 800c462:	617b      	str	r3, [r7, #20]
 800c464:	e017      	b.n	800c496 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d014      	beq.n	800c496 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c46c:	f3ef 8305 	mrs	r3, IPSR
 800c470:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c472:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c474:	4b0f      	ldr	r3, [pc, #60]	; (800c4b4 <_txe_semaphore_get+0x78>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4313      	orrs	r3, r2
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d002      	beq.n	800c484 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c47e:	2304      	movs	r3, #4
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	e008      	b.n	800c496 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c484:	4b0c      	ldr	r3, [pc, #48]	; (800c4b8 <_txe_semaphore_get+0x7c>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	4a0b      	ldr	r2, [pc, #44]	; (800c4bc <_txe_semaphore_get+0x80>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d101      	bne.n	800c496 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c492:	2304      	movs	r3, #4
 800c494:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d104      	bne.n	800c4a6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f7fe faea 	bl	800aa78 <_tx_semaphore_get>
 800c4a4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c4a6:	697b      	ldr	r3, [r7, #20]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	53454d41 	.word	0x53454d41
 800c4b4:	2000000c 	.word	0x2000000c
 800c4b8:	200056bc 	.word	0x200056bc
 800c4bc:	20005804 	.word	0x20005804

0800c4c0 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d102      	bne.n	800c4d4 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	60fb      	str	r3, [r7, #12]
 800c4d2:	e00b      	b.n	800c4ec <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a07      	ldr	r2, [pc, #28]	; (800c4f8 <_txe_semaphore_put+0x38>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d002      	beq.n	800c4e4 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c4de:	230c      	movs	r3, #12
 800c4e0:	60fb      	str	r3, [r7, #12]
 800c4e2:	e003      	b.n	800c4ec <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f7fe fb59 	bl	800ab9c <_tx_semaphore_put>
 800c4ea:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	53454d41 	.word	0x53454d41

0800c4fc <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b09a      	sub	sp, #104	; 0x68
 800c500:	af06      	add	r7, sp, #24
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
 800c508:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c50a:	2300      	movs	r3, #0
 800c50c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c514:	230e      	movs	r3, #14
 800c516:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c518:	e0bb      	b.n	800c692 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800c51a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c51c:	2bb0      	cmp	r3, #176	; 0xb0
 800c51e:	d002      	beq.n	800c526 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c520:	230e      	movs	r3, #14
 800c522:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c524:	e0b5      	b.n	800c692 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c526:	f3ef 8310 	mrs	r3, PRIMASK
 800c52a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c52e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c530:	b672      	cpsid	i
    return(int_posture);
 800c532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c534:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c536:	4b64      	ldr	r3, [pc, #400]	; (800c6c8 <_txe_thread_create+0x1cc>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	3301      	adds	r3, #1
 800c53c:	4a62      	ldr	r2, [pc, #392]	; (800c6c8 <_txe_thread_create+0x1cc>)
 800c53e:	6013      	str	r3, [r2, #0]
 800c540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c542:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c546:	f383 8810 	msr	PRIMASK, r3
}
 800c54a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800c54c:	2300      	movs	r3, #0
 800c54e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800c550:	4b5e      	ldr	r3, [pc, #376]	; (800c6cc <_txe_thread_create+0x1d0>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c558:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800c55a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c55c:	3b01      	subs	r3, #1
 800c55e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c560:	4413      	add	r3, r2
 800c562:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c568:	2300      	movs	r3, #0
 800c56a:	647b      	str	r3, [r7, #68]	; 0x44
 800c56c:	e02b      	b.n	800c5c6 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c572:	429a      	cmp	r2, r3
 800c574:	d101      	bne.n	800c57a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800c576:	2301      	movs	r3, #1
 800c578:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800c57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d028      	beq.n	800c5d2 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800c580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c586:	429a      	cmp	r2, r3
 800c588:	d308      	bcc.n	800c59c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800c58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c590:	429a      	cmp	r2, r3
 800c592:	d203      	bcs.n	800c59c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c594:	2300      	movs	r3, #0
 800c596:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c598:	2301      	movs	r3, #1
 800c59a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800c59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d308      	bcc.n	800c5b8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800c5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d203      	bcs.n	800c5b8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800c5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5be:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c5c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	647b      	str	r3, [r7, #68]	; 0x44
 800c5c6:	4b42      	ldr	r3, [pc, #264]	; (800c6d0 <_txe_thread_create+0x1d4>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d3ce      	bcc.n	800c56e <_txe_thread_create+0x72>
 800c5d0:	e000      	b.n	800c5d4 <_txe_thread_create+0xd8>
                break;
 800c5d2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c5d8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c5da:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c5dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5de:	b672      	cpsid	i
    return(int_posture);
 800c5e0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c5e4:	4b38      	ldr	r3, [pc, #224]	; (800c6c8 <_txe_thread_create+0x1cc>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	4a37      	ldr	r2, [pc, #220]	; (800c6c8 <_txe_thread_create+0x1cc>)
 800c5ec:	6013      	str	r3, [r2, #0]
 800c5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	f383 8810 	msr	PRIMASK, r3
}
 800c5f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c5fa:	f7fe fd9b 	bl	800b134 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c602:	429a      	cmp	r2, r3
 800c604:	d102      	bne.n	800c60c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800c606:	230e      	movs	r3, #14
 800c608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c60a:	e042      	b.n	800c692 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800c60c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d102      	bne.n	800c618 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c612:	2303      	movs	r3, #3
 800c614:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c616:	e03c      	b.n	800c692 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d102      	bne.n	800c624 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c61e:	2303      	movs	r3, #3
 800c620:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c622:	e036      	b.n	800c692 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800c624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c626:	2bc7      	cmp	r3, #199	; 0xc7
 800c628:	d802      	bhi.n	800c630 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800c62a:	2305      	movs	r3, #5
 800c62c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c62e:	e030      	b.n	800c692 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800c630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c632:	2b1f      	cmp	r3, #31
 800c634:	d902      	bls.n	800c63c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800c636:	230f      	movs	r3, #15
 800c638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c63a:	e02a      	b.n	800c692 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800c63c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c63e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c640:	429a      	cmp	r2, r3
 800c642:	d902      	bls.n	800c64a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800c644:	2318      	movs	r3, #24
 800c646:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c648:	e023      	b.n	800c692 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800c64a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d902      	bls.n	800c656 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800c650:	2310      	movs	r3, #16
 800c652:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c654:	e01d      	b.n	800c692 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800c656:	4b1f      	ldr	r3, [pc, #124]	; (800c6d4 <_txe_thread_create+0x1d8>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800c65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65e:	4a1e      	ldr	r2, [pc, #120]	; (800c6d8 <_txe_thread_create+0x1dc>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d101      	bne.n	800c668 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c664:	2313      	movs	r3, #19
 800c666:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c668:	f3ef 8305 	mrs	r3, IPSR
 800c66c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c66e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c670:	4b1a      	ldr	r3, [pc, #104]	; (800c6dc <_txe_thread_create+0x1e0>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4313      	orrs	r3, r2
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00b      	beq.n	800c692 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c67a:	f3ef 8305 	mrs	r3, IPSR
 800c67e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c680:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c682:	4b16      	ldr	r3, [pc, #88]	; (800c6dc <_txe_thread_create+0x1e0>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4313      	orrs	r3, r2
 800c688:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c68c:	d201      	bcs.n	800c692 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c68e:	2313      	movs	r3, #19
 800c690:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c694:	2b00      	cmp	r3, #0
 800c696:	d112      	bne.n	800c6be <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800c698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c69a:	9305      	str	r3, [sp, #20]
 800c69c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c69e:	9304      	str	r3, [sp, #16]
 800c6a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6a2:	9303      	str	r3, [sp, #12]
 800c6a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6a6:	9302      	str	r3, [sp, #8]
 800c6a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	68b9      	ldr	r1, [r7, #8]
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f7fe fac8 	bl	800ac4c <_tx_thread_create>
 800c6bc:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800c6be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3750      	adds	r7, #80	; 0x50
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	20005754 	.word	0x20005754
 800c6cc:	200056c4 	.word	0x200056c4
 800c6d0:	200056c8 	.word	0x200056c8
 800c6d4:	200056bc 	.word	0x200056bc
 800c6d8:	20005804 	.word	0x20005804
 800c6dc:	2000000c 	.word	0x2000000c

0800c6e0 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b08c      	sub	sp, #48	; 0x30
 800c6e4:	af06      	add	r7, sp, #24
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d102      	bne.n	800c6fa <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c6f4:	230e      	movs	r3, #14
 800c6f6:	617b      	str	r3, [r7, #20]
 800c6f8:	e018      	b.n	800c72c <_txe_thread_info_get+0x4c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a0e      	ldr	r2, [pc, #56]	; (800c738 <_txe_thread_info_get+0x58>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d002      	beq.n	800c70a <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c704:	230e      	movs	r3, #14
 800c706:	617b      	str	r3, [r7, #20]
 800c708:	e010      	b.n	800c72c <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 800c70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70c:	9304      	str	r3, [sp, #16]
 800c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c710:	9303      	str	r3, [sp, #12]
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	9302      	str	r3, [sp, #8]
 800c716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f7fe fba5 	bl	800ae74 <_tx_thread_info_get>
 800c72a:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 800c72c:	697b      	ldr	r3, [r7, #20]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3718      	adds	r7, #24
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	54485244 	.word	0x54485244

0800c73c <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c744:	4b1b      	ldr	r3, [pc, #108]	; (800c7b4 <_ux_device_stack_alternate_setting_get+0x78>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3320      	adds	r3, #32
 800c74a:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b03      	cmp	r3, #3
 800c752:	d129      	bne.n	800c7a8 <_ux_device_stack_alternate_setting_get+0x6c>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c75a:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 800c75c:	e021      	b.n	800c7a2 <_ux_device_stack_alternate_setting_get+0x66>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	429a      	cmp	r2, r3
 800c766:	d119      	bne.n	800c79c <_ux_device_stack_alternate_setting_get+0x60>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	333c      	adds	r3, #60	; 0x3c
 800c76c:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	3330      	adds	r3, #48	; 0x30
 800c772:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800c77c:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800c77e:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	2201      	movs	r2, #1
 800c784:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	2203      	movs	r2, #3
 800c78a:	629a      	str	r2, [r3, #40]	; 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800c78c:	2201      	movs	r2, #1
 800c78e:	2101      	movs	r1, #1
 800c790:	6938      	ldr	r0, [r7, #16]
 800c792:	f001 fd49 	bl	800e228 <_ux_device_stack_transfer_request>
 800c796:	60f8      	str	r0, [r7, #12]

                /* Return the function status.  */
                return(status);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	e006      	b.n	800c7aa <_ux_device_stack_alternate_setting_get+0x6e>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a0:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1da      	bne.n	800c75e <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800c7a8:	23ff      	movs	r3, #255	; 0xff
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3720      	adds	r7, #32
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20005cc4 	.word	0x20005cc4

0800c7b8 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b0ae      	sub	sp, #184	; 0xb8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800c7c2:	4bc0      	ldr	r3, [pc, #768]	; (800cac4 <_ux_device_stack_alternate_setting_set+0x30c>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3320      	adds	r3, #32
 800c7c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800c7cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	d001      	beq.n	800c7da <_ux_device_stack_alternate_setting_set+0x22>
        return(UX_FUNCTION_NOT_SUPPORTED);
 800c7d6:	2354      	movs	r3, #84	; 0x54
 800c7d8:	e217      	b.n	800cc0a <_ux_device_stack_alternate_setting_set+0x452>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 800c7da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c7e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 800c7e6:	e00a      	b.n	800c7fe <_ux_device_stack_alternate_setting_set+0x46>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800c7e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d009      	beq.n	800c808 <_ux_device_stack_alternate_setting_set+0x50>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800c7f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (interface_ptr != UX_NULL)
 800c7fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1f0      	bne.n	800c7e8 <_ux_device_stack_alternate_setting_set+0x30>
 800c806:	e000      	b.n	800c80a <_ux_device_stack_alternate_setting_set+0x52>
            break;
 800c808:	bf00      	nop
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 800c80a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d106      	bne.n	800c820 <_ux_device_stack_alternate_setting_set+0x68>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800c812:	2252      	movs	r2, #82	; 0x52
 800c814:	2107      	movs	r1, #7
 800c816:	2002      	movs	r0, #2
 800c818:	f001 fd90 	bl	800e33c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800c81c:	2352      	movs	r3, #82	; 0x52
 800c81e:	e1f4      	b.n	800cc0a <_ux_device_stack_alternate_setting_set+0x452>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800c820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d101      	bne.n	800c830 <_ux_device_stack_alternate_setting_set+0x78>
        return(UX_SUCCESS);       
 800c82c:	2300      	movs	r3, #0
 800c82e:	e1ec      	b.n	800cc0a <_ux_device_stack_alternate_setting_set+0x452>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800c830:	4ba4      	ldr	r3, [pc, #656]	; (800cac4 <_ux_device_stack_alternate_setting_set+0x30c>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800c838:	4ba2      	ldr	r3, [pc, #648]	; (800cac4 <_ux_device_stack_alternate_setting_set+0x30c>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800c840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800c844:	4b9f      	ldr	r3, [pc, #636]	; (800cac4 <_ux_device_stack_alternate_setting_set+0x30c>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c84c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800c850:	e1d5      	b.n	800cbfe <_ux_device_stack_alternate_setting_set+0x446>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800c852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800c85c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c860:	785b      	ldrb	r3, [r3, #1]
 800c862:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800c866:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	f040 81b9 	bne.w	800cbe2 <_ux_device_stack_alternate_setting_set+0x42a>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800c870:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c874:	2208      	movs	r2, #8
 800c876:	4994      	ldr	r1, [pc, #592]	; (800cac8 <_ux_device_stack_alternate_setting_set+0x310>)
 800c878:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800c87c:	f001 fe4c 	bl	800e518 <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800c880:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c886:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c88a:	429a      	cmp	r2, r3
 800c88c:	f040 81a9 	bne.w	800cbe2 <_ux_device_stack_alternate_setting_set+0x42a>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800c890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 800c896:	e19e      	b.n	800cbd6 <_ux_device_stack_alternate_setting_set+0x41e>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800c898:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800c8a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c8a6:	785b      	ldrb	r3, [r3, #1]
 800c8a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800c8ac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800c8b0:	2b04      	cmp	r3, #4
 800c8b2:	f040 8182 	bne.w	800cbba <_ux_device_stack_alternate_setting_set+0x402>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 800c8b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8ba:	2209      	movs	r2, #9
 800c8bc:	4983      	ldr	r1, [pc, #524]	; (800cacc <_ux_device_stack_alternate_setting_set+0x314>)
 800c8be:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800c8c2:	f001 fe29 	bl	800e518 <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800c8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	f040 8175 	bne.w	800cbba <_ux_device_stack_alternate_setting_set+0x402>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800c8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	f040 8170 	bne.w	800cbba <_ux_device_stack_alternate_setting_set+0x402>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800c8da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 800c8e4:	e028      	b.n	800c938 <_ux_device_stack_alternate_setting_set+0x180>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800c8e6:	2126      	movs	r1, #38	; 0x26
 800c8e8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800c8ec:	f001 fc8a 	bl	800e204 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800c8f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c8fa:	210f      	movs	r1, #15
 800c8fc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c900:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800c902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c908:	67bb      	str	r3, [r7, #120]	; 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800c90a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c90e:	2200      	movs	r2, #0
 800c910:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 800c912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c916:	2200      	movs	r2, #0
 800c918:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800c91a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c91e:	2200      	movs	r2, #0
 800c920:	625a      	str	r2, [r3, #36]	; 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800c922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c926:	2200      	movs	r2, #0
 800c928:	629a      	str	r2, [r3, #40]	; 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800c92a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c92e:	2200      	movs	r2, #0
 800c930:	62da      	str	r2, [r3, #44]	; 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 800c932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c934:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            while (endpoint != UX_NULL)
 800c938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1d2      	bne.n	800c8e6 <_ux_device_stack_alternate_setting_set+0x12e>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 800c940:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c944:	2200      	movs	r2, #0
 800c946:	635a      	str	r2, [r3, #52]	; 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800c948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c954:	1a9b      	subs	r3, r3, r2
 800c956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                            device_framework +=  (ULONG) *device_framework;
 800c95a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	461a      	mov	r2, r3
 800c962:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c966:	4413      	add	r3, r2
 800c968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800c96c:	e0e7      	b.n	800cb3e <_ux_device_stack_alternate_setting_set+0x386>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800c96e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800c978:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c97c:	785b      	ldrb	r3, [r3, #1]
 800c97e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 800c982:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800c986:	2b05      	cmp	r3, #5
 800c988:	d009      	beq.n	800c99e <_ux_device_stack_alternate_setting_set+0x1e6>
 800c98a:	2b05      	cmp	r3, #5
 800c98c:	f300 80c8 	bgt.w	800cb20 <_ux_device_stack_alternate_setting_set+0x368>
 800c990:	2b02      	cmp	r3, #2
 800c992:	f000 80c0 	beq.w	800cb16 <_ux_device_stack_alternate_setting_set+0x35e>
 800c996:	2b04      	cmp	r3, #4
 800c998:	f000 80bd 	beq.w	800cb16 <_ux_device_stack_alternate_setting_set+0x35e>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800c99c:	e0c0      	b.n	800cb20 <_ux_device_stack_alternate_setting_set+0x368>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800c99e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c9a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c9a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800c9aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c9ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800c9b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 800c9b6:	e013      	b.n	800c9e0 <_ux_device_stack_alternate_setting_set+0x228>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800c9b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d104      	bne.n	800c9cc <_ux_device_stack_alternate_setting_set+0x214>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800c9c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	601a      	str	r2, [r3, #0]
                                            break;
 800c9ca:	e00d      	b.n	800c9e8 <_ux_device_stack_alternate_setting_set+0x230>
                                        endpoint++;
 800c9cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c9d0:	3390      	adds	r3, #144	; 0x90
 800c9d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                                       endpoints_pool_number--; 
 800c9d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                                    while (endpoints_pool_number != 0)
 800c9e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e7      	bne.n	800c9b8 <_ux_device_stack_alternate_setting_set+0x200>
                                    if (endpoints_pool_number == 0)
 800c9e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <_ux_device_stack_alternate_setting_set+0x23c>
                                        return(UX_MEMORY_INSUFFICIENT);
 800c9f0:	2312      	movs	r3, #18
 800c9f2:	e10a      	b.n	800cc0a <_ux_device_stack_alternate_setting_set+0x452>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800c9f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c9f8:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800c9fa:	2206      	movs	r2, #6
 800c9fc:	4934      	ldr	r1, [pc, #208]	; (800cad0 <_ux_device_stack_alternate_setting_set+0x318>)
 800c9fe:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800ca02:	f001 fd89 	bl	800e518 <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ca06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ca0a:	3330      	adds	r3, #48	; 0x30
 800ca0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800ca10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ca14:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 800ca16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800ca1e:	4b29      	ldr	r3, [pc, #164]	; (800cac4 <_ux_device_stack_alternate_setting_set+0x30c>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d11c      	bne.n	800ca64 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800ca2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	f003 0301 	and.w	r3, r3, #1
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d015      	beq.n	800ca64 <_ux_device_stack_alternate_setting_set+0x2ac>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800ca38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800ca42:	67fb      	str	r3, [r7, #124]	; 0x7c
                                        if (n_trans)
 800ca44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00c      	beq.n	800ca64 <_ux_device_stack_alternate_setting_set+0x2ac>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800ca4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca4c:	0adb      	lsrs	r3, r3, #11
 800ca4e:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            n_trans ++;
 800ca50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca52:	3301      	adds	r3, #1
 800ca54:	67fb      	str	r3, [r7, #124]	; 0x7c
                                            max_transfer_length *= n_trans;
 800ca56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ca5c:	fb02 f303 	mul.w	r3, r2, r3
 800ca60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800ca64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca68:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ca6c:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800ca6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ca76:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800ca78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca80:	64da      	str	r2, [r3, #76]	; 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800ca82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ca86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ca8a:	629a      	str	r2, [r3, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 800ca8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ca90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ca94:	62da      	str	r2, [r3, #44]	; 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800ca96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca9a:	699b      	ldr	r3, [r3, #24]
 800ca9c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800caa0:	210e      	movs	r1, #14
 800caa2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800caa6:	4798      	blx	r3
 800caa8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                                    if (status != UX_SUCCESS)
 800caac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00f      	beq.n	800cad4 <_ux_device_stack_alternate_setting_set+0x31c>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800cab4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]
                                        return(status);
 800cabc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cac0:	e0a3      	b.n	800cc0a <_ux_device_stack_alternate_setting_set+0x452>
 800cac2:	bf00      	nop
 800cac4:	20005cc4 	.word	0x20005cc4
 800cac8:	20000040 	.word	0x20000040
 800cacc:	20000048 	.word	0x20000048
 800cad0:	20000028 	.word	0x20000028
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800cad4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d105      	bne.n	800caea <_ux_device_stack_alternate_setting_set+0x332>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800cade:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cae6:	635a      	str	r2, [r3, #52]	; 0x34
                                    break;
 800cae8:	e01b      	b.n	800cb22 <_ux_device_stack_alternate_setting_set+0x36a>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800caea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800caee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800caf4:	e004      	b.n	800cb00 <_ux_device_stack_alternate_setting_set+0x348>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800caf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800cb00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f5      	bne.n	800caf6 <_ux_device_stack_alternate_setting_set+0x33e>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800cb0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cb0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cb12:	625a      	str	r2, [r3, #36]	; 0x24
                                    break;
 800cb14:	e005      	b.n	800cb22 <_ux_device_stack_alternate_setting_set+0x36a>
                                    device_framework_length =  descriptor_length;
 800cb16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                                    break;
 800cb1e:	e000      	b.n	800cb22 <_ux_device_stack_alternate_setting_set+0x36a>
                                    break;
 800cb20:	bf00      	nop
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800cb22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cb26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 800cb30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cb34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb38:	4413      	add	r3, r2
 800cb3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                            while (device_framework_length != 0)
 800cb3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f47f af13 	bne.w	800c96e <_ux_device_stack_alternate_setting_set+0x1b6>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800cb48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb4c:	330c      	adds	r3, #12
 800cb4e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800cb52:	2224      	movs	r2, #36	; 0x24
 800cb54:	4618      	mov	r0, r3
 800cb56:	f001 fe8a 	bl	800e86e <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800cb5a:	4b2e      	ldr	r3, [pc, #184]	; (800cc14 <_ux_device_stack_alternate_setting_set+0x45c>)
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	3356      	adds	r3, #86	; 0x56
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	4413      	add	r3, r2
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 800cb70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d004      	beq.n	800cb82 <_ux_device_stack_alternate_setting_set+0x3ca>
 800cb78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d101      	bne.n	800cb86 <_ux_device_stack_alternate_setting_set+0x3ce>
                            {

                                return (UX_NO_CLASS_MATCH);
 800cb82:	2357      	movs	r3, #87	; 0x57
 800cb84:	e041      	b.n	800cc0a <_ux_device_stack_alternate_setting_set+0x452>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800cb86:	2306      	movs	r3, #6
 800cb88:	60bb      	str	r3, [r7, #8]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800cb8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb8e:	613b      	str	r3, [r7, #16]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800cb90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb94:	62bb      	str	r3, [r7, #40]	; 0x28
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 800cb96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cb9e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800cba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cba8:	f107 0208 	add.w	r2, r7, #8
 800cbac:	4610      	mov	r0, r2
 800cbae:	4798      	blx	r3
 800cbb0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

                            /* We are done here.  */
                            return(status); 
 800cbb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbb8:	e027      	b.n	800cc0a <_ux_device_stack_alternate_setting_set+0x452>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800cbba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cbbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800cbc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cbcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbd0:	4413      	add	r3, r2
 800cbd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                while (device_framework_length != 0)
 800cbd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f47f ae5c 	bne.w	800c898 <_ux_device_stack_alternate_setting_set+0xe0>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 800cbe0:	e012      	b.n	800cc08 <_ux_device_stack_alternate_setting_set+0x450>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800cbe2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cbe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800cbf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cbf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    while (device_framework_length != 0)
 800cbfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f47f ae25 	bne.w	800c852 <_ux_device_stack_alternate_setting_set+0x9a>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800cc08:	23ff      	movs	r3, #255	; 0xff
#endif
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	37b8      	adds	r7, #184	; 0xb8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20005cc4 	.word	0x20005cc4

0800cc18 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b092      	sub	sp, #72	; 0x48
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 800cc26:	2300      	movs	r3, #0
 800cc28:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800cc2a:	f107 0310 	add.w	r3, r7, #16
 800cc2e:	223f      	movs	r2, #63	; 0x3f
 800cc30:	4619      	mov	r1, r3
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f001 ffff 	bl	800ec36 <_ux_utility_string_length_check>
 800cc38:	6478      	str	r0, [r7, #68]	; 0x44
    if (status)
 800cc3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <_ux_device_stack_class_register+0x2c>
        return(status);
 800cc40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc42:	e035      	b.n	800ccb0 <_ux_device_stack_class_register+0x98>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800cc44:	4b1c      	ldr	r3, [pc, #112]	; (800ccb8 <_ux_device_stack_class_register+0xa0>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800cc4c:	643b      	str	r3, [r7, #64]	; 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800cc4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d12b      	bne.n	800ccae <_ux_device_stack_class_register+0x96>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800cc56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	68f9      	ldr	r1, [r7, #12]
 800cc60:	f001 fe05 	bl	800e86e <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 800cc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	645a      	str	r2, [r3, #68]	; 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800cc6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 800cc72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800cc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800cc82:	2305      	movs	r3, #5
 800cc84:	617b      	str	r3, [r7, #20]
            command.ux_slave_class_command_parameter  =  parameter;
 800cc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc88:	63bb      	str	r3, [r7, #56]	; 0x38
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800cc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc8c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 800cc8e:	f107 0214 	add.w	r2, r7, #20
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	4610      	mov	r0, r2
 800cc96:	4798      	blx	r3
 800cc98:	6478      	str	r0, [r7, #68]	; 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 800cc9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d001      	beq.n	800cca4 <_ux_device_stack_class_register+0x8c>
                return(status);
 800cca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cca2:	e005      	b.n	800ccb0 <_ux_device_stack_class_register+0x98>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 800cca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca6:	2201      	movs	r2, #1
 800cca8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800ccaa:	2300      	movs	r3, #0
 800ccac:	e000      	b.n	800ccb0 <_ux_device_stack_class_register+0x98>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 800ccae:	2312      	movs	r3, #18
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3748      	adds	r7, #72	; 0x48
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20005cc4 	.word	0x20005cc4

0800ccbc <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08a      	sub	sp, #40	; 0x28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ccc8:	4b2a      	ldr	r3, [pc, #168]	; (800cd74 <_ux_device_stack_clear_feature+0xb8>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ccce:	4b29      	ldr	r3, [pc, #164]	; (800cd74 <_ux_device_stack_clear_feature+0xb8>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	3320      	adds	r3, #32
 800ccd4:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	333c      	adds	r3, #60	; 0x3c
 800ccda:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f003 0303 	and.w	r3, r3, #3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <_ux_device_stack_clear_feature+0x30>
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d011      	beq.n	800cd0e <_ux_device_stack_clear_feature+0x52>
 800ccea:	e035      	b.n	800cd58 <_ux_device_stack_clear_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d13a      	bne.n	800cd68 <_ux_device_stack_clear_feature+0xac>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800ccf2:	4b20      	ldr	r3, [pc, #128]	; (800cd74 <_ux_device_stack_clear_feature+0xb8>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d005      	beq.n	800cd0a <_ux_device_stack_clear_feature+0x4e>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800ccfe:	4b1d      	ldr	r3, [pc, #116]	; (800cd74 <_ux_device_stack_clear_feature+0xb8>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 800cd08:	e02e      	b.n	800cd68 <_ux_device_stack_clear_feature+0xac>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800cd0a:	2354      	movs	r3, #84	; 0x54
 800cd0c:	e02e      	b.n	800cd6c <_ux_device_stack_clear_feature+0xb0>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cd14:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800cd16:	e01c      	b.n	800cd52 <_ux_device_stack_clear_feature+0x96>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1c:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800cd1e:	e012      	b.n	800cd46 <_ux_device_stack_clear_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	695b      	ldr	r3, [r3, #20]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d10a      	bne.n	800cd40 <_ux_device_stack_clear_feature+0x84>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	699b      	ldr	r3, [r3, #24]
 800cd2e:	6a3a      	ldr	r2, [r7, #32]
 800cd30:	2110      	movs	r1, #16
 800cd32:	69f8      	ldr	r0, [r7, #28]
 800cd34:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	e015      	b.n	800cd6c <_ux_device_stack_clear_feature+0xb0>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800cd40:	6a3b      	ldr	r3, [r7, #32]
 800cd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd44:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1e9      	bne.n	800cd20 <_ux_device_stack_clear_feature+0x64>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd50:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 800cd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1df      	bne.n	800cd18 <_ux_device_stack_clear_feature+0x5c>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	697a      	ldr	r2, [r7, #20]
 800cd5e:	2114      	movs	r1, #20
 800cd60:	69f8      	ldr	r0, [r7, #28]
 800cd62:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800cd64:	2300      	movs	r3, #0
 800cd66:	e001      	b.n	800cd6c <_ux_device_stack_clear_feature+0xb0>
        break;
 800cd68:	bf00      	nop
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3728      	adds	r7, #40	; 0x28
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	20005cc4 	.word	0x20005cc4

0800cd78 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cd7e:	4b0f      	ldr	r3, [pc, #60]	; (800cdbc <_ux_device_stack_configuration_get+0x44>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	3320      	adds	r3, #32
 800cd84:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	333c      	adds	r3, #60	; 0x3c
 800cd8a:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	3330      	adds	r3, #48	; 0x30
 800cd90:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800cd9c:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800cd9e:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2203      	movs	r2, #3
 800cda4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800cda6:	2201      	movs	r2, #1
 800cda8:	2101      	movs	r1, #1
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f001 fa3c 	bl	800e228 <_ux_device_stack_transfer_request>
 800cdb0:	6038      	str	r0, [r7, #0]

    /* Return the function status.  */
    return(status);
 800cdb2:	683b      	ldr	r3, [r7, #0]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	20005cc4 	.word	0x20005cc4

0800cdc0 <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b0ac      	sub	sp, #176	; 0xb0
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800cdc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cdcc:	2220      	movs	r2, #32
 800cdce:	2100      	movs	r1, #0
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f004 fde7 	bl	80119a4 <memset>
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
ULONG                           iad_number_interfaces =  0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800cde8:	4b9d      	ldr	r3, [pc, #628]	; (800d060 <_ux_device_stack_configuration_set+0x2a0>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800cdf0:	4b9b      	ldr	r3, [pc, #620]	; (800d060 <_ux_device_stack_configuration_set+0x2a0>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	3320      	adds	r3, #32
 800cdf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800ce00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce04:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d101      	bne.n	800ce12 <_ux_device_stack_configuration_set+0x52>
        return(UX_SUCCESS);
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e175      	b.n	800d0fe <_ux_device_stack_configuration_set+0x33e>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800ce12:	4b93      	ldr	r3, [pc, #588]	; (800d060 <_ux_device_stack_configuration_set+0x2a0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800ce1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800ce1e:	4b90      	ldr	r3, [pc, #576]	; (800d060 <_ux_device_stack_configuration_set+0x2a0>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800ce26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800ce2a:	e027      	b.n	800ce7c <_ux_device_stack_configuration_set+0xbc>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800ce2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800ce36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800ce40:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d10b      	bne.n	800ce60 <_ux_device_stack_configuration_set+0xa0>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800ce48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ce4c:	2208      	movs	r2, #8
 800ce4e:	4985      	ldr	r1, [pc, #532]	; (800d064 <_ux_device_stack_configuration_set+0x2a4>)
 800ce50:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800ce54:	f001 fb60 	bl	800e518 <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800ce58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d012      	beq.n	800ce86 <_ux_device_stack_configuration_set+0xc6>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800ce60:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ce64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800ce6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ce72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce76:	4413      	add	r3, r2
 800ce78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 800ce7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1d3      	bne.n	800ce2c <_ux_device_stack_configuration_set+0x6c>
 800ce84:	e000      	b.n	800ce88 <_ux_device_stack_configuration_set+0xc8>
                break;
 800ce86:	bf00      	nop
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 800ce88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d104      	bne.n	800ce9a <_ux_device_stack_configuration_set+0xda>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d001      	beq.n	800ce9a <_ux_device_stack_configuration_set+0xda>
        return(UX_ERROR);
 800ce96:	23ff      	movs	r3, #255	; 0xff
 800ce98:	e131      	b.n	800d0fe <_ux_device_stack_configuration_set+0x33e>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800ce9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce9e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d02d      	beq.n	800cf02 <_ux_device_stack_configuration_set+0x142>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800cea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ceaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ceae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800ceb2:	e022      	b.n	800cefa <_ux_device_stack_configuration_set+0x13a>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	60fb      	str	r3, [r7, #12]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800ceb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cebc:	617b      	str	r3, [r7, #20]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 800cebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800cec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cecc:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 800cece:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d006      	beq.n	800cee4 <_ux_device_stack_configuration_set+0x124>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 800ced6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ceda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cedc:	f107 020c 	add.w	r2, r7, #12
 800cee0:	4610      	mov	r0, r2
 800cee2:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800cee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceea:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800ceec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800cef0:	f000 ff46 	bl	800dd80 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800cef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        while (interface_ptr != UX_NULL)
 800cefa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1d8      	bne.n	800ceb4 <_ux_device_stack_configuration_set+0xf4>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800cf02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf06:	2200      	movs	r2, #0
 800cf08:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800cf0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf10:	2201      	movs	r2, #1
 800cf12:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800cf14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf18:	699b      	ldr	r3, [r3, #24]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	2113      	movs	r1, #19
 800cf1e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cf22:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d101      	bne.n	800cf2e <_ux_device_stack_configuration_set+0x16e>
        return(UX_SUCCESS);
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	e0e7      	b.n	800d0fe <_ux_device_stack_configuration_set+0x33e>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800cf2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 800cf38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf3c:	33d0      	adds	r3, #208	; 0xd0
    _ux_utility_descriptor_parse(device_framework,
 800cf3e:	2208      	movs	r2, #8
 800cf40:	4948      	ldr	r1, [pc, #288]	; (800d064 <_ux_device_stack_configuration_set+0x2a4>)
 800cf42:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800cf46:	f001 fae7 	bl	800e518 <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800cf4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <_ux_device_stack_configuration_set+0x198>
 800cf54:	2202      	movs	r2, #2
 800cf56:	e000      	b.n	800cf5a <_ux_device_stack_configuration_set+0x19a>
 800cf58:	2201      	movs	r2, #1
 800cf5a:	4b41      	ldr	r3, [pc, #260]	; (800d060 <_ux_device_stack_configuration_set+0x2a0>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800cf62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf64:	095a      	lsrs	r2, r3, #5
 800cf66:	4b3e      	ldr	r3, [pc, #248]	; (800d060 <_ux_device_stack_configuration_set+0x2a0>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f002 0201 	and.w	r2, r2, #1
 800cf6e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800cf72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800cf78:	e0af      	b.n	800d0da <_ux_device_stack_configuration_set+0x31a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800cf7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800cf84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf88:	785b      	ldrb	r3, [r3, #1]
 800cf8a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800cf8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cf92:	2b0b      	cmp	r3, #11
 800cf94:	d10e      	bne.n	800cfb4 <_ux_device_stack_configuration_set+0x1f4>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 800cf96:	2301      	movs	r3, #1
 800cf98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800cf9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cfa0:	3302      	adds	r3, #2
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800cfa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cfac:	3303      	adds	r3, #3
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800cfb4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cfb8:	2b04      	cmp	r3, #4
 800cfba:	f040 8080 	bne.w	800d0be <_ux_device_stack_configuration_set+0x2fe>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800cfbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cfc2:	2209      	movs	r2, #9
 800cfc4:	4928      	ldr	r1, [pc, #160]	; (800d068 <_ux_device_stack_configuration_set+0x2a8>)
 800cfc6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800cfca:	f001 faa5 	bl	800e518 <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 800cfce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d174      	bne.n	800d0be <_ux_device_stack_configuration_set+0x2fe>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 800cfd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d147      	bne.n	800d06c <_ux_device_stack_configuration_set+0x2ac>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800cfdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfde:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d126      	bne.n	800d034 <_ux_device_stack_configuration_set+0x274>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800cfe6:	4b1e      	ldr	r3, [pc, #120]	; (800d060 <_ux_device_stack_configuration_set+0x2a0>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800cfee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800cff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d124      	bne.n	800d046 <_ux_device_stack_configuration_set+0x286>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800cffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d006:	429a      	cmp	r2, r3
 800d008:	d11d      	bne.n	800d046 <_ux_device_stack_configuration_set+0x286>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800d00a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d00e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	429a      	cmp	r2, r3
 800d016:	d116      	bne.n	800d046 <_ux_device_stack_configuration_set+0x286>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800d018:	4b11      	ldr	r3, [pc, #68]	; (800d060 <_ux_device_stack_configuration_set+0x2a0>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d01e:	3356      	adds	r3, #86	; 0x56
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4413      	add	r3, r2
 800d024:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d028:	605a      	str	r2, [r3, #4]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800d02a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d02e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d032:	e008      	b.n	800d046 <_ux_device_stack_configuration_set+0x286>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800d034:	4b0a      	ldr	r3, [pc, #40]	; (800d060 <_ux_device_stack_configuration_set+0x2a0>)
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d03a:	3356      	adds	r3, #86	; 0x56
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4413      	add	r3, r2
 800d040:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d044:	605a      	str	r2, [r3, #4]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 800d046:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d04a:	3b01      	subs	r3, #1
 800d04c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 800d050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d054:	2b00      	cmp	r3, #0
 800d056:	d12b      	bne.n	800d0b0 <_ux_device_stack_configuration_set+0x2f0>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800d058:	2300      	movs	r3, #0
 800d05a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d05e:	e027      	b.n	800d0b0 <_ux_device_stack_configuration_set+0x2f0>
 800d060:	20005cc4 	.word	0x20005cc4
 800d064:	20000040 	.word	0x20000040
 800d068:	20000048 	.word	0x20000048
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800d06c:	4b26      	ldr	r3, [pc, #152]	; (800d108 <_ux_device_stack_configuration_set+0x348>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800d074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800d078:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d116      	bne.n	800d0b0 <_ux_device_stack_configuration_set+0x2f0>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800d082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d088:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d10f      	bne.n	800d0b0 <_ux_device_stack_configuration_set+0x2f0>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800d090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d094:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d108      	bne.n	800d0b0 <_ux_device_stack_configuration_set+0x2f0>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800d09e:	4b1a      	ldr	r3, [pc, #104]	; (800d108 <_ux_device_stack_configuration_set+0x348>)
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a4:	3356      	adds	r3, #86	; 0x56
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d0ae:	605a      	str	r2, [r3, #4]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800d0b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800d0ba:	f000 fea9 	bl	800de10 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800d0be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d0c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800d0cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d0d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    while (device_framework_length != 0)
 800d0da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f47f af4b 	bne.w	800cf7a <_ux_device_stack_configuration_set+0x1ba>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800d0e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d0e8:	2203      	movs	r2, #3
 800d0ea:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800d0ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	2203      	movs	r2, #3
 800d0f4:	2113      	movs	r1, #19
 800d0f6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800d0fa:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	37b0      	adds	r7, #176	; 0xb0
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20005cc4 	.word	0x20005cc4

0800d10c <_ux_device_stack_control_request_process>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800d10c:	b590      	push	{r4, r7, lr}
 800d10e:	b09d      	sub	sp, #116	; 0x74
 800d110:	af02      	add	r7, sp, #8
 800d112:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 800d114:	23ff      	movs	r3, #255	; 0xff
 800d116:	65fb      	str	r3, [r7, #92]	; 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d118:	4b9f      	ldr	r3, [pc, #636]	; (800d398 <_ux_device_stack_control_request_process+0x28c>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d11e:	4b9e      	ldr	r3, [pc, #632]	; (800d398 <_ux_device_stack_control_request_process+0x28c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3320      	adds	r3, #32
 800d124:	657b      	str	r3, [r7, #84]	; 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f040 812e 	bne.w	800d38c <_ux_device_stack_control_request_process+0x280>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d136:	667b      	str	r3, [r7, #100]	; 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d13e:	653b      	str	r3, [r7, #80]	; 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3354      	adds	r3, #84	; 0x54
 800d144:	3302      	adds	r3, #2
 800d146:	4618      	mov	r0, r3
 800d148:	f001 fd5d 	bl	800ec06 <_ux_utility_short_get>
 800d14c:	64f8      	str	r0, [r7, #76]	; 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	3354      	adds	r3, #84	; 0x54
 800d152:	3304      	adds	r3, #4
 800d154:	4618      	mov	r0, r3
 800d156:	f001 fd56 	bl	800ec06 <_ux_utility_short_get>
 800d15a:	64b8      	str	r0, [r7, #72]	; 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	3354      	adds	r3, #84	; 0x54
 800d160:	3306      	adds	r3, #6
 800d162:	4618      	mov	r0, r3
 800d164:	f001 fd4f 	bl	800ec06 <_ux_utility_short_get>
 800d168:	6478      	str	r0, [r7, #68]	; 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800d16a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d16c:	2b06      	cmp	r3, #6
 800d16e:	d002      	beq.n	800d176 <_ux_device_stack_control_request_process+0x6a>
 800d170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d172:	2b07      	cmp	r3, #7
 800d174:	d10d      	bne.n	800d192 <_ux_device_stack_control_request_process+0x86>
 800d176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d178:	0a1b      	lsrs	r3, r3, #8
 800d17a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d007      	beq.n	800d192 <_ux_device_stack_control_request_process+0x86>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800d182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d184:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800d188:	667b      	str	r3, [r7, #100]	; 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 800d18a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d18c:	f043 0320 	orr.w	r3, r3, #32
 800d190:	667b      	str	r3, [r7, #100]	; 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800d192:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d194:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d198:	2b40      	cmp	r3, #64	; 0x40
 800d19a:	d134      	bne.n	800d206 <_ux_device_stack_control_request_process+0xfa>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 800d19c:	4b7e      	ldr	r3, [pc, #504]	; (800d398 <_ux_device_stack_control_request_process+0x28c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800d1a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d12d      	bne.n	800d206 <_ux_device_stack_control_request_process+0xfa>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800d1aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1ae:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800d1b0:	4b79      	ldr	r3, [pc, #484]	; (800d398 <_ux_device_stack_control_request_process+0x28c>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f8d3 41c8 	ldr.w	r4, [r3, #456]	; 0x1c8
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	f107 020c 	add.w	r2, r7, #12
 800d1c0:	9201      	str	r2, [sp, #4]
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d1ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d1cc:	47a0      	blx	r4
 800d1ce:	65f8      	str	r0, [r7, #92]	; 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 800d1d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d110      	bne.n	800d1f8 <_ux_device_stack_control_request_process+0xec>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 800d1d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1d8:	333c      	adds	r3, #60	; 0x3c
 800d1da:	643b      	str	r3, [r7, #64]	; 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1de:	3330      	adds	r3, #48	; 0x30
 800d1e0:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2203      	movs	r2, #3
 800d1e6:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f001 f81a 	bl	800e228 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	e0ca      	b.n	800d38e <_ux_device_stack_control_request_process+0x282>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800d1f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1fa:	333c      	adds	r3, #60	; 0x3c
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 fb5d 	bl	800d8bc <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 800d202:	2300      	movs	r3, #0
 800d204:	e0c3      	b.n	800d38e <_ux_device_stack_control_request_process+0x282>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800d206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d208:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d20c:	2b20      	cmp	r3, #32
 800d20e:	d004      	beq.n	800d21a <_ux_device_stack_control_request_process+0x10e>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 800d210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d212:	f003 0360 	and.w	r3, r3, #96	; 0x60
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800d216:	2b40      	cmp	r3, #64	; 0x40
 800d218:	d14b      	bne.n	800d2b2 <_ux_device_stack_control_request_process+0x1a6>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800d21a:	2304      	movs	r3, #4
 800d21c:	613b      	str	r3, [r7, #16]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800d21e:	2300      	movs	r3, #0
 800d220:	663b      	str	r3, [r7, #96]	; 0x60
 800d222:	e037      	b.n	800d294 <_ux_device_stack_control_request_process+0x188>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800d224:	4b5c      	ldr	r3, [pc, #368]	; (800d398 <_ux_device_stack_control_request_process+0x28c>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d22a:	3356      	adds	r3, #86	; 0x56
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 800d234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d236:	2b00      	cmp	r3, #0
 800d238:	d026      	beq.n	800d288 <_ux_device_stack_control_request_process+0x17c>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800d23a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d23c:	f003 0303 	and.w	r3, r3, #3
 800d240:	2b01      	cmp	r3, #1
 800d242:	d114      	bne.n	800d26e <_ux_device_stack_control_request_process+0x162>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 800d244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d246:	b2db      	uxtb	r3, r3
 800d248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d11e      	bne.n	800d28c <_ux_device_stack_control_request_process+0x180>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 800d24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d250:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800d254:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 800d256:	2b07      	cmp	r3, #7
 800d258:	d109      	bne.n	800d26e <_ux_device_stack_control_request_process+0x162>
                        ((class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 800d25a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d106      	bne.n	800d26e <_ux_device_stack_control_request_process+0x162>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d266:	461a      	mov	r2, r3
                         (request == 0x00) &&
 800d268:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d10e      	bne.n	800d28c <_ux_device_stack_control_request_process+0x180>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 800d26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d270:	633b      	str	r3, [r7, #48]	; 0x30

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800d272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d276:	f107 0210 	add.w	r2, r7, #16
 800d27a:	4610      	mov	r0, r2
 800d27c:	4798      	blx	r3
 800d27e:	65f8      	str	r0, [r7, #92]	; 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 800d280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d282:	2b00      	cmp	r3, #0
 800d284:	d00a      	beq.n	800d29c <_ux_device_stack_control_request_process+0x190>
 800d286:	e002      	b.n	800d28e <_ux_device_stack_control_request_process+0x182>
                    continue;
 800d288:	bf00      	nop
 800d28a:	e000      	b.n	800d28e <_ux_device_stack_control_request_process+0x182>
                        continue;
 800d28c:	bf00      	nop
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800d28e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d290:	3301      	adds	r3, #1
 800d292:	663b      	str	r3, [r7, #96]	; 0x60
 800d294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d296:	2b0f      	cmp	r3, #15
 800d298:	d9c4      	bls.n	800d224 <_ux_device_stack_control_request_process+0x118>
 800d29a:	e000      	b.n	800d29e <_ux_device_stack_control_request_process+0x192>

                    /* We are done, break the loop!  */
                    break;
 800d29c:	bf00      	nop

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 800d29e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d004      	beq.n	800d2ae <_ux_device_stack_control_request_process+0x1a2>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800d2a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2a6:	333c      	adds	r3, #60	; 0x3c
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f000 fb07 	bl	800d8bc <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 800d2ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2b0:	e06d      	b.n	800d38e <_ux_device_stack_control_request_process+0x282>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 800d2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2b4:	2b0c      	cmp	r3, #12
 800d2b6:	d85e      	bhi.n	800d376 <_ux_device_stack_control_request_process+0x26a>
 800d2b8:	a201      	add	r2, pc, #4	; (adr r2, 800d2c0 <_ux_device_stack_control_request_process+0x1b4>)
 800d2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2be:	bf00      	nop
 800d2c0:	0800d2f5 	.word	0x0800d2f5
 800d2c4:	0800d303 	.word	0x0800d303
 800d2c8:	0800d377 	.word	0x0800d377
 800d2cc:	0800d311 	.word	0x0800d311
 800d2d0:	0800d377 	.word	0x0800d377
 800d2d4:	0800d31f 	.word	0x0800d31f
 800d2d8:	0800d335 	.word	0x0800d335
 800d2dc:	0800d343 	.word	0x0800d343
 800d2e0:	0800d349 	.word	0x0800d349
 800d2e4:	0800d351 	.word	0x0800d351
 800d2e8:	0800d35b 	.word	0x0800d35b
 800d2ec:	0800d365 	.word	0x0800d365
 800d2f0:	0800d371 	.word	0x0800d371
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800d2f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d2f8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d2fa:	f000 fb17 	bl	800d92c <_ux_device_stack_get_status>
 800d2fe:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800d300:	e03c      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800d302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d304:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d306:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d308:	f7ff fcd8 	bl	800ccbc <_ux_device_stack_clear_feature>
 800d30c:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800d30e:	e035      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800d310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d312:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d314:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d316:	f000 fedf 	bl	800e0d8 <_ux_device_stack_set_feature>
 800d31a:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800d31c:	e02e      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 800d31e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d320:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d322:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800d324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d326:	699b      	ldr	r3, [r3, #24]
 800d328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d32a:	2111      	movs	r1, #17
 800d32c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d32e:	4798      	blx	r3
 800d330:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800d332:	e023      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800d334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d336:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d338:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d33a:	f000 f82f 	bl	800d39c <_ux_device_stack_descriptor_send>
 800d33e:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800d340:	e01c      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800d342:	2354      	movs	r3, #84	; 0x54
 800d344:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800d346:	e019      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800d348:	f7ff fd16 	bl	800cd78 <_ux_device_stack_configuration_get>
 800d34c:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800d34e:	e015      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800d350:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d352:	f7ff fd35 	bl	800cdc0 <_ux_device_stack_configuration_set>
 800d356:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800d358:	e010      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 800d35a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d35c:	f7ff f9ee 	bl	800c73c <_ux_device_stack_alternate_setting_get>
 800d360:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800d362:	e00b      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800d364:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d366:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d368:	f7ff fa26 	bl	800c7b8 <_ux_device_stack_alternate_setting_set>
 800d36c:	65f8      	str	r0, [r7, #92]	; 0x5c
            break;
 800d36e:	e005      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 800d370:	2300      	movs	r3, #0
 800d372:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800d374:	e002      	b.n	800d37c <_ux_device_stack_control_request_process+0x270>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 800d376:	2354      	movs	r3, #84	; 0x54
 800d378:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800d37a:	bf00      	nop
        }

        if (status != UX_SUCCESS)
 800d37c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d004      	beq.n	800d38c <_ux_device_stack_control_request_process+0x280>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800d382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d384:	333c      	adds	r3, #60	; 0x3c
 800d386:	4618      	mov	r0, r3
 800d388:	f000 fa98 	bl	800d8bc <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 800d38c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800d38e:	4618      	mov	r0, r3
 800d390:	376c      	adds	r7, #108	; 0x6c
 800d392:	46bd      	mov	sp, r7
 800d394:	bd90      	pop	{r4, r7, pc}
 800d396:	bf00      	nop
 800d398:	20005cc4 	.word	0x20005cc4

0800d39c <_ux_device_stack_descriptor_send>:
/*                                            internal clean up,          */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b0a2      	sub	sp, #136	; 0x88
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	677b      	str	r3, [r7, #116]	; 0x74
UINT                            status =  UX_ERROR;
 800d3ac:	23ff      	movs	r3, #255	; 0xff
 800d3ae:	673b      	str	r3, [r7, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d3b0:	4ba4      	ldr	r3, [pc, #656]	; (800d644 <_ux_device_stack_descriptor_send+0x2a8>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d3b6:	4ba3      	ldr	r3, [pc, #652]	; (800d644 <_ux_device_stack_descriptor_send+0x2a8>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3320      	adds	r3, #32
 800d3bc:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800d3be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3c0:	333c      	adds	r3, #60	; 0x3c
 800d3c2:	657b      	str	r3, [r7, #84]	; 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d3c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3c6:	3330      	adds	r3, #48	; 0x30
 800d3c8:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800d3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3cc:	2203      	movs	r2, #3
 800d3ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	0a1b      	lsrs	r3, r3, #8
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	3b01      	subs	r3, #1
 800d3ec:	2b0e      	cmp	r3, #14
 800d3ee:	f200 81f8 	bhi.w	800d7e2 <_ux_device_stack_descriptor_send+0x446>
 800d3f2:	a201      	add	r2, pc, #4	; (adr r2, 800d3f8 <_ux_device_stack_descriptor_send+0x5c>)
 800d3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f8:	0800d435 	.word	0x0800d435
 800d3fc:	0800d4d9 	.word	0x0800d4d9
 800d400:	0800d615 	.word	0x0800d615
 800d404:	0800d7e3 	.word	0x0800d7e3
 800d408:	0800d7e3 	.word	0x0800d7e3
 800d40c:	0800d43f 	.word	0x0800d43f
 800d410:	0800d4d9 	.word	0x0800d4d9
 800d414:	0800d7e3 	.word	0x0800d7e3
 800d418:	0800d44f 	.word	0x0800d44f
 800d41c:	0800d7e3 	.word	0x0800d7e3
 800d420:	0800d7e3 	.word	0x0800d7e3
 800d424:	0800d7e3 	.word	0x0800d7e3
 800d428:	0800d7e3 	.word	0x0800d7e3
 800d42c:	0800d7e3 	.word	0x0800d7e3
 800d430:	0800d4d9 	.word	0x0800d4d9
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b12      	cmp	r3, #18
 800d438:	d901      	bls.n	800d43e <_ux_device_stack_descriptor_send+0xa2>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800d43a:	2312      	movs	r3, #18
 800d43c:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b06      	cmp	r3, #6
 800d442:	d104      	bne.n	800d44e <_ux_device_stack_descriptor_send+0xb2>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2b0a      	cmp	r3, #10
 800d448:	d901      	bls.n	800d44e <_ux_device_stack_descriptor_send+0xb2>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800d44a:	230a      	movs	r3, #10
 800d44c:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2b09      	cmp	r3, #9
 800d452:	d104      	bne.n	800d45e <_ux_device_stack_descriptor_send+0xc2>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b05      	cmp	r3, #5
 800d458:	d901      	bls.n	800d45e <_ux_device_stack_descriptor_send+0xc2>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800d45a:	2305      	movs	r3, #5
 800d45c:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800d45e:	4b79      	ldr	r3, [pc, #484]	; (800d644 <_ux_device_stack_descriptor_send+0x2a8>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800d466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800d46a:	4b76      	ldr	r3, [pc, #472]	; (800d644 <_ux_device_stack_descriptor_send+0x2a8>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800d472:	67bb      	str	r3, [r7, #120]	; 0x78
        device_framework_end = device_framework + device_framework_length;
 800d474:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d47a:	4413      	add	r3, r2
 800d47c:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800d47e:	e025      	b.n	800d4cc <_ux_device_stack_descriptor_send+0x130>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800d480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	647b      	str	r3, [r7, #68]	; 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800d488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d48c:	3301      	adds	r3, #1
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	461a      	mov	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	4293      	cmp	r3, r2
 800d496:	d10f      	bne.n	800d4b8 <_ux_device_stack_descriptor_send+0x11c>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800d498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d49e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f001 f9e3 	bl	800e86e <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d4ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d4ae:	f000 febb 	bl	800e228 <_ux_device_stack_transfer_request>
 800d4b2:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 800d4b4:	bf00      	nop
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800d4b6:	e19f      	b.n	800d7f8 <_ux_device_stack_descriptor_send+0x45c>
            device_framework_length -=  descriptor_length;
 800d4b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d4ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework +=  descriptor_length;
 800d4c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d4c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 800d4cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d4d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d3d4      	bcc.n	800d480 <_ux_device_stack_descriptor_send+0xe4>
        break;
 800d4d6:	e18f      	b.n	800d7f8 <_ux_device_stack_descriptor_send+0x45c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2b07      	cmp	r3, #7
 800d4dc:	d110      	bne.n	800d500 <_ux_device_stack_descriptor_send+0x164>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800d4de:	4b59      	ldr	r3, [pc, #356]	; (800d644 <_ux_device_stack_descriptor_send+0x2a8>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800d4e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800d4ea:	4b56      	ldr	r3, [pc, #344]	; (800d644 <_ux_device_stack_descriptor_send+0x2a8>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800d4f2:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 800d4f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d4f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4fa:	4413      	add	r3, r2
 800d4fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d4fe:	e051      	b.n	800d5a4 <_ux_device_stack_descriptor_send+0x208>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800d500:	4b50      	ldr	r3, [pc, #320]	; (800d644 <_ux_device_stack_descriptor_send+0x2a8>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800d508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800d50c:	4b4d      	ldr	r3, [pc, #308]	; (800d644 <_ux_device_stack_descriptor_send+0x2a8>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800d514:	67bb      	str	r3, [r7, #120]	; 0x78
            device_framework_end = device_framework + device_framework_length;
 800d516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d51a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d51c:	4413      	add	r3, r2
 800d51e:	67fb      	str	r3, [r7, #124]	; 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800d520:	e040      	b.n	800d5a4 <_ux_device_stack_descriptor_send+0x208>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800d522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	647b      	str	r3, [r7, #68]	; 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2b0f      	cmp	r3, #15
 800d52e:	d112      	bne.n	800d556 <_ux_device_stack_descriptor_send+0x1ba>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800d530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d534:	3301      	adds	r3, #1
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	2b0f      	cmp	r3, #15
 800d53a:	d129      	bne.n	800d590 <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800d53c:	f107 0314 	add.w	r3, r7, #20
 800d540:	2204      	movs	r2, #4
 800d542:	4941      	ldr	r1, [pc, #260]	; (800d648 <_ux_device_stack_descriptor_send+0x2ac>)
 800d544:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d548:	f000 ffe6 	bl	800e518 <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	677b      	str	r3, [r7, #116]	; 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800d550:	2300      	movs	r3, #0
 800d552:	673b      	str	r3, [r7, #112]	; 0x70
                    break;
 800d554:	e02b      	b.n	800d5ae <_ux_device_stack_descriptor_send+0x212>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800d556:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d55a:	3301      	adds	r3, #1
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	2b02      	cmp	r3, #2
 800d560:	d116      	bne.n	800d590 <_ux_device_stack_descriptor_send+0x1f4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800d562:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d568:	429a      	cmp	r2, r3
 800d56a:	d10c      	bne.n	800d586 <_ux_device_stack_descriptor_send+0x1ea>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800d56c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d570:	2208      	movs	r2, #8
 800d572:	4936      	ldr	r1, [pc, #216]	; (800d64c <_ux_device_stack_descriptor_send+0x2b0>)
 800d574:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800d578:	f000 ffce 	bl	800e518 <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800d57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57e:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800d580:	2300      	movs	r3, #0
 800d582:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
 800d584:	e013      	b.n	800d5ae <_ux_device_stack_descriptor_send+0x212>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800d586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d58a:	3301      	adds	r3, #1
 800d58c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800d590:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d594:	1ad3      	subs	r3, r2, r3
 800d596:	67bb      	str	r3, [r7, #120]	; 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800d598:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d59e:	4413      	add	r3, r2
 800d5a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        while (device_framework < device_framework_end)
 800d5a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d5a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d3b9      	bcc.n	800d522 <_ux_device_stack_descriptor_send+0x186>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800d5ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f040 811e 	bne.w	800d7f2 <_ux_device_stack_descriptor_send+0x456>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800d5b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d202      	bcs.n	800d5c4 <_ux_device_stack_descriptor_send+0x228>
                length =  target_descriptor_length;
 800d5be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d5c2:	e001      	b.n	800d5c8 <_ux_device_stack_descriptor_send+0x22c>
            else
                length =  host_length;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800d5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5ce:	d90c      	bls.n	800d5ea <_ux_device_stack_descriptor_send+0x24e>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800d5d0:	2212      	movs	r2, #18
 800d5d2:	2109      	movs	r1, #9
 800d5d4:	2002      	movs	r0, #2
 800d5d6:	f000 feb1 	bl	800e33c <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5dc:	699b      	ldr	r3, [r3, #24]
 800d5de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5e0:	2114      	movs	r1, #20
 800d5e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d5e4:	4798      	blx	r3
 800d5e6:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 800d5e8:	e106      	b.n	800d7f8 <_ux_device_stack_descriptor_send+0x45c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800d5ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d5f0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f001 f93a 	bl	800e86e <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800d5fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	3301      	adds	r3, #1
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	b2d2      	uxtb	r2, r2
 800d604:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d60a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d60c:	f000 fe0c 	bl	800e228 <_ux_device_stack_transfer_request>
 800d610:	6738      	str	r0, [r7, #112]	; 0x70
        }
        break;
 800d612:	e0ee      	b.n	800d7f2 <_ux_device_stack_descriptor_send+0x456>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800d614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d616:	2b00      	cmp	r3, #0
 800d618:	d14f      	bne.n	800d6ba <_ux_device_stack_descriptor_send+0x31e>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800d61a:	4b0a      	ldr	r3, [pc, #40]	; (800d644 <_ux_device_stack_descriptor_send+0x2a8>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d622:	3302      	adds	r3, #2
 800d624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d628:	d912      	bls.n	800d650 <_ux_device_stack_descriptor_send+0x2b4>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800d62a:	2212      	movs	r2, #18
 800d62c:	2109      	movs	r1, #9
 800d62e:	2002      	movs	r0, #2
 800d630:	f000 fe84 	bl	800e33c <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d636:	699b      	ldr	r3, [r3, #24]
 800d638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d63a:	2114      	movs	r1, #20
 800d63c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d63e:	4798      	blx	r3
 800d640:	6738      	str	r0, [r7, #112]	; 0x70
                break;
 800d642:	e0d9      	b.n	800d7f8 <_ux_device_stack_descriptor_send+0x45c>
 800d644:	20005cc4 	.word	0x20005cc4
 800d648:	20000054 	.word	0x20000054
 800d64c:	20000040 	.word	0x20000040
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800d650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800d656:	4b6b      	ldr	r3, [pc, #428]	; (800d804 <_ux_device_stack_descriptor_send+0x468>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	3302      	adds	r3, #2
 800d662:	b2da      	uxtb	r2, r3
 800d664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d666:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800d668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d66a:	3301      	adds	r3, #1
 800d66c:	2203      	movs	r2, #3
 800d66e:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800d670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d672:	1c98      	adds	r0, r3, #2
 800d674:	4b63      	ldr	r3, [pc, #396]	; (800d804 <_ux_device_stack_descriptor_send+0x468>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800d67c:	4b61      	ldr	r3, [pc, #388]	; (800d804 <_ux_device_stack_descriptor_send+0x468>)
 800d67e:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800d680:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d684:	461a      	mov	r2, r3
 800d686:	f001 f8f2 	bl	800e86e <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800d68a:	4b5e      	ldr	r3, [pc, #376]	; (800d804 <_ux_device_stack_descriptor_send+0x468>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d692:	3302      	adds	r3, #2
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	429a      	cmp	r2, r3
 800d698:	d906      	bls.n	800d6a8 <_ux_device_stack_descriptor_send+0x30c>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800d69a:	4b5a      	ldr	r3, [pc, #360]	; (800d804 <_ux_device_stack_descriptor_send+0x468>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d6a2:	3302      	adds	r3, #2
 800d6a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6a6:	e001      	b.n	800d6ac <_ux_device_stack_descriptor_send+0x310>
            else
                length =  host_length;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d6b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d6b2:	f000 fdb9 	bl	800e228 <_ux_device_stack_transfer_request>
 800d6b6:	6738      	str	r0, [r7, #112]	; 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800d6b8:	e09d      	b.n	800d7f6 <_ux_device_stack_descriptor_send+0x45a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800d6ba:	4b52      	ldr	r3, [pc, #328]	; (800d804 <_ux_device_stack_descriptor_send+0x468>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d6c2:	66bb      	str	r3, [r7, #104]	; 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800d6c4:	4b4f      	ldr	r3, [pc, #316]	; (800d804 <_ux_device_stack_descriptor_send+0x468>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800d6cc:	667b      	str	r3, [r7, #100]	; 0x64
            while (string_framework_length != 0)
 800d6ce:	e07a      	b.n	800d7c6 <_ux_device_stack_descriptor_send+0x42a>
                if (_ux_utility_short_get(string_framework) == request_index)
 800d6d0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800d6d2:	f001 fa98 	bl	800ec06 <_ux_utility_short_get>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d164      	bne.n	800d7a8 <_ux_device_stack_descriptor_send+0x40c>
                    if (*(string_framework + 2) == descriptor_index)
 800d6de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6e0:	3302      	adds	r3, #2
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d15d      	bne.n	800d7a8 <_ux_device_stack_descriptor_send+0x40c>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800d6ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6ee:	3303      	adds	r3, #3
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6fa:	dd0c      	ble.n	800d716 <_ux_device_stack_descriptor_send+0x37a>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800d6fc:	2212      	movs	r2, #18
 800d6fe:	2109      	movs	r1, #9
 800d700:	2002      	movs	r0, #2
 800d702:	f000 fe1b 	bl	800e33c <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d708:	699b      	ldr	r3, [r3, #24]
 800d70a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d70c:	2114      	movs	r1, #20
 800d70e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d710:	4798      	blx	r3
 800d712:	6738      	str	r0, [r7, #112]	; 0x70
                            break;
 800d714:	e05a      	b.n	800d7cc <_ux_device_stack_descriptor_send+0x430>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800d716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	64bb      	str	r3, [r7, #72]	; 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800d71c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d71e:	3303      	adds	r3, #3
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	3301      	adds	r3, #1
 800d724:	b2db      	uxtb	r3, r3
 800d726:	005b      	lsls	r3, r3, #1
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d72c:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800d72e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d730:	3301      	adds	r3, #1
 800d732:	2203      	movs	r2, #3
 800d734:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800d736:	2300      	movs	r3, #0
 800d738:	663b      	str	r3, [r7, #96]	; 0x60
 800d73a:	e015      	b.n	800d768 <_ux_device_stack_descriptor_send+0x3cc>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800d73c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d73e:	3304      	adds	r3, #4
 800d740:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d742:	441a      	add	r2, r3
 800d744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d746:	3301      	adds	r3, #1
 800d748:	005b      	lsls	r3, r3, #1
 800d74a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d74c:	440b      	add	r3, r1
 800d74e:	7812      	ldrb	r2, [r2, #0]
 800d750:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800d752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d754:	3301      	adds	r3, #1
 800d756:	005b      	lsls	r3, r3, #1
 800d758:	3301      	adds	r3, #1
 800d75a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d75c:	4413      	add	r3, r2
 800d75e:	2200      	movs	r2, #0
 800d760:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800d762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d764:	3301      	adds	r3, #1
 800d766:	663b      	str	r3, [r7, #96]	; 0x60
 800d768:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d76a:	3303      	adds	r3, #3
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d772:	4293      	cmp	r3, r2
 800d774:	d3e2      	bcc.n	800d73c <_ux_device_stack_descriptor_send+0x3a0>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800d776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d778:	3303      	adds	r3, #3
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	3301      	adds	r3, #1
 800d77e:	005b      	lsls	r3, r3, #1
 800d780:	461a      	mov	r2, r3
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4293      	cmp	r3, r2
 800d786:	d906      	bls.n	800d796 <_ux_device_stack_descriptor_send+0x3fa>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800d788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d78a:	3303      	adds	r3, #3
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	3301      	adds	r3, #1
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d794:	e001      	b.n	800d79a <_ux_device_stack_descriptor_send+0x3fe>
                            length =  host_length;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	66fb      	str	r3, [r7, #108]	; 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d79e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d7a0:	f000 fd42 	bl	800e228 <_ux_device_stack_transfer_request>
 800d7a4:	6738      	str	r0, [r7, #112]	; 0x70
                        break;
 800d7a6:	e011      	b.n	800d7cc <_ux_device_stack_descriptor_send+0x430>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800d7a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7aa:	3303      	adds	r3, #3
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7b2:	1a9b      	subs	r3, r3, r2
 800d7b4:	3b04      	subs	r3, #4
 800d7b6:	667b      	str	r3, [r7, #100]	; 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800d7b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7ba:	3303      	adds	r3, #3
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	3304      	adds	r3, #4
 800d7c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d7c2:	4413      	add	r3, r2
 800d7c4:	66bb      	str	r3, [r7, #104]	; 0x68
            while (string_framework_length != 0)
 800d7c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d181      	bne.n	800d6d0 <_ux_device_stack_descriptor_send+0x334>
            if (string_framework_length == 0)
 800d7cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d111      	bne.n	800d7f6 <_ux_device_stack_descriptor_send+0x45a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d7d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7d8:	2114      	movs	r1, #20
 800d7da:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d7dc:	4798      	blx	r3
                return(UX_ERROR);
 800d7de:	23ff      	movs	r3, #255	; 0xff
 800d7e0:	e00b      	b.n	800d7fa <_ux_device_stack_descriptor_send+0x45e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d7e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7e8:	2114      	movs	r1, #20
 800d7ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d7ec:	4798      	blx	r3
        return(UX_ERROR);
 800d7ee:	23ff      	movs	r3, #255	; 0xff
 800d7f0:	e003      	b.n	800d7fa <_ux_device_stack_descriptor_send+0x45e>
        break;
 800d7f2:	bf00      	nop
 800d7f4:	e000      	b.n	800d7f8 <_ux_device_stack_descriptor_send+0x45c>
        break;
 800d7f6:	bf00      	nop
    }

    /* Return the status to the caller.  */
    return(status);
 800d7f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3788      	adds	r7, #136	; 0x88
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	20005cc4 	.word	0x20005cc4

0800d808 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b092      	sub	sp, #72	; 0x48
 800d80c:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800d80e:	23ff      	movs	r3, #255	; 0xff
 800d810:	643b      	str	r3, [r7, #64]	; 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d812:	4b29      	ldr	r3, [pc, #164]	; (800d8b8 <_ux_device_stack_disconnect+0xb0>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d818:	4b27      	ldr	r3, [pc, #156]	; (800d8b8 <_ux_device_stack_disconnect+0xb0>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	3320      	adds	r3, #32
 800d81e:	63bb      	str	r3, [r7, #56]	; 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2b03      	cmp	r3, #3
 800d826:	d123      	bne.n	800d870 <_ux_device_stack_disconnect+0x68>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800d828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d82e:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800d830:	e018      	b.n	800d864 <_ux_device_stack_disconnect+0x5c>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800d832:	2303      	movs	r3, #3
 800d834:	607b      	str	r3, [r7, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800d836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d838:	60fb      	str	r3, [r7, #12]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800d83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	637b      	str	r3, [r7, #52]	; 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800d840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d842:	627b      	str	r3, [r7, #36]	; 0x24

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800d844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d846:	2b00      	cmp	r3, #0
 800d848:	d004      	beq.n	800d854 <_ux_device_stack_disconnect+0x4c>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800d84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d84e:	1d3a      	adds	r2, r7, #4
 800d850:	4610      	mov	r0, r2
 800d852:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800d854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d858:	633b      	str	r3, [r7, #48]	; 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800d85a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d85c:	f000 fa90 	bl	800dd80 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800d860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d862:	647b      	str	r3, [r7, #68]	; 0x44
        while (interface_ptr != UX_NULL)
 800d864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1e3      	bne.n	800d832 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800d86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86c:	2201      	movs	r2, #1
 800d86e:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800d870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d107      	bne.n	800d888 <_ux_device_stack_disconnect+0x80>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800d878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d87a:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800d87c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d87e:	323c      	adds	r2, #60	; 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800d880:	210f      	movs	r1, #15
 800d882:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d884:	4798      	blx	r3
 800d886:	6438      	str	r0, [r7, #64]	; 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800d888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88a:	2200      	movs	r2, #0
 800d88c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	2200      	movs	r2, #0
 800d894:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800d896:	4b08      	ldr	r3, [pc, #32]	; (800d8b8 <_ux_device_stack_disconnect+0xb0>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d005      	beq.n	800d8ae <_ux_device_stack_disconnect+0xa6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800d8a2:	4b05      	ldr	r3, [pc, #20]	; (800d8b8 <_ux_device_stack_disconnect+0xb0>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800d8aa:	200a      	movs	r0, #10
 800d8ac:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800d8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3748      	adds	r7, #72	; 0x48
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	20005cc4 	.word	0x20005cc4

0800d8bc <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b088      	sub	sp, #32
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d8c4:	4b18      	ldr	r3, [pc, #96]	; (800d928 <_ux_device_stack_endpoint_stall+0x6c>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800d8ca:	23ff      	movs	r3, #255	; 0xff
 800d8cc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d8d2:	613b      	str	r3, [r7, #16]
    return(posture);
 800d8d4:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800d8d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8d8:	b672      	cpsid	i
    return(int_posture);
 800d8da:	68fb      	ldr	r3, [r7, #12]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800d8dc:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800d8de:	4b12      	ldr	r3, [pc, #72]	; (800d928 <_ux_device_stack_endpoint_stall+0x6c>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6a1b      	ldr	r3, [r3, #32]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d013      	beq.n	800d910 <_ux_device_stack_endpoint_stall+0x54>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800d8ec:	2b02      	cmp	r3, #2
 800d8ee:	d00f      	beq.n	800d910 <_ux_device_stack_endpoint_stall+0x54>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	2114      	movs	r1, #20
 800d8f8:	69b8      	ldr	r0, [r7, #24]
 800d8fa:	4798      	blx	r3
 800d8fc:	61f8      	str	r0, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	f003 0303 	and.w	r3, r3, #3
 800d906:	2b00      	cmp	r3, #0
 800d908:	d002      	beq.n	800d910 <_ux_device_stack_endpoint_stall+0x54>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2202      	movs	r2, #2
 800d90e:	605a      	str	r2, [r3, #4]
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	f383 8810 	msr	PRIMASK, r3
}
 800d91a:	bf00      	nop

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 800d91c:	69fb      	ldr	r3, [r7, #28]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3720      	adds	r7, #32
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	20005cc4 	.word	0x20005cc4

0800d92c <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b08a      	sub	sp, #40	; 0x28
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800d938:	4b39      	ldr	r3, [pc, #228]	; (800da20 <_ux_device_stack_get_status+0xf4>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800d93e:	4b38      	ldr	r3, [pc, #224]	; (800da20 <_ux_device_stack_get_status+0xf4>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3320      	adds	r3, #32
 800d944:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	333c      	adds	r3, #60	; 0x3c
 800d94a:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	3330      	adds	r3, #48	; 0x30
 800d950:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	2200      	movs	r2, #0
 800d958:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	3301      	adds	r3, #1
 800d960:	2200      	movs	r2, #0
 800d962:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800d964:	2302      	movs	r3, #2
 800d966:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f003 0303 	and.w	r3, r3, #3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d002      	beq.n	800d978 <_ux_device_stack_get_status+0x4c>
 800d972:	2b02      	cmp	r3, #2
 800d974:	d021      	beq.n	800d9ba <_ux_device_stack_get_status+0x8e>
 800d976:	e03a      	b.n	800d9ee <_ux_device_stack_get_status+0xc2>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800d97e:	d102      	bne.n	800d986 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800d980:	2301      	movs	r3, #1
 800d982:	627b      	str	r3, [r7, #36]	; 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800d984:	e03b      	b.n	800d9fe <_ux_device_stack_get_status+0xd2>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800d986:	4b26      	ldr	r3, [pc, #152]	; (800da20 <_ux_device_stack_get_status+0xf4>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800d98e:	2b02      	cmp	r3, #2
 800d990:	d103      	bne.n	800d99a <_ux_device_stack_get_status+0x6e>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	2201      	movs	r2, #1
 800d998:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800d99a:	4b21      	ldr	r3, [pc, #132]	; (800da20 <_ux_device_stack_get_status+0xf4>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d02b      	beq.n	800d9fe <_ux_device_stack_get_status+0xd2>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	781a      	ldrb	r2, [r3, #0]
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	f042 0202 	orr.w	r2, r2, #2
 800d9b4:	b2d2      	uxtb	r2, r2
 800d9b6:	701a      	strb	r2, [r3, #0]
        break;
 800d9b8:	e021      	b.n	800d9fe <_ux_device_stack_get_status+0xd2>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	2115      	movs	r1, #21
 800d9c2:	6a38      	ldr	r0, [r7, #32]
 800d9c4:	4798      	blx	r3
 800d9c6:	6138      	str	r0, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	2bff      	cmp	r3, #255	; 0xff
 800d9cc:	d007      	beq.n	800d9de <_ux_device_stack_get_status+0xb2>
        {

            if (status == UX_TRUE)
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d116      	bne.n	800da02 <_ux_device_stack_get_status+0xd6>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800d9dc:	e011      	b.n	800da02 <_ux_device_stack_get_status+0xd6>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d9de:	6a3b      	ldr	r3, [r7, #32]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	69ba      	ldr	r2, [r7, #24]
 800d9e4:	2114      	movs	r1, #20
 800d9e6:	6a38      	ldr	r0, [r7, #32]
 800d9e8:	4798      	blx	r3
            return(UX_SUCCESS);            
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e014      	b.n	800da18 <_ux_device_stack_get_status+0xec>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	699b      	ldr	r3, [r3, #24]
 800d9f2:	69ba      	ldr	r2, [r7, #24]
 800d9f4:	2114      	movs	r1, #20
 800d9f6:	6a38      	ldr	r0, [r7, #32]
 800d9f8:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e00c      	b.n	800da18 <_ux_device_stack_get_status+0xec>
        break;
 800d9fe:	bf00      	nop
 800da00:	e000      	b.n	800da04 <_ux_device_stack_get_status+0xd8>
        break;
 800da02:	bf00      	nop
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	2203      	movs	r2, #3
 800da08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800da0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da0e:	6978      	ldr	r0, [r7, #20]
 800da10:	f000 fc0a 	bl	800e228 <_ux_device_stack_transfer_request>
 800da14:	6138      	str	r0, [r7, #16]

    /* Return the function status.  */
    return(status);
 800da16:	693b      	ldr	r3, [r7, #16]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3728      	adds	r7, #40	; 0x28
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	20005cc4 	.word	0x20005cc4

0800da24 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b094      	sub	sp, #80	; 0x50
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
 800da30:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800da32:	4b9a      	ldr	r3, [pc, #616]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	3320      	adds	r3, #32
 800da38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 800da3a:	4b98      	ldr	r3, [pc, #608]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800da44:	4b95      	ldr	r3, [pc, #596]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 800da4e:	4b93      	ldr	r3, [pc, #588]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800da58:	4b90      	ldr	r3, [pc, #576]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800da62:	4b8e      	ldr	r3, [pc, #568]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da68:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800da6c:	4b8b      	ldr	r3, [pc, #556]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da72:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800da76:	4b89      	ldr	r3, [pc, #548]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da7c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800da80:	4b86      	ldr	r3, [pc, #536]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da86:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800da8a:	4b84      	ldr	r3, [pc, #528]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800da90:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800da94:	f44f 728a 	mov.w	r2, #276	; 0x114
 800da98:	2100      	movs	r1, #0
 800da9a:	2000      	movs	r0, #0
 800da9c:	f000 fdbe 	bl	800e61c <_ux_utility_memory_allocate>
 800daa0:	6238      	str	r0, [r7, #32]
    if (memory == UX_NULL)
 800daa2:	6a3b      	ldr	r3, [r7, #32]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d101      	bne.n	800daac <_ux_device_stack_initialize+0x88>
        return(UX_MEMORY_INSUFFICIENT);
 800daa8:	2312      	movs	r3, #18
 800daaa:	e160      	b.n	800dd6e <_ux_device_stack_initialize+0x34a>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800daac:	4b7b      	ldr	r3, [pc, #492]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	6a3a      	ldr	r2, [r7, #32]
 800dab2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	336c      	adds	r3, #108	; 0x6c
 800daba:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800dabc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dac0:	2101      	movs	r1, #1
 800dac2:	2000      	movs	r0, #0
 800dac4:	f000 fdaa 	bl	800e61c <_ux_utility_memory_allocate>
 800dac8:	4602      	mov	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d102      	bne.n	800dadc <_ux_device_stack_initialize+0xb8>
        status = UX_MEMORY_INSUFFICIENT;
 800dad6:	2312      	movs	r3, #18
 800dad8:	64bb      	str	r3, [r7, #72]	; 0x48
 800dada:	e001      	b.n	800dae0 <_ux_device_stack_initialize+0xbc>
    else
        status = UX_SUCCESS;
 800dadc:	2300      	movs	r3, #0
 800dade:	64bb      	str	r3, [r7, #72]	; 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	647b      	str	r3, [r7, #68]	; 0x44
    endpoints_found                    =  0;
 800dae4:	2300      	movs	r3, #0
 800dae6:	643b      	str	r3, [r7, #64]	; 0x40
    max_interface_number               =  0;
 800dae8:	2300      	movs	r3, #0
 800daea:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 800daec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f040 8090 	bne.w	800dc14 <_ux_device_stack_initialize+0x1f0>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800daf4:	4b69      	ldr	r3, [pc, #420]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800dafc:	62fb      	str	r3, [r7, #44]	; 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800dafe:	4b67      	ldr	r3, [pc, #412]	; (800dc9c <_ux_device_stack_initialize+0x278>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800db06:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 800db08:	2300      	movs	r3, #0
 800db0a:	63bb      	str	r3, [r7, #56]	; 0x38
        local_endpoints_found              =  0;
 800db0c:	2300      	movs	r3, #0
 800db0e:	637b      	str	r3, [r7, #52]	; 0x34
        endpoints_in_interface_found       =  0;
 800db10:	2300      	movs	r3, #0
 800db12:	633b      	str	r3, [r7, #48]	; 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800db14:	e054      	b.n	800dbc0 <_ux_device_stack_initialize+0x19c>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 800db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	785b      	ldrb	r3, [r3, #1]
 800db20:	75fb      	strb	r3, [r7, #23]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800db22:	7dfb      	ldrb	r3, [r7, #23]
 800db24:	2b02      	cmp	r3, #2
 800db26:	d029      	beq.n	800db7c <_ux_device_stack_initialize+0x158>
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d13e      	bne.n	800dbaa <_ux_device_stack_initialize+0x186>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2e:	3303      	adds	r3, #3
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10b      	bne.n	800db4e <_ux_device_stack_initialize+0x12a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800db36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	4413      	add	r3, r2
 800db3c:	637b      	str	r3, [r7, #52]	; 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	3304      	adds	r3, #4
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	633b      	str	r3, [r7, #48]	; 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	3301      	adds	r3, #1
 800db4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800db4c:	e00a      	b.n	800db64 <_ux_device_stack_initialize+0x140>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800db4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db50:	3304      	adds	r3, #4
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	461a      	mov	r2, r3
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	4293      	cmp	r3, r2
 800db5a:	d203      	bcs.n	800db64 <_ux_device_stack_initialize+0x140>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800db5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5e:	3304      	adds	r3, #4
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	633b      	str	r3, [r7, #48]	; 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800db64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db66:	3302      	adds	r3, #2
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	461a      	mov	r2, r3
 800db6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db6e:	4293      	cmp	r3, r2
 800db70:	d21d      	bcs.n	800dbae <_ux_device_stack_initialize+0x18a>
                    max_interface_number = *(device_framework + 2);
 800db72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db74:	3302      	adds	r3, #2
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	63fb      	str	r3, [r7, #60]	; 0x3c

                break;
 800db7a:	e018      	b.n	800dbae <_ux_device_stack_initialize+0x18a>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 800db7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db80:	429a      	cmp	r2, r3
 800db82:	d901      	bls.n	800db88 <_ux_device_stack_initialize+0x164>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db86:	647b      	str	r3, [r7, #68]	; 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800db88:	2300      	movs	r3, #0
 800db8a:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 800db8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	4413      	add	r3, r2
 800db92:	637b      	str	r3, [r7, #52]	; 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800db94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db98:	429a      	cmp	r2, r3
 800db9a:	d901      	bls.n	800dba0 <_ux_device_stack_initialize+0x17c>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 800db9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db9e:	643b      	str	r3, [r7, #64]	; 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 800dba0:	2300      	movs	r3, #0
 800dba2:	637b      	str	r3, [r7, #52]	; 0x34
                endpoints_in_interface_found  =  0;
 800dba4:	2300      	movs	r3, #0
 800dba6:	633b      	str	r3, [r7, #48]	; 0x30

                break;
 800dba8:	e002      	b.n	800dbb0 <_ux_device_stack_initialize+0x18c>

            default:
                break;
 800dbaa:	bf00      	nop
 800dbac:	e000      	b.n	800dbb0 <_ux_device_stack_initialize+0x18c>
                break;
 800dbae:	bf00      	nop
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800dbb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	1ad3      	subs	r3, r2, r3
 800dbb6:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800dbb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (device_framework_length != 0)
 800dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1a7      	bne.n	800db16 <_ux_device_stack_initialize+0xf2>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 800dbc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbca:	4413      	add	r3, r2
 800dbcc:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 800dbce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d901      	bls.n	800dbda <_ux_device_stack_initialize+0x1b6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 800dbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd8:	643b      	str	r3, [r7, #64]	; 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800dbda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d901      	bls.n	800dbe6 <_ux_device_stack_initialize+0x1c2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 800dbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe4:	647b      	str	r3, [r7, #68]	; 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800dbe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d106      	bne.n	800dbfa <_ux_device_stack_initialize+0x1d6>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800dbec:	2242      	movs	r2, #66	; 0x42
 800dbee:	2103      	movs	r1, #3
 800dbf0:	2002      	movs	r0, #2
 800dbf2:	f000 fba3 	bl	800e33c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 800dbf6:	2342      	movs	r3, #66	; 0x42
 800dbf8:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800dbfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d109      	bne.n	800dc14 <_ux_device_stack_initialize+0x1f0>
 800dc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc02:	2b0f      	cmp	r3, #15
 800dc04:	d906      	bls.n	800dc14 <_ux_device_stack_initialize+0x1f0>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800dc06:	2212      	movs	r2, #18
 800dc08:	2103      	movs	r1, #3
 800dc0a:	2002      	movs	r0, #2
 800dc0c:	f000 fb96 	bl	800e33c <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 800dc10:	2312      	movs	r3, #18
 800dc12:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 800dc14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d118      	bne.n	800dc4c <_ux_device_stack_initialize+0x228>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800dc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc1e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800dc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800dc2a:	2338      	movs	r3, #56	; 0x38
 800dc2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc2e:	2100      	movs	r1, #0
 800dc30:	2000      	movs	r0, #0
 800dc32:	f000 fdf7 	bl	800e824 <_ux_utility_memory_allocate_mulc_safe>
 800dc36:	6138      	str	r0, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d102      	bne.n	800dc44 <_ux_device_stack_initialize+0x220>
            status = UX_MEMORY_INSUFFICIENT;
 800dc3e:	2312      	movs	r3, #18
 800dc40:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc42:	e003      	b.n	800dc4c <_ux_device_stack_initialize+0x228>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	693a      	ldr	r2, [r7, #16]
 800dc48:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800dc4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d045      	beq.n	800dcde <_ux_device_stack_initialize+0x2ba>
 800dc52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d142      	bne.n	800dcde <_ux_device_stack_initialize+0x2ba>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800dc58:	2390      	movs	r3, #144	; 0x90
 800dc5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	2000      	movs	r0, #0
 800dc60:	f000 fde0 	bl	800e824 <_ux_utility_memory_allocate_mulc_safe>
 800dc64:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (endpoints_pool == UX_NULL)
 800dc66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d102      	bne.n	800dc72 <_ux_device_stack_initialize+0x24e>
            status = UX_MEMORY_INSUFFICIENT;
 800dc6c:	2312      	movs	r3, #18
 800dc6e:	64bb      	str	r3, [r7, #72]	; 0x48
        if (endpoints_pool == UX_NULL)
 800dc70:	e037      	b.n	800dce2 <_ux_device_stack_initialize+0x2be>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc76:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800dc7a:	e022      	b.n	800dcc2 <_ux_device_stack_initialize+0x29e>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800dc7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc80:	2101      	movs	r1, #1
 800dc82:	2000      	movs	r0, #0
 800dc84:	f000 fcca 	bl	800e61c <_ux_utility_memory_allocate>
 800dc88:	4602      	mov	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800dc8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc8c:	63da      	str	r2, [r3, #60]	; 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800dc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d104      	bne.n	800dca0 <_ux_device_stack_initialize+0x27c>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800dc96:	2312      	movs	r3, #18
 800dc98:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 800dc9a:	e01f      	b.n	800dcdc <_ux_device_stack_initialize+0x2b8>
 800dc9c:	20005cc4 	.word	0x20005cc4
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 800dca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca2:	3360      	adds	r3, #96	; 0x60
 800dca4:	2200      	movs	r2, #0
 800dca6:	4934      	ldr	r1, [pc, #208]	; (800dd78 <_ux_device_stack_initialize+0x354>)
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f000 ff3f 	bl	800eb2c <_ux_utility_semaphore_create>
 800dcae:	64b8      	str	r0, [r7, #72]	; 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800dcb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <_ux_device_stack_initialize+0x298>
                {
                    status = UX_SEMAPHORE_ERROR;
 800dcb6:	2315      	movs	r3, #21
 800dcb8:	64bb      	str	r3, [r7, #72]	; 0x48
                    break;
 800dcba:	e00f      	b.n	800dcdc <_ux_device_stack_initialize+0x2b8>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800dcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcbe:	3390      	adds	r3, #144	; 0x90
 800dcc0:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc4:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
 800dcc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcca:	4613      	mov	r3, r2
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	4413      	add	r3, r2
 800dcd0:	011b      	lsls	r3, r3, #4
 800dcd2:	440b      	add	r3, r1
 800dcd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d3d0      	bcc.n	800dc7c <_ux_device_stack_initialize+0x258>
        if (endpoints_pool == UX_NULL)
 800dcda:	e002      	b.n	800dce2 <_ux_device_stack_initialize+0x2be>
 800dcdc:	e001      	b.n	800dce2 <_ux_device_stack_initialize+0x2be>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 800dce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d101      	bne.n	800dcec <_ux_device_stack_initialize+0x2c8>
        return(UX_SUCCESS);
 800dce8:	2300      	movs	r3, #0
 800dcea:	e040      	b.n	800dd6e <_ux_device_stack_initialize+0x34a>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 800dcec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d021      	beq.n	800dd36 <_ux_device_stack_initialize+0x312>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800dcf2:	e014      	b.n	800dd1e <_ux_device_stack_initialize+0x2fa>
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 800dcf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d004      	beq.n	800dd06 <_ux_device_stack_initialize+0x2e2>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800dcfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcfe:	3360      	adds	r3, #96	; 0x60
 800dd00:	4618      	mov	r0, r3
 800dd02:	f000 ff2d 	bl	800eb60 <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800dd06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d004      	beq.n	800dd18 <_ux_device_stack_initialize+0x2f4>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800dd0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 fdca 	bl	800e8ac <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800dd18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd1a:	3b90      	subs	r3, #144	; 0x90
 800dd1c:	64fb      	str	r3, [r7, #76]	; 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd20:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800dd24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d2e4      	bcs.n	800dcf4 <_ux_device_stack_initialize+0x2d0>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800dd30:	4618      	mov	r0, r3
 800dd32:	f000 fdbb 	bl	800e8ac <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800dd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d005      	beq.n	800dd4c <_ux_device_stack_initialize+0x328>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fdb0 	bl	800e8ac <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800dd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d004      	beq.n	800dd5e <_ux_device_stack_initialize+0x33a>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 fda7 	bl	800e8ac <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800dd5e:	4b07      	ldr	r3, [pc, #28]	; (800dd7c <_ux_device_stack_initialize+0x358>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800dd66:	4618      	mov	r0, r3
 800dd68:	f000 fda0 	bl	800e8ac <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800dd6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3750      	adds	r7, #80	; 0x50
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	08012634 	.word	0x08012634
 800dd7c:	20005cc4 	.word	0x20005cc4

0800dd80 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800dd88:	4b20      	ldr	r3, [pc, #128]	; (800de0c <_ux_device_stack_interface_delete+0x8c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	3320      	adds	r3, #32
 800dd8e:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd94:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800dd96:	e01c      	b.n	800ddd2 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda0:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800dda2:	4b1a      	ldr	r3, [pc, #104]	; (800de0c <_ux_device_stack_interface_delete+0x8c>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	210f      	movs	r1, #15
 800ddb0:	68b8      	ldr	r0, [r7, #8]
 800ddb2:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	625a      	str	r2, [r3, #36]	; 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	629a      	str	r2, [r3, #40]	; 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	62da      	str	r2, [r3, #44]	; 0x2c
    while (next_endpoint != UX_NULL)
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1df      	bne.n	800dd98 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	631a      	str	r2, [r3, #48]	; 0x30
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	635a      	str	r2, [r3, #52]	; 0x34
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3718      	adds	r7, #24
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	20005cc4 	.word	0x20005cc4

0800de10 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b092      	sub	sp, #72	; 0x48
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800de1c:	4b82      	ldr	r3, [pc, #520]	; (800e028 <_ux_device_stack_interface_set+0x218>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800de22:	4b81      	ldr	r3, [pc, #516]	; (800e028 <_ux_device_stack_interface_set+0x218>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3320      	adds	r3, #32
 800de28:	627b      	str	r3, [r7, #36]	; 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800de30:	647b      	str	r3, [r7, #68]	; 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800de38:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 800de3a:	e009      	b.n	800de50 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800de3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d009      	beq.n	800de58 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800de44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de46:	3338      	adds	r3, #56	; 0x38
 800de48:	647b      	str	r3, [r7, #68]	; 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800de4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4c:	3b01      	subs	r3, #1
 800de4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (interfaces_pool_number != 0)
 800de50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1f2      	bne.n	800de3c <_ux_device_stack_interface_set+0x2c>
 800de56:	e000      	b.n	800de5a <_ux_device_stack_interface_set+0x4a>
            break;
 800de58:	bf00      	nop
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800de5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d101      	bne.n	800de64 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800de60:	2312      	movs	r3, #18
 800de62:	e0dd      	b.n	800e020 <_ux_device_stack_interface_set+0x210>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800de64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de66:	2201      	movs	r2, #1
 800de68:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800de6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de6c:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800de6e:	2209      	movs	r2, #9
 800de70:	496e      	ldr	r1, [pc, #440]	; (800e02c <_ux_device_stack_interface_set+0x21c>)
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f000 fb50 	bl	800e518 <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d104      	bne.n	800de8c <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800de82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de86:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800de8a:	e00e      	b.n	800deaa <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800de8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800de92:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800de94:	e002      	b.n	800de9c <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800de96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9a:	643b      	str	r3, [r7, #64]	; 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800de9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1f8      	bne.n	800de96 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800dea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dea8:	631a      	str	r2, [r3, #48]	; 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	461a      	mov	r2, r3
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	1a9b      	subs	r3, r3, r2
 800deb4:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	461a      	mov	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	4413      	add	r3, r2
 800dec0:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800dec2:	e0a4      	b.n	800e00e <_ux_device_stack_interface_set+0x1fe>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	785b      	ldrb	r3, [r3, #1]
 800dece:	76fb      	strb	r3, [r7, #27]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800ded0:	7efb      	ldrb	r3, [r7, #27]
 800ded2:	2b05      	cmp	r3, #5
 800ded4:	d009      	beq.n	800deea <_ux_device_stack_interface_set+0xda>
 800ded6:	2b05      	cmp	r3, #5
 800ded8:	f300 8090 	bgt.w	800dffc <_ux_device_stack_interface_set+0x1ec>
 800dedc:	2b02      	cmp	r3, #2
 800dede:	f000 8087 	beq.w	800dff0 <_ux_device_stack_interface_set+0x1e0>
 800dee2:	2b04      	cmp	r3, #4
 800dee4:	f000 8084 	beq.w	800dff0 <_ux_device_stack_interface_set+0x1e0>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800dee8:	e088      	b.n	800dffc <_ux_device_stack_interface_set+0x1ec>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800def0:	63bb      	str	r3, [r7, #56]	; 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800def2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800def8:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 800defa:	e00d      	b.n	800df18 <_ux_device_stack_interface_set+0x108>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800defc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d103      	bne.n	800df0c <_ux_device_stack_interface_set+0xfc>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	2201      	movs	r2, #1
 800df08:	601a      	str	r2, [r3, #0]
                    break;
 800df0a:	e008      	b.n	800df1e <_ux_device_stack_interface_set+0x10e>
                endpoint++;
 800df0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0e:	3390      	adds	r3, #144	; 0x90
 800df10:	63bb      	str	r3, [r7, #56]	; 0x38
               endpoints_pool_number--; 
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	3b01      	subs	r3, #1
 800df16:	633b      	str	r3, [r7, #48]	; 0x30
            while (endpoints_pool_number != 0)
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1ee      	bne.n	800defc <_ux_device_stack_interface_set+0xec>
            if (endpoints_pool_number == 0)
 800df1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <_ux_device_stack_interface_set+0x118>
                return(UX_MEMORY_INSUFFICIENT);
 800df24:	2312      	movs	r3, #18
 800df26:	e07b      	b.n	800e020 <_ux_device_stack_interface_set+0x210>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800df2c:	2206      	movs	r2, #6
 800df2e:	4940      	ldr	r1, [pc, #256]	; (800e030 <_ux_device_stack_interface_set+0x220>)
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	f000 faf1 	bl	800e518 <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800df36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df38:	3330      	adds	r3, #48	; 0x30
 800df3a:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800df3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3e:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 800df40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df44:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800df46:	4b38      	ldr	r3, [pc, #224]	; (800e028 <_ux_device_stack_interface_set+0x218>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800df4e:	2b02      	cmp	r3, #2
 800df50:	d118      	bne.n	800df84 <_ux_device_stack_interface_set+0x174>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800df52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df54:	699b      	ldr	r3, [r3, #24]
 800df56:	f003 0301 	and.w	r3, r3, #1
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d012      	beq.n	800df84 <_ux_device_stack_interface_set+0x174>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800df5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df60:	69db      	ldr	r3, [r3, #28]
 800df62:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800df66:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00a      	beq.n	800df84 <_ux_device_stack_interface_set+0x174>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	0adb      	lsrs	r3, r3, #11
 800df72:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	3301      	adds	r3, #1
 800df78:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800df7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7c:	693a      	ldr	r2, [r7, #16]
 800df7e:	fb02 f303 	mul.w	r3, r2, r3
 800df82:	62fb      	str	r3, [r7, #44]	; 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df88:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df8e:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	f04f 32ff 	mov.w	r2, #4294967295
 800df96:	64da      	str	r2, [r3, #76]	; 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df9c:	629a      	str	r2, [r3, #40]	; 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 800df9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfa2:	62da      	str	r2, [r3, #44]	; 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800dfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfaa:	210e      	movs	r1, #14
 800dfac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfae:	4798      	blx	r3
 800dfb0:	6238      	str	r0, [r7, #32]
            if (status != UX_SUCCESS)
 800dfb2:	6a3b      	ldr	r3, [r7, #32]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d004      	beq.n	800dfc2 <_ux_device_stack_interface_set+0x1b2>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	2200      	movs	r2, #0
 800dfbc:	601a      	str	r2, [r3, #0]
                return(status);
 800dfbe:	6a3b      	ldr	r3, [r7, #32]
 800dfc0:	e02e      	b.n	800e020 <_ux_device_stack_interface_set+0x210>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800dfc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d103      	bne.n	800dfd2 <_ux_device_stack_interface_set+0x1c2>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800dfca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfce:	635a      	str	r2, [r3, #52]	; 0x34
            break;
 800dfd0:	e015      	b.n	800dffe <_ux_device_stack_interface_set+0x1ee>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800dfd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd6:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800dfd8:	e002      	b.n	800dfe0 <_ux_device_stack_interface_set+0x1d0>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800dfda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfde:	637b      	str	r3, [r7, #52]	; 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800dfe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d1f8      	bne.n	800dfda <_ux_device_stack_interface_set+0x1ca>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800dfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfec:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 800dfee:	e006      	b.n	800dffe <_ux_device_stack_interface_set+0x1ee>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800dff0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dff2:	f000 f81f 	bl	800e034 <_ux_device_stack_interface_start>
 800dff6:	6238      	str	r0, [r7, #32]
            return(status);
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	e011      	b.n	800e020 <_ux_device_stack_interface_set+0x210>
            break;
 800dffc:	bf00      	nop
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	1ad3      	subs	r3, r2, r3
 800e004:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	4413      	add	r3, r2
 800e00c:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	2b00      	cmp	r3, #0
 800e012:	f47f af57 	bne.w	800dec4 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800e016:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e018:	f000 f80c 	bl	800e034 <_ux_device_stack_interface_start>
 800e01c:	6238      	str	r0, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800e01e:	6a3b      	ldr	r3, [r7, #32]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3748      	adds	r7, #72	; 0x48
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20005cc4 	.word	0x20005cc4
 800e02c:	20000048 	.word	0x20000048
 800e030:	20000028 	.word	0x20000028

0800e034 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b090      	sub	sp, #64	; 0x40
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800e03c:	4b25      	ldr	r3, [pc, #148]	; (800e0d4 <_ux_device_stack_interface_start+0xa0>)
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	695b      	ldr	r3, [r3, #20]
 800e044:	3356      	adds	r3, #86	; 0x56
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800e04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <_ux_device_stack_interface_start+0x24>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800e054:	2357      	movs	r3, #87	; 0x57
 800e056:	e038      	b.n	800e0ca <_ux_device_stack_interface_start+0x96>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e058:	4b1e      	ldr	r3, [pc, #120]	; (800e0d4 <_ux_device_stack_interface_start+0xa0>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	3320      	adds	r3, #32
 800e05e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800e060:	2301      	movs	r3, #1
 800e062:	60bb      	str	r3, [r7, #8]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	613b      	str	r3, [r7, #16]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6a1b      	ldr	r3, [r3, #32]
 800e06c:	61fb      	str	r3, [r7, #28]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e072:	623b      	str	r3, [r7, #32]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e078:	627b      	str	r3, [r7, #36]	; 0x24
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800e07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07c:	6a1b      	ldr	r3, [r3, #32]
 800e07e:	61bb      	str	r3, [r7, #24]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800e080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e084:	617b      	str	r3, [r7, #20]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800e086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800e08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e092:	f107 0208 	add.w	r2, r7, #8
 800e096:	4610      	mov	r0, r2
 800e098:	4798      	blx	r3
 800e09a:	6378      	str	r0, [r7, #52]	; 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800e09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d112      	bne.n	800e0c8 <_ux_device_stack_interface_start+0x94>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800e0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a4:	62bb      	str	r3, [r7, #40]	; 0x28
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800e0a6:	2302      	movs	r3, #2
 800e0a8:	60bb      	str	r3, [r7, #8]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800e0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ae:	f107 0208 	add.w	r2, r7, #8
 800e0b2:	4610      	mov	r0, r2
 800e0b4:	4798      	blx	r3
 800e0b6:	6378      	str	r0, [r7, #52]	; 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800e0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d102      	bne.n	800e0c4 <_ux_device_stack_interface_start+0x90>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0c2:	605a      	str	r2, [r3, #4]

        return(status); 
 800e0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c6:	e000      	b.n	800e0ca <_ux_device_stack_interface_start+0x96>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800e0c8:	2357      	movs	r3, #87	; 0x57
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3740      	adds	r7, #64	; 0x40
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20005cc4 	.word	0x20005cc4

0800e0d8 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08a      	sub	sp, #40	; 0x28
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e0e4:	4b29      	ldr	r3, [pc, #164]	; (800e18c <_ux_device_stack_set_feature+0xb4>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e0ea:	4b28      	ldr	r3, [pc, #160]	; (800e18c <_ux_device_stack_set_feature+0xb4>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	3320      	adds	r3, #32
 800e0f0:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800e0f2:	69bb      	ldr	r3, [r7, #24]
 800e0f4:	333c      	adds	r3, #60	; 0x3c
 800e0f6:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f003 0303 	and.w	r3, r3, #3
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <_ux_device_stack_set_feature+0x30>
 800e102:	2b02      	cmp	r3, #2
 800e104:	d014      	beq.n	800e130 <_ux_device_stack_set_feature+0x58>
 800e106:	e035      	b.n	800e174 <_ux_device_stack_set_feature+0x9c>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d10e      	bne.n	800e12c <_ux_device_stack_set_feature+0x54>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800e10e:	4b1f      	ldr	r3, [pc, #124]	; (800e18c <_ux_device_stack_set_feature+0xb4>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800e116:	2b00      	cmp	r3, #0
 800e118:	d006      	beq.n	800e128 <_ux_device_stack_set_feature+0x50>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800e11a:	4b1c      	ldr	r3, [pc, #112]	; (800e18c <_ux_device_stack_set_feature+0xb4>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2201      	movs	r2, #1
 800e120:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

                /* OK. */
                return (UX_SUCCESS);
 800e124:	2300      	movs	r3, #0
 800e126:	e02c      	b.n	800e182 <_ux_device_stack_set_feature+0xaa>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800e128:	2354      	movs	r3, #84	; 0x54
 800e12a:	e02a      	b.n	800e182 <_ux_device_stack_set_feature+0xaa>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800e12c:	2354      	movs	r3, #84	; 0x54
 800e12e:	e028      	b.n	800e182 <_ux_device_stack_set_feature+0xaa>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800e136:	627b      	str	r3, [r7, #36]	; 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800e138:	e019      	b.n	800e16e <_ux_device_stack_set_feature+0x96>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e13e:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800e140:	e00f      	b.n	800e162 <_ux_device_stack_set_feature+0x8a>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	695b      	ldr	r3, [r3, #20]
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d107      	bne.n	800e15c <_ux_device_stack_set_feature+0x84>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	699b      	ldr	r3, [r3, #24]
 800e150:	6a3a      	ldr	r2, [r7, #32]
 800e152:	2114      	movs	r1, #20
 800e154:	69f8      	ldr	r0, [r7, #28]
 800e156:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800e158:	2300      	movs	r3, #0
 800e15a:	e012      	b.n	800e182 <_ux_device_stack_set_feature+0xaa>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e160:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800e162:	6a3b      	ldr	r3, [r7, #32]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1ec      	bne.n	800e142 <_ux_device_stack_set_feature+0x6a>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16c:	627b      	str	r3, [r7, #36]	; 0x24
        while (interface_ptr != UX_NULL)
 800e16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1e2      	bne.n	800e13a <_ux_device_stack_set_feature+0x62>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	699b      	ldr	r3, [r3, #24]
 800e178:	697a      	ldr	r2, [r7, #20]
 800e17a:	2114      	movs	r1, #20
 800e17c:	69f8      	ldr	r0, [r7, #28]
 800e17e:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800e180:	2300      	movs	r3, #0
    }
}
 800e182:	4618      	mov	r0, r3
 800e184:	3728      	adds	r7, #40	; 0x28
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	20005cc4 	.word	0x20005cc4

0800e190 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b088      	sub	sp, #32
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e19a:	4b19      	ldr	r3, [pc, #100]	; (800e200 <_ux_device_stack_transfer_abort+0x70>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	683a      	ldr	r2, [r7, #0]
 800e1a4:	625a      	str	r2, [r3, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e1aa:	617b      	str	r3, [r7, #20]
    return(posture);
 800e1ac:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e1ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1b0:	b672      	cpsid	i
    return(int_posture);
 800e1b2:	693b      	ldr	r3, [r7, #16]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800e1b4:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d114      	bne.n	800e1e8 <_ux_device_stack_transfer_abort+0x58>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	699b      	ldr	r3, [r3, #24]
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	210d      	movs	r1, #13
 800e1c6:	69f8      	ldr	r0, [r7, #28]
 800e1c8:	4798      	blx	r3
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f383 8810 	msr	PRIMASK, r3
}
 800e1d4:	bf00      	nop

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2204      	movs	r2, #4
 800e1da:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	3330      	adds	r3, #48	; 0x30
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f000 fd03 	bl	800ebec <_ux_utility_semaphore_put>
 800e1e6:	e005      	b.n	800e1f4 <_ux_device_stack_transfer_abort+0x64>
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	f383 8810 	msr	PRIMASK, r3
}
 800e1f2:	bf00      	nop
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800e1f4:	2300      	movs	r3, #0
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3720      	adds	r7, #32
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	20005cc4 	.word	0x20005cc4

0800e204 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	3330      	adds	r3, #48	; 0x30
 800e212:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f7ff ffba 	bl	800e190 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
	...

0800e228 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08e      	sub	sp, #56	; 0x38
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d101      	bne.n	800e240 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 800e23c:	2300      	movs	r3, #0
 800e23e:	e077      	b.n	800e330 <_ux_device_stack_transfer_request+0x108>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e240:	f3ef 8310 	mrs	r3, PRIMASK
 800e244:	623b      	str	r3, [r7, #32]
    return(posture);
 800e246:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e248:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e24a:	b672      	cpsid	i
    return(int_posture);
 800e24c:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 800e24e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800e250:	4b39      	ldr	r3, [pc, #228]	; (800e338 <_ux_device_stack_transfer_request+0x110>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	633b      	str	r3, [r7, #48]	; 0x30

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 800e258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	d005      	beq.n	800e26a <_ux_device_stack_transfer_request+0x42>
 800e25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e260:	2b02      	cmp	r3, #2
 800e262:	d002      	beq.n	800e26a <_ux_device_stack_transfer_request+0x42>
            || (device_state == UX_DEVICE_CONFIGURED))
 800e264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e266:	2b03      	cmp	r3, #3
 800e268:	d115      	bne.n	800e296 <_ux_device_stack_transfer_request+0x6e>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2201      	movs	r2, #1
 800e26e:	601a      	str	r2, [r3, #0]
 800e270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e272:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	f383 8810 	msr	PRIMASK, r3
}
 800e27a:	bf00      	nop
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e27c:	4b2e      	ldr	r3, [pc, #184]	; (800e338 <_ux_device_stack_transfer_request+0x110>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	f003 0303 	and.w	r3, r3, #3
 800e290:	2b00      	cmp	r3, #0
 800e292:	d10b      	bne.n	800e2ac <_ux_device_stack_transfer_request+0x84>
 800e294:	e01b      	b.n	800e2ce <_ux_device_stack_transfer_request+0xa6>
 800e296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e298:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	f383 8810 	msr	PRIMASK, r3
}
 800e2a0:	bf00      	nop
        return(UX_TRANSFER_NOT_READY);
 800e2a2:	2325      	movs	r3, #37	; 0x25
 800e2a4:	e044      	b.n	800e330 <_ux_device_stack_transfer_request+0x108>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 800e2a6:	2064      	movs	r0, #100	; 0x64
 800e2a8:	f000 f91c 	bl	800e4e4 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d0f8      	beq.n	800e2a6 <_ux_device_stack_transfer_request+0x7e>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	695b      	ldr	r3, [r3, #20]
 800e2b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d003      	beq.n	800e2c8 <_ux_device_stack_transfer_request+0xa0>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2203      	movs	r2, #3
 800e2c4:	629a      	str	r2, [r3, #40]	; 0x28
 800e2c6:	e002      	b.n	800e2ce <_ux_device_stack_transfer_request+0xa6>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d114      	bne.n	800e300 <_ux_device_stack_transfer_request+0xd8>
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d011      	beq.n	800e300 <_ux_device_stack_transfer_request+0xd8>
        (slave_length != 0) && (host_length != slave_length) && 
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d00d      	beq.n	800e300 <_ux_device_stack_transfer_request+0xd8>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	69da      	ldr	r2, [r3, #28]
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2ee:	fb01 f202 	mul.w	r2, r1, r2
 800e2f2:	1a9b      	subs	r3, r3, r2
        (slave_length != 0) && (host_length != slave_length) && 
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d103      	bne.n	800e300 <_ux_device_stack_transfer_request+0xd8>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	651a      	str	r2, [r3, #80]	; 0x50
 800e2fe:	e002      	b.n	800e306 <_ux_device_stack_transfer_request+0xde>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2200      	movs	r2, #0
 800e30a:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	68ba      	ldr	r2, [r7, #8]
 800e316:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 800e320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	210c      	movs	r1, #12
 800e328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e32a:	4798      	blx	r3
 800e32c:	6278      	str	r0, [r7, #36]	; 0x24

    /* And return the status.  */
    return(status);
 800e32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

#endif
}
 800e330:	4618      	mov	r0, r3
 800e332:	3738      	adds	r7, #56	; 0x38
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20005cc4 	.word	0x20005cc4

0800e33c <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 800e348:	4b0c      	ldr	r3, [pc, #48]	; (800e37c <_ux_system_error_handler+0x40>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	651a      	str	r2, [r3, #80]	; 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 800e350:	4b0a      	ldr	r3, [pc, #40]	; (800e37c <_ux_system_error_handler+0x40>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e356:	3201      	adds	r2, #1
 800e358:	655a      	str	r2, [r3, #84]	; 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 800e35a:	4b08      	ldr	r3, [pc, #32]	; (800e37c <_ux_system_error_handler+0x40>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e360:	2b00      	cmp	r3, #0
 800e362:	d006      	beq.n	800e372 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 800e364:	4b05      	ldr	r3, [pc, #20]	; (800e37c <_ux_system_error_handler+0x40>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	68b9      	ldr	r1, [r7, #8]
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	4798      	blx	r3
    }
}
 800e372:	bf00      	nop
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	20005cc8 	.word	0x20005cc8

0800e380 <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b08a      	sub	sp, #40	; 0x28
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
 800e38c:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	2100      	movs	r1, #0
 800e392:	68f8      	ldr	r0, [r7, #12]
 800e394:	f000 fb68 	bl	800ea68 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 800e398:	4a4f      	ldr	r2, [pc, #316]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 800e39e:	235c      	movs	r3, #92	; 0x5c
 800e3a0:	627b      	str	r3, [r7, #36]	; 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a6:	4413      	add	r3, r2
 800e3a8:	4a4c      	ldr	r2, [pc, #304]	; (800e4dc <_ux_system_initialize+0x15c>)
 800e3aa:	6013      	str	r3, [r2, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ae:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e3b2:	627b      	str	r3, [r7, #36]	; 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 800e3b4:	4b48      	ldr	r3, [pc, #288]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68f9      	ldr	r1, [r7, #12]
 800e3ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3bc:	440a      	add	r2, r1
 800e3be:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 800e3c0:	4b45      	ldr	r3, [pc, #276]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	330f      	adds	r3, #15
 800e3cc:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800e3ce:	6a3b      	ldr	r3, [r7, #32]
 800e3d0:	f023 030f 	bic.w	r3, r3, #15
 800e3d4:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 800e3d6:	68fa      	ldr	r2, [r7, #12]
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	4413      	add	r3, r2
 800e3dc:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	6a3a      	ldr	r2, [r7, #32]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d301      	bcc.n	800e3ea <_ux_system_initialize+0x6a>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 800e3e6:	2312      	movs	r3, #18
 800e3e8:	e071      	b.n	800e4ce <_ux_system_initialize+0x14e>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 800e3ea:	69f9      	ldr	r1, [r7, #28]
 800e3ec:	4b3a      	ldr	r3, [pc, #232]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6a3a      	ldr	r2, [r7, #32]
 800e3f2:	1a8a      	subs	r2, r1, r2
 800e3f4:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 800e3f6:	4b38      	ldr	r3, [pc, #224]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	4b37      	ldr	r3, [pc, #220]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	6852      	ldr	r2, [r2, #4]
 800e400:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 800e402:	4b35      	ldr	r3, [pc, #212]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	6a3a      	ldr	r2, [r7, #32]
 800e408:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 800e40a:	4b33      	ldr	r3, [pc, #204]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e412:	4b31      	ldr	r3, [pc, #196]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	f1a3 0210 	sub.w	r2, r3, #16
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	2200      	movs	r2, #0
 800e424:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d112      	bne.n	800e452 <_ux_system_initialize+0xd2>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 800e42c:	4b2a      	ldr	r3, [pc, #168]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	4b29      	ldr	r3, [pc, #164]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	6852      	ldr	r2, [r2, #4]
 800e436:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 800e438:	4b27      	ldr	r3, [pc, #156]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	4b26      	ldr	r3, [pc, #152]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	6892      	ldr	r2, [r2, #8]
 800e442:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 800e444:	4b24      	ldr	r3, [pc, #144]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	4b23      	ldr	r3, [pc, #140]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6812      	ldr	r2, [r2, #0]
 800e44e:	60da      	str	r2, [r3, #12]
 800e450:	e02f      	b.n	800e4b2 <_ux_system_initialize+0x132>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 800e456:	6a3b      	ldr	r3, [r7, #32]
 800e458:	330f      	adds	r3, #15
 800e45a:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 800e45c:	6a3b      	ldr	r3, [r7, #32]
 800e45e:	f023 030f 	bic.w	r3, r3, #15
 800e462:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 800e464:	4b1c      	ldr	r3, [pc, #112]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	683a      	ldr	r2, [r7, #0]
 800e46a:	3a0f      	subs	r2, #15
 800e46c:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 800e46e:	4b1a      	ldr	r3, [pc, #104]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	4b19      	ldr	r3, [pc, #100]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	6912      	ldr	r2, [r2, #16]
 800e478:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 800e47a:	4b17      	ldr	r3, [pc, #92]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	6a3a      	ldr	r2, [r7, #32]
 800e480:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 800e482:	4b15      	ldr	r3, [pc, #84]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	68d8      	ldr	r0, [r3, #12]
 800e488:	4b13      	ldr	r3, [pc, #76]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	691b      	ldr	r3, [r3, #16]
 800e48e:	461a      	mov	r2, r3
 800e490:	2100      	movs	r1, #0
 800e492:	f000 fae9 	bl	800ea68 <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 800e496:	4b10      	ldr	r3, [pc, #64]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e49e:	4b0e      	ldr	r3, [pc, #56]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	f1a3 0210 	sub.w	r2, r3, #16
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 800e4b2:	4b09      	ldr	r3, [pc, #36]	; (800e4d8 <_ux_system_initialize+0x158>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	331c      	adds	r3, #28
 800e4b8:	4909      	ldr	r1, [pc, #36]	; (800e4e0 <_ux_system_initialize+0x160>)
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f000 faee 	bl	800ea9c <_ux_utility_mutex_create>
 800e4c0:	6178      	str	r0, [r7, #20]
    if(status != UX_SUCCESS)
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <_ux_system_initialize+0x14c>
        return(UX_MUTEX_ERROR);
 800e4c8:	2317      	movs	r3, #23
 800e4ca:	e000      	b.n	800e4ce <_ux_system_initialize+0x14e>
#endif

    return(UX_SUCCESS);
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3728      	adds	r7, #40	; 0x28
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20005cc8 	.word	0x20005cc8
 800e4dc:	20005cc4 	.word	0x20005cc4
 800e4e0:	08012654 	.word	0x08012654

0800e4e4 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2264      	movs	r2, #100	; 0x64
 800e4f0:	fb02 f303 	mul.w	r3, r2, r3
 800e4f4:	4a07      	ldr	r2, [pc, #28]	; (800e514 <_ux_utility_delay_ms+0x30>)
 800e4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e4fa:	099b      	lsrs	r3, r3, #6
 800e4fc:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3301      	adds	r3, #1
 800e502:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f7fc fd95 	bl	800b034 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 800e50a:	bf00      	nop
}
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	10624dd3 	.word	0x10624dd3

0800e518 <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
 800e524:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800e526:	e026      	b.n	800e576 <_ux_utility_descriptor_parse+0x5e>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	1c5a      	adds	r2, r3, #1
 800e52c:	60ba      	str	r2, [r7, #8]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2b02      	cmp	r3, #2
 800e532:	d00b      	beq.n	800e54c <_ux_utility_descriptor_parse+0x34>
 800e534:	2b04      	cmp	r3, #4
 800e536:	d113      	bne.n	800e560 <_ux_utility_descriptor_parse+0x48>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 800e538:	68f8      	ldr	r0, [r7, #12]
 800e53a:	f000 f825 	bl	800e588 <_ux_utility_long_get>
 800e53e:	4602      	mov	r2, r0
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	3304      	adds	r3, #4
 800e548:	60fb      	str	r3, [r7, #12]
            break;                   
 800e54a:	e011      	b.n	800e570 <_ux_utility_descriptor_parse+0x58>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 fb5a 	bl	800ec06 <_ux_utility_short_get>
 800e552:	4602      	mov	r2, r0
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	3302      	adds	r3, #2
 800e55c:	60fb      	str	r3, [r7, #12]
            break;                   
 800e55e:	e007      	b.n	800e570 <_ux_utility_descriptor_parse+0x58>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	461a      	mov	r2, r3
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3301      	adds	r3, #1
 800e56e:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	3304      	adds	r3, #4
 800e574:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	1e5a      	subs	r2, r3, #1
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1d3      	bne.n	800e528 <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 800e580:	bf00      	nop
}
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	1c5a      	adds	r2, r3, #1
 800e594:	607a      	str	r2, [r7, #4]
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	607a      	str	r2, [r7, #4]
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	021b      	lsls	r3, r3, #8
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	607a      	str	r2, [r7, #4]
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	041b      	lsls	r3, r3, #16
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	061b      	lsls	r3, r3, #24
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3714      	adds	r7, #20
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	1c5a      	adds	r2, r3, #1
 800e5e2:	607a      	str	r2, [r7, #4]
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	b2d2      	uxtb	r2, r2
 800e5e8:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	0a19      	lsrs	r1, r3, #8
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	607a      	str	r2, [r7, #4]
 800e5f4:	b2ca      	uxtb	r2, r1
 800e5f6:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	0c19      	lsrs	r1, r3, #16
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	607a      	str	r2, [r7, #4]
 800e602:	b2ca      	uxtb	r2, r1
 800e604:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	0e1b      	lsrs	r3, r3, #24
 800e60a:	b2da      	uxtb	r2, r3
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 800e610:	bf00      	nop
}
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b08c      	sub	sp, #48	; 0x30
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800e628:	4b7d      	ldr	r3, [pc, #500]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	331c      	adds	r3, #28
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 fa65 	bl	800eafe <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e63a:	d101      	bne.n	800e640 <_ux_utility_memory_allocate+0x24>
        memory_alignment = UX_NO_ALIGN;
 800e63c:	2300      	movs	r3, #0
 800e63e:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2b0e      	cmp	r3, #14
 800e644:	d801      	bhi.n	800e64a <_ux_utility_memory_allocate+0x2e>
        memory_alignment =  UX_ALIGN_MIN;
 800e646:	230f      	movs	r3, #15
 800e648:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	627b      	str	r3, [r7, #36]	; 0x24
    memory_alignment++;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	3301      	adds	r3, #1
 800e652:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	330f      	adds	r3, #15
 800e658:	f023 030f 	bic.w	r3, r3, #15
 800e65c:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	4413      	add	r3, r2
 800e664:	3310      	adds	r3, #16
 800e666:	4619      	mov	r1, r3
 800e668:	68b8      	ldr	r0, [r7, #8]
 800e66a:	f000 f9bb 	bl	800e9e4 <_ux_utility_memory_free_block_best_get>
 800e66e:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 800e670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10c      	bne.n	800e690 <_ux_utility_memory_allocate+0x74>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e676:	4b6a      	ldr	r3, [pc, #424]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	331c      	adds	r3, #28
 800e67c:	4618      	mov	r0, r3
 800e67e:	f000 fa33 	bl	800eae8 <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 800e682:	2212      	movs	r2, #18
 800e684:	2108      	movs	r1, #8
 800e686:	2002      	movs	r0, #2
 800e688:	f7ff fe58 	bl	800e33c <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 800e68c:	2300      	movs	r3, #0
 800e68e:	e0c3      	b.n	800e818 <_ux_utility_memory_allocate+0x1fc>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 800e690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e692:	3310      	adds	r3, #16
 800e694:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	1e5a      	subs	r2, r3, #1
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	4013      	ands	r3, r2
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d126      	bne.n	800e6f0 <_ux_utility_memory_allocate+0xd4>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	3310      	adds	r3, #16
 800e6a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6a8:	4413      	add	r3, r2
 800e6aa:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 800e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ae:	689a      	ldr	r2, [r3, #8]
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b8:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	f1a3 0210 	sub.w	r2, r3, #16
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 800e6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d8:	69fa      	ldr	r2, [r7, #28]
 800e6da:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e4:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3310      	adds	r3, #16
 800e6ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6ee:	e05e      	b.n	800e7ae <_ux_utility_memory_allocate+0x192>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e6f0:	6a3b      	ldr	r3, [r7, #32]
 800e6f2:	3310      	adds	r3, #16
 800e6f4:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	6a3b      	ldr	r3, [r7, #32]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	425b      	negs	r3, r3
 800e704:	6a3a      	ldr	r2, [r7, #32]
 800e706:	4013      	ands	r3, r2
 800e708:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 800e70a:	6a3b      	ldr	r3, [r7, #32]
 800e70c:	3b10      	subs	r3, #16
 800e70e:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 800e710:	69fb      	ldr	r3, [r7, #28]
 800e712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e714:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	689a      	ldr	r2, [r3, #8]
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 800e730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e732:	3310      	adds	r3, #16
 800e734:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	69fa      	ldr	r2, [r7, #28]
 800e73a:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 800e73c:	69fa      	ldr	r2, [r7, #28]
 800e73e:	6a3b      	ldr	r3, [r7, #32]
 800e740:	1ad2      	subs	r2, r2, r3
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	1ad3      	subs	r3, r2, r3
 800e750:	f1a3 0210 	sub.w	r2, r3, #16
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	2b10      	cmp	r3, #16
 800e766:	d91c      	bls.n	800e7a2 <_ux_utility_memory_allocate+0x186>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) (((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested) & 0xFFFFFFFFu);
 800e768:	69fa      	ldr	r2, [r7, #28]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4413      	add	r3, r2
 800e76e:	3310      	adds	r3, #16
 800e770:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	689a      	ldr	r2, [r3, #8]
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	69fa      	ldr	r2, [r7, #28]
 800e77e:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	f1a3 0210 	sub.w	r2, r3, #16
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2200      	movs	r2, #0
 800e78e:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	697a      	ldr	r2, [r7, #20]
 800e794:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	1ad2      	subs	r2, r2, r3
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	3310      	adds	r3, #16
 800e7a8:	62bb      	str	r3, [r7, #40]	; 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	3310      	adds	r3, #16
 800e7b2:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	6938      	ldr	r0, [r7, #16]
 800e7ba:	f000 f955 	bl	800ea68 <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 800e7be:	4b18      	ldr	r3, [pc, #96]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	68da      	ldr	r2, [r3, #12]
 800e7c4:	4b16      	ldr	r3, [pc, #88]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d108      	bne.n	800e7e0 <_ux_utility_memory_allocate+0x1c4>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800e7ce:	4b14      	ldr	r3, [pc, #80]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6899      	ldr	r1, [r3, #8]
 800e7d4:	4b12      	ldr	r3, [pc, #72]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7da:	1a8a      	subs	r2, r1, r2
 800e7dc:	609a      	str	r2, [r3, #8]
 800e7de:	e014      	b.n	800e80a <_ux_utility_memory_allocate+0x1ee>
    }
    else
    {

       switch (memory_cache_flag)
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d108      	bne.n	800e7f8 <_ux_utility_memory_allocate+0x1dc>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 800e7e6:	4b0e      	ldr	r3, [pc, #56]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	6959      	ldr	r1, [r3, #20]
 800e7ec:	4b0c      	ldr	r3, [pc, #48]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7f2:	1a8a      	subs	r2, r1, r2
 800e7f4:	615a      	str	r2, [r3, #20]

            break;
 800e7f6:	e008      	b.n	800e80a <_ux_utility_memory_allocate+0x1ee>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 800e7f8:	4b09      	ldr	r3, [pc, #36]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	6899      	ldr	r1, [r3, #8]
 800e7fe:	4b08      	ldr	r3, [pc, #32]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e804:	1a8a      	subs	r2, r1, r2
 800e806:	609a      	str	r2, [r3, #8]
            break;
 800e808:	bf00      	nop
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e80a:	4b05      	ldr	r3, [pc, #20]	; (800e820 <_ux_utility_memory_allocate+0x204>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	331c      	adds	r3, #28
 800e810:	4618      	mov	r0, r3
 800e812:	f000 f969 	bl	800eae8 <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 800e816:	693b      	ldr	r3, [r7, #16]
}                                
 800e818:	4618      	mov	r0, r3
 800e81a:	3730      	adds	r7, #48	; 0x30
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	20005cc8 	.word	0x20005cc8

0800e824 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00a      	beq.n	800e84e <_ux_utility_memory_allocate_mulc_safe+0x2a>
 800e838:	2100      	movs	r1, #0
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	fba3 2302 	umull	r2, r3, r3, r2
 800e842:	2b00      	cmp	r3, #0
 800e844:	d000      	beq.n	800e848 <_ux_utility_memory_allocate_mulc_safe+0x24>
 800e846:	2101      	movs	r1, #1
 800e848:	460b      	mov	r3, r1
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d10a      	bne.n	800e864 <_ux_utility_memory_allocate_mulc_safe+0x40>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	683a      	ldr	r2, [r7, #0]
 800e852:	fb02 f303 	mul.w	r3, r2, r3
 800e856:	461a      	mov	r2, r3
 800e858:	68b9      	ldr	r1, [r7, #8]
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	f7ff fede 	bl	800e61c <_ux_utility_memory_allocate>
 800e860:	4603      	mov	r3, r0
 800e862:	e000      	b.n	800e866 <_ux_utility_memory_allocate_mulc_safe+0x42>
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 800e86e:	b480      	push	{r7}
 800e870:	b087      	sub	sp, #28
 800e872:	af00      	add	r7, sp, #0
 800e874:	60f8      	str	r0, [r7, #12]
 800e876:	60b9      	str	r1, [r7, #8]
 800e878:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 800e882:	e007      	b.n	800e894 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 800e884:	697a      	ldr	r2, [r7, #20]
 800e886:	1c53      	adds	r3, r2, #1
 800e888:	617b      	str	r3, [r7, #20]
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	1c59      	adds	r1, r3, #1
 800e88e:	6139      	str	r1, [r7, #16]
 800e890:	7812      	ldrb	r2, [r2, #0]
 800e892:	701a      	strb	r2, [r3, #0]
    while(length--)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	1e5a      	subs	r2, r3, #1
 800e898:	607a      	str	r2, [r7, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d1f2      	bne.n	800e884 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 800e89e:	bf00      	nop
}
 800e8a0:	371c      	adds	r7, #28
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr
	...

0800e8ac <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b086      	sub	sp, #24
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 800e8b4:	4b49      	ldr	r3, [pc, #292]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	331c      	adds	r3, #28
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f000 f91f 	bl	800eafe <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	3b10      	subs	r3, #16
 800e8c4:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3310      	adds	r3, #16
 800e8cc:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8d6:	d010      	beq.n	800e8fa <_ux_utility_memory_free+0x4e>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 800e8dc:	4a40      	ldr	r2, [pc, #256]	; (800e9e0 <_ux_utility_memory_free+0x134>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d00b      	beq.n	800e8fa <_ux_utility_memory_free+0x4e>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e8e2:	4b3e      	ldr	r3, [pc, #248]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	331c      	adds	r3, #28
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f000 f8fd 	bl	800eae8 <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 800e8ee:	2219      	movs	r2, #25
 800e8f0:	2108      	movs	r1, #8
 800e8f2:	2002      	movs	r0, #2
 800e8f4:	f7ff fd22 	bl	800e33c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 800e8f8:	e06c      	b.n	800e9d4 <_ux_utility_memory_free+0x128>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 800e900:	e007      	b.n	800e912 <_ux_utility_memory_free+0x66>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d107      	bne.n	800e91c <_ux_utility_memory_free+0x70>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1f3      	bne.n	800e902 <_ux_utility_memory_free+0x56>
 800e91a:	e000      	b.n	800e91e <_ux_utility_memory_free+0x72>

        else

            /* The previous memory block is not free.  */
            break;
 800e91c:	bf00      	nop
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 800e924:	e01a      	b.n	800e95c <_ux_utility_memory_free+0xb0>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d006      	beq.n	800e93c <_ux_utility_memory_free+0x90>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	693a      	ldr	r2, [r7, #16]
 800e932:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	60da      	str	r2, [r3, #12]
            break;
 800e93a:	e012      	b.n	800e962 <_ux_utility_memory_free+0xb6>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	689a      	ldr	r2, [r3, #8]
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4413      	add	r3, r2
 800e94e:	f103 0210 	add.w	r2, r3, #16
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	689b      	ldr	r3, [r3, #8]
 800e95a:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1e1      	bne.n	800e926 <_ux_utility_memory_free+0x7a>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 800e962:	4b1e      	ldr	r3, [pc, #120]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68da      	ldr	r2, [r3, #12]
 800e968:	4b1c      	ldr	r3, [pc, #112]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d108      	bne.n	800e984 <_ux_utility_memory_free+0xd8>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 800e972:	4b1a      	ldr	r3, [pc, #104]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	6899      	ldr	r1, [r3, #8]
 800e978:	4b18      	ldr	r3, [pc, #96]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	440a      	add	r2, r1
 800e980:	609a      	str	r2, [r3, #8]
 800e982:	e020      	b.n	800e9c6 <_ux_utility_memory_free+0x11a>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 800e984:	4b15      	ldr	r3, [pc, #84]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 800e98c:	697a      	ldr	r2, [r7, #20]
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	429a      	cmp	r2, r3
 800e992:	d310      	bcc.n	800e9b6 <_ux_utility_memory_free+0x10a>
 800e994:	4b11      	ldr	r3, [pc, #68]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	68ba      	ldr	r2, [r7, #8]
 800e99c:	4413      	add	r3, r2
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d208      	bcs.n	800e9b6 <_ux_utility_memory_free+0x10a>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 800e9a4:	4b0d      	ldr	r3, [pc, #52]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	6899      	ldr	r1, [r3, #8]
 800e9aa:	4b0c      	ldr	r3, [pc, #48]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	440a      	add	r2, r1
 800e9b2:	609a      	str	r2, [r3, #8]
 800e9b4:	e007      	b.n	800e9c6 <_ux_utility_memory_free+0x11a>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 800e9b6:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	6959      	ldr	r1, [r3, #20]
 800e9bc:	4b07      	ldr	r3, [pc, #28]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	440a      	add	r2, r1
 800e9c4:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 800e9c6:	4b05      	ldr	r3, [pc, #20]	; (800e9dc <_ux_utility_memory_free+0x130>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	331c      	adds	r3, #28
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f000 f88b 	bl	800eae8 <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 800e9d2:	bf00      	nop
}
 800e9d4:	3718      	adds	r7, #24
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	20005cc8 	.word	0x20005cc8
 800e9e0:	80000001 	.word	0x80000001

0800e9e4 <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d003      	beq.n	800ea00 <_ux_utility_memory_free_block_best_get+0x1c>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d005      	beq.n	800ea0a <_ux_utility_memory_free_block_best_get+0x26>
 800e9fe:	e009      	b.n	800ea14 <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 800ea00:	4b18      	ldr	r3, [pc, #96]	; (800ea64 <_ux_utility_memory_free_block_best_get+0x80>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	60fb      	str	r3, [r7, #12]
            break;
 800ea08:	e006      	b.n	800ea18 <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 800ea0a:	4b16      	ldr	r3, [pc, #88]	; (800ea64 <_ux_utility_memory_free_block_best_get+0x80>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	60fb      	str	r3, [r7, #12]
            break;
 800ea12:	e001      	b.n	800ea18 <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 800ea14:	2300      	movs	r3, #0
 800ea16:	e01e      	b.n	800ea56 <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 800ea18:	e019      	b.n	800ea4e <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d112      	bne.n	800ea48 <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	683a      	ldr	r2, [r7, #0]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d20d      	bcs.n	800ea48 <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d102      	bne.n	800ea38 <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	60bb      	str	r3, [r7, #8]
 800ea36:	e007      	b.n	800ea48 <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d201      	bcs.n	800ea48 <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	689b      	ldr	r3, [r3, #8]
 800ea4c:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d1e2      	bne.n	800ea1a <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 800ea54:	68bb      	ldr	r3, [r7, #8]
}                                
 800ea56:	4618      	mov	r0, r3
 800ea58:	3714      	adds	r7, #20
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	20005cc8 	.word	0x20005cc8

0800ea68 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b087      	sub	sp, #28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	460b      	mov	r3, r1
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	72fb      	strb	r3, [r7, #11]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 800ea7a:	e004      	b.n	800ea86 <_ux_utility_memory_set+0x1e>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	617a      	str	r2, [r7, #20]
 800ea82:	7afa      	ldrb	r2, [r7, #11]
 800ea84:	701a      	strb	r2, [r3, #0]
    while(length--)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	1e5a      	subs	r2, r3, #1
 800ea8a:	607a      	str	r2, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1f5      	bne.n	800ea7c <_ux_utility_memory_set+0x14>
    }

    /* Return to caller.  */
    return; 
 800ea90:	bf00      	nop
}
 800ea92:	371c      	adds	r7, #28
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <_ux_utility_mutex_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 800eaa6:	2334      	movs	r3, #52	; 0x34
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	6839      	ldr	r1, [r7, #0]
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f7fd fa81 	bl	800bfb4 <_txe_mutex_create>
 800eab2:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d004      	beq.n	800eac4 <_ux_utility_mutex_create+0x28>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800eaba:	68fa      	ldr	r2, [r7, #12]
 800eabc:	2108      	movs	r1, #8
 800eabe:	2002      	movs	r0, #2
 800eac0:	f7ff fc3c 	bl	800e33c <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 800eac4:	68fb      	ldr	r3, [r7, #12]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <_ux_utility_mutex_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_delete(UX_MUTEX *mutex)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b084      	sub	sp, #16
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to delete the Mutex object.  */
    status =  tx_mutex_delete(mutex);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7fd fb0a 	bl	800c0f0 <_txe_mutex_delete>
 800eadc:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800eade:	68fb      	ldr	r3, [r7, #12]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3710      	adds	r7, #16
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <_ux_utility_mutex_off>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7fd fb95 	bl	800c220 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 800eaf6:	bf00      	nop
}
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <_ux_utility_mutex_on>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b084      	sub	sp, #16
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 800eb06:	f04f 31ff 	mov.w	r1, #4294967295
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7fd fb2e 	bl	800c16c <_txe_mutex_get>
 800eb10:	60f8      	str	r0, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d005      	beq.n	800eb24 <_ux_utility_mutex_on+0x26>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	2108      	movs	r1, #8
 800eb1c:	2002      	movs	r0, #2
 800eb1e:	f7ff fc0d 	bl	800e33c <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 800eb22:	bf00      	nop
 800eb24:	bf00      	nop
}
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <_ux_utility_semaphore_create>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b086      	sub	sp, #24
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	60f8      	str	r0, [r7, #12]
 800eb34:	60b9      	str	r1, [r7, #8]
 800eb36:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 800eb38:	231c      	movs	r3, #28
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	68b9      	ldr	r1, [r7, #8]
 800eb3e:	68f8      	ldr	r0, [r7, #12]
 800eb40:	f7fd fba8 	bl	800c294 <_txe_semaphore_create>
 800eb44:	6178      	str	r0, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d004      	beq.n	800eb56 <_ux_utility_semaphore_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	2108      	movs	r1, #8
 800eb50:	2002      	movs	r0, #2
 800eb52:	f7ff fbf3 	bl	800e33c <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 800eb56:	697b      	ldr	r3, [r7, #20]
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <_ux_utility_semaphore_delete>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7fd fc29 	bl	800c3c0 <_txe_semaphore_delete>
 800eb6e:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800eb70:	68fb      	ldr	r3, [r7, #12]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
	...

0800eb7c <_ux_utility_semaphore_get>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b092      	sub	sp, #72	; 0x48
 800eb80:	af06      	add	r7, sp, #24
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 800eb86:	f7fc f957 	bl	800ae38 <_tx_thread_identify>
 800eb8a:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 800eb8c:	f107 001c 	add.w	r0, r7, #28
 800eb90:	f107 0220 	add.w	r2, r7, #32
 800eb94:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800eb98:	f107 0308 	add.w	r3, r7, #8
 800eb9c:	9304      	str	r3, [sp, #16]
 800eb9e:	f107 030c 	add.w	r3, r7, #12
 800eba2:	9303      	str	r3, [sp, #12]
 800eba4:	f107 0310 	add.w	r3, r7, #16
 800eba8:	9302      	str	r3, [sp, #8]
 800ebaa:	f107 0314 	add.w	r3, r7, #20
 800ebae:	9301      	str	r3, [sp, #4]
 800ebb0:	f107 0318 	add.w	r3, r7, #24
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebba:	f7fd fd91 	bl	800c6e0 <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 800ebbe:	4b0a      	ldr	r3, [pc, #40]	; (800ebe8 <_ux_utility_semaphore_get+0x6c>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	699a      	ldr	r2, [r3, #24]
 800ebc4:	69bb      	ldr	r3, [r7, #24]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d203      	bcs.n	800ebd2 <_ux_utility_semaphore_get+0x56>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 800ebca:	4b07      	ldr	r3, [pc, #28]	; (800ebe8 <_ux_utility_semaphore_get+0x6c>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	69ba      	ldr	r2, [r7, #24]
 800ebd0:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 800ebd2:	6839      	ldr	r1, [r7, #0]
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7fd fc31 	bl	800c43c <_txe_semaphore_get>
 800ebda:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Return completion status.  */
    return(status);
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3730      	adds	r7, #48	; 0x30
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	20005cc8 	.word	0x20005cc8

0800ebec <_ux_utility_semaphore_put>:
/*                                            off in standalone build,    */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7fd fc63 	bl	800c4c0 <_txe_semaphore_put>
 800ebfa:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 800ec06:	b480      	push	{r7}
 800ec08:	b085      	sub	sp, #20
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	607a      	str	r2, [r7, #4]
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	81fb      	strh	r3, [r7, #14]
    value |=  (USHORT)(*address << 8);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	021b      	lsls	r3, r3, #8
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	89fb      	ldrh	r3, [r7, #14]
 800ec24:	4313      	orrs	r3, r2
 800ec26:	81fb      	strh	r3, [r7, #14]

    /* Return to caller.  */
    return((ULONG) value);
 800ec28:	89fb      	ldrh	r3, [r7, #14]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3714      	adds	r7, #20
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr

0800ec36 <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b086      	sub	sp, #24
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	60f8      	str	r0, [r7, #12]
 800ec3e:	60b9      	str	r1, [r7, #8]
 800ec40:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d101      	bne.n	800ec4c <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 800ec48:	23ff      	movs	r3, #255	; 0xff
 800ec4a:	e01d      	b.n	800ec88 <_ux_utility_string_length_check+0x52>

    string_length = 0;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	4413      	add	r3, r2
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00d      	beq.n	800ec78 <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	3301      	adds	r3, #1
 800ec60:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d9f2      	bls.n	800ec50 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 800ec6a:	22ff      	movs	r2, #255	; 0xff
 800ec6c:	2108      	movs	r1, #8
 800ec6e:	2002      	movs	r0, #2
 800ec70:	f7ff fb64 	bl	800e33c <_ux_system_error_handler>

            return(UX_ERROR);
 800ec74:	23ff      	movs	r3, #255	; 0xff
 800ec76:	e007      	b.n	800ec88 <_ux_utility_string_length_check+0x52>
            break;
 800ec78:	bf00      	nop
        }
    }

    if (string_length_ptr)
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d002      	beq.n	800ec86 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	697a      	ldr	r2, [r7, #20]
 800ec84:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 800ec86:	2300      	movs	r3, #0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3718      	adds	r7, #24
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <_ux_device_class_cdc_acm_activate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
UX_SLAVE_INTERFACE                      *interface_ptr;         
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_CDC_ACM                  *cdc_acm;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a1b      	ldr	r3, [r3, #32]
 800ec9c:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eca2:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	60fb      	str	r3, [r7, #12]
    
    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	693a      	ldr	r2, [r7, #16]
 800ecae:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	601a      	str	r2, [r3, #0]

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <_ux_device_class_cdc_acm_activate+0x36>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	6938      	ldr	r0, [r7, #16]
 800ecc4:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b08a      	sub	sp, #40	; 0x28
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
ULONG                                   value;
ULONG                                   request_length;
ULONG                                   transmit_length;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6a1b      	ldr	r3, [r3, #32]
 800ecdc:	623b      	str	r3, [r7, #32]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800ecde:	6a3b      	ldr	r3, [r7, #32]
 800ece0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ece2:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ece4:	4b51      	ldr	r3, [pc, #324]	; (800ee2c <_ux_device_class_cdc_acm_control_request+0x15c>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	3320      	adds	r3, #32
 800ecea:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	336c      	adds	r3, #108	; 0x6c
 800ecf0:	617b      	str	r3, [r7, #20]

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ecf8:	613b      	str	r3, [r7, #16]

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	3354      	adds	r3, #84	; 0x54
 800ecfe:	3302      	adds	r3, #2
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7ff ff80 	bl	800ec06 <_ux_utility_short_get>
 800ed06:	60f8      	str	r0, [r7, #12]

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	3354      	adds	r3, #84	; 0x54
 800ed0c:	3306      	adds	r3, #6
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7ff ff79 	bl	800ec06 <_ux_utility_short_get>
 800ed14:	60b8      	str	r0, [r7, #8]

    transmit_length = request_length ;
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	2b22      	cmp	r3, #34	; 0x22
 800ed1e:	d009      	beq.n	800ed34 <_ux_device_class_cdc_acm_control_request+0x64>
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	2b22      	cmp	r3, #34	; 0x22
 800ed24:	d877      	bhi.n	800ee16 <_ux_device_class_cdc_acm_control_request+0x146>
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	2b20      	cmp	r3, #32
 800ed2a:	d051      	beq.n	800edd0 <_ux_device_class_cdc_acm_control_request+0x100>
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	2b21      	cmp	r3, #33	; 0x21
 800ed30:	d023      	beq.n	800ed7a <_ux_device_class_cdc_acm_control_request+0xaa>
 800ed32:	e070      	b.n	800ee16 <_ux_device_class_cdc_acm_control_request+0x146>
    {

        case UX_SLAVE_CLASS_CDC_ACM_SET_CONTROL_LINE_STATE:

            /* Reset current line state values. */
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	2200      	movs	r2, #0
 800ed38:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            /* Get the line state parameters from the host.  DTR signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f003 0301 	and.w	r3, r3, #1
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d003      	beq.n	800ed56 <_ux_device_class_cdc_acm_control_request+0x86>
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	2201      	movs	r2, #1
 800ed52:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

            /* Get the line state parameters from the host.  RTS signal. */
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f003 0302 	and.w	r3, r3, #2
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d003      	beq.n	800ed68 <_ux_device_class_cdc_acm_control_request+0x98>
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                
            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d054      	beq.n	800ee1a <_ux_device_class_cdc_acm_control_request+0x14a>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	69f8      	ldr	r0, [r7, #28]
 800ed76:	4798      	blx	r3
            }

            break ;
 800ed78:	e04f      	b.n	800ee1a <_ux_device_class_cdc_acm_control_request+0x14a>

        case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING:

            /* Setup the length appropriately.  */
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	2b07      	cmp	r3, #7
 800ed7e:	d901      	bls.n	800ed84 <_ux_device_class_cdc_acm_control_request+0xb4>
                transmit_length = UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE;
 800ed80:	2307      	movs	r3, #7
 800ed82:	627b      	str	r3, [r7, #36]	; 0x24
    
            /* Send the line coding default parameters back to the host.  */
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	68da      	ldr	r2, [r3, #12]
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	4610      	mov	r0, r2
 800ed90:	f7ff fc20 	bl	800e5d4 <_ux_utility_long_put>
                                    cdc_acm -> ux_slave_class_cdc_acm_baudrate);
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	69fa      	ldr	r2, [r7, #28]
 800ed9c:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 800eda0:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	68db      	ldr	r3, [r3, #12]
 800eda6:	3305      	adds	r3, #5
 800eda8:	69fa      	ldr	r2, [r7, #28]
 800edaa:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800edae:	701a      	strb	r2, [r3, #0]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	3306      	adds	r3, #6
 800edb6:	69fa      	ldr	r2, [r7, #28]
 800edb8:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 800edbc:	701a      	strb	r2, [r3, #0]

            /* Set the phase of the transfer to data out.  */
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	2203      	movs	r2, #3
 800edc2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Perform the data transfer.  */
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800edc4:	68ba      	ldr	r2, [r7, #8]
 800edc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edc8:	6978      	ldr	r0, [r7, #20]
 800edca:	f7ff fa2d 	bl	800e228 <_ux_device_stack_transfer_request>
            break; 
 800edce:	e027      	b.n	800ee20 <_ux_device_class_cdc_acm_control_request+0x150>
            
        case UX_SLAVE_CLASS_CDC_ACM_SET_LINE_CODING:

            /* Get the line coding parameters from the host.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7ff fbd7 	bl	800e588 <_ux_utility_long_get>
 800edda:	4602      	mov	r2, r0
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	791a      	ldrb	r2, [r3, #4]
 800ede6:	69fb      	ldr	r3, [r7, #28]
 800ede8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	795a      	ldrb	r2, [r3, #5]
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	799a      	ldrb	r2, [r3, #6]
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            /* If there is a parameter change function call it.  */
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d008      	beq.n	800ee1e <_ux_device_class_cdc_acm_control_request+0x14e>
            {        
        
                /* Invoke the application.  */
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	69f8      	ldr	r0, [r7, #28]
 800ee12:	4798      	blx	r3
            }

            break ;
 800ee14:	e003      	b.n	800ee1e <_ux_device_class_cdc_acm_control_request+0x14e>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 800ee16:	23ff      	movs	r3, #255	; 0xff
 800ee18:	e003      	b.n	800ee22 <_ux_device_class_cdc_acm_control_request+0x152>
            break ;
 800ee1a:	bf00      	nop
 800ee1c:	e000      	b.n	800ee20 <_ux_device_class_cdc_acm_control_request+0x150>
            break ;
 800ee1e:	bf00      	nop
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3728      	adds	r7, #40	; 0x28
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	20005cc4 	.word	0x20005cc4

0800ee30 <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b088      	sub	sp, #32
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6a1b      	ldr	r3, [r3, #32]
 800ee3c:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee42:	613b      	str	r3, [r7, #16]

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	60fb      	str	r3, [r7, #12]
    
    /* Locate the endpoints.  */
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee4e:	61fb      	str	r3, [r7, #28]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	695b      	ldr	r3, [r3, #20]
 800ee54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d105      	bne.n	800ee68 <_ux_device_class_cdc_acm_deactivate+0x38>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	61bb      	str	r3, [r7, #24]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee64:	61fb      	str	r3, [r7, #28]
 800ee66:	e002      	b.n	800ee6e <_ux_device_class_cdc_acm_deactivate+0x3e>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6c:	61bb      	str	r3, [r7, #24]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800ee6e:	2126      	movs	r1, #38	; 0x26
 800ee70:	69f8      	ldr	r0, [r7, #28]
 800ee72:	f7ff f9c7 	bl	800e204 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 800ee76:	2126      	movs	r1, #38	; 0x26
 800ee78:	69b8      	ldr	r0, [r7, #24]
 800ee7a:	f7ff f9c3 	bl	800e204 <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 800ee7e:	2200      	movs	r2, #0
 800ee80:	2107      	movs	r1, #7
 800ee82:	6938      	ldr	r0, [r7, #16]
 800ee84:	f000 f8bc 	bl	800f000 <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d003      	beq.n	800ee98 <_ux_device_class_cdc_acm_deactivate+0x68>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	6938      	ldr	r0, [r7, #16]
 800ee96:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	2200      	movs	r2, #0
 800eea4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
 800eea8:	2300      	movs	r3, #0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3720      	adds	r7, #32
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
	...

0800eeb4 <_ux_device_class_cdc_acm_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	3b01      	subs	r3, #1
 800eec2:	2b06      	cmp	r3, #6
 800eec4:	d836      	bhi.n	800ef34 <_ux_device_class_cdc_acm_entry+0x80>
 800eec6:	a201      	add	r2, pc, #4	; (adr r2, 800eecc <_ux_device_class_cdc_acm_entry+0x18>)
 800eec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eecc:	0800ef01 	.word	0x0800ef01
 800eed0:	0800ef11 	.word	0x0800ef11
 800eed4:	0800ef1d 	.word	0x0800ef1d
 800eed8:	0800ef29 	.word	0x0800ef29
 800eedc:	0800eee9 	.word	0x0800eee9
 800eee0:	0800ef35 	.word	0x0800ef35
 800eee4:	0800eef5 	.word	0x0800eef5
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_initialize(command);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f829 	bl	800ef40 <_ux_device_class_cdc_acm_initialize>
 800eeee:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	e020      	b.n	800ef36 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 f9e1 	bl	800f2bc <_ux_device_class_cdc_acm_uninitialize>
 800eefa:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	e01a      	b.n	800ef36 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	695b      	ldr	r3, [r3, #20]
 800ef04:	2b0a      	cmp	r3, #10
 800ef06:	d101      	bne.n	800ef0c <_ux_device_class_cdc_acm_entry+0x58>
            return(UX_SUCCESS);
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e014      	b.n	800ef36 <_ux_device_class_cdc_acm_entry+0x82>
        else
            return(UX_NO_CLASS_MATCH);
 800ef0c:	2357      	movs	r3, #87	; 0x57
 800ef0e:	e012      	b.n	800ef36 <_ux_device_class_cdc_acm_entry+0x82>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f7ff febd 	bl	800ec90 <_ux_device_class_cdc_acm_activate>
 800ef16:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	e00c      	b.n	800ef36 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7ff ff87 	bl	800ee30 <_ux_device_class_cdc_acm_deactivate>
 800ef22:	60f8      	str	r0, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	e006      	b.n	800ef36 <_ux_device_class_cdc_acm_entry+0x82>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7ff fed1 	bl	800ecd0 <_ux_device_class_cdc_acm_control_request>
 800ef2e:	60f8      	str	r0, [r7, #12]

        /* Return the completion status.  */
        return(status);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	e000      	b.n	800ef36 <_ux_device_class_cdc_acm_entry+0x82>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800ef34:	2354      	movs	r3, #84	; 0x54
    }   
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop

0800ef40 <_ux_device_class_cdc_acm_initialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b086      	sub	sp, #24
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
#if !defined(UX_DEVICE_STANDALONE)
UINT                                    status;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6a1b      	ldr	r3, [r3, #32]
 800ef4c:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800ef4e:	2284      	movs	r2, #132	; 0x84
 800ef50:	2100      	movs	r1, #0
 800ef52:	2000      	movs	r0, #0
 800ef54:	f7ff fb62 	bl	800e61c <_ux_utility_memory_allocate>
 800ef58:	6138      	str	r0, [r7, #16]

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d101      	bne.n	800ef64 <_ux_device_class_cdc_acm_initialize+0x24>
        return(UX_MEMORY_INSUFFICIENT);
 800ef60:	2312      	movs	r3, #18
 800ef62:	e045      	b.n	800eff0 <_ux_device_class_cdc_acm_initialize+0xb0>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	693a      	ldr	r2, [r7, #16]
 800ef68:	649a      	str	r2, [r3, #72]	; 0x48

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef6e:	60fb      	str	r3, [r7, #12]

    /* Store the start and stop signals if needed by the application.  */
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	605a      	str	r2, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	685a      	ldr	r2, [r3, #4]
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	609a      	str	r2, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	689a      	ldr	r2, [r3, #8]
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	60da      	str	r2, [r3, #12]

#if !defined(UX_DEVICE_STANDALONE)

    /* Create the Mutex for each endpoint as multiple threads cannot access each pipe at the same time.  */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex, "ux_slave_class_cdc_acm_in_mutex");
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	3310      	adds	r3, #16
 800ef8c:	491a      	ldr	r1, [pc, #104]	; (800eff8 <_ux_device_class_cdc_acm_initialize+0xb8>)
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7ff fd84 	bl	800ea9c <_ux_utility_mutex_create>
 800ef94:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d004      	beq.n	800efa6 <_ux_device_class_cdc_acm_initialize+0x66>
    {

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800ef9c:	6938      	ldr	r0, [r7, #16]
 800ef9e:	f7ff fc85 	bl	800e8ac <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800efa2:	2317      	movs	r3, #23
 800efa4:	e024      	b.n	800eff0 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

    /* Out Mutex. */
    status =  _ux_utility_mutex_create(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex, "ux_slave_class_cdc_acm_out_mutex");
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	3344      	adds	r3, #68	; 0x44
 800efaa:	4914      	ldr	r1, [pc, #80]	; (800effc <_ux_device_class_cdc_acm_initialize+0xbc>)
 800efac:	4618      	mov	r0, r3
 800efae:	f7ff fd75 	bl	800ea9c <_ux_utility_mutex_create>
 800efb2:	60b8      	str	r0, [r7, #8]

    /* Check Mutex creation error.  */
    if(status != UX_SUCCESS)
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d009      	beq.n	800efce <_ux_device_class_cdc_acm_initialize+0x8e>
    {

        /* Delete the endpoint IN mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	3310      	adds	r3, #16
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7ff fd85 	bl	800eace <_ux_utility_mutex_delete>

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800efc4:	6938      	ldr	r0, [r7, #16]
 800efc6:	f7ff fc71 	bl	800e8ac <_ux_utility_memory_free>
        
        /* Return fatal error.  */
        return(UX_MUTEX_ERROR);
 800efca:	2317      	movs	r3, #23
 800efcc:	e010      	b.n	800eff0 <_ux_device_class_cdc_acm_initialize+0xb0>
    }        

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800efd4:	679a      	str	r2, [r3, #120]	; 0x78
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	2201      	movs	r2, #1
 800efda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	2200      	movs	r2, #0
 800efe2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	2208      	movs	r2, #8
 800efea:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3718      	adds	r7, #24
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	08012664 	.word	0x08012664
 800effc:	08012684 	.word	0x08012684

0800f000 <_ux_device_class_cdc_acm_ioctl>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_ioctl(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, ULONG ioctl_function,
                                    VOID *parameter)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b08a      	sub	sp, #40	; 0x28
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT                                   *endpoint;
UX_SLAVE_INTERFACE                                  *interface_ptr;
UX_SLAVE_TRANSFER                                   *transfer_request;

    /* Let's be optimist ! */
    status = UX_SUCCESS;
 800f00c:	2300      	movs	r3, #0
 800f00e:	627b      	str	r3, [r7, #36]	; 0x24

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	3b01      	subs	r3, #1
 800f014:	2b08      	cmp	r3, #8
 800f016:	f200 80b0 	bhi.w	800f17a <_ux_device_class_cdc_acm_ioctl+0x17a>
 800f01a:	a201      	add	r2, pc, #4	; (adr r2, 800f020 <_ux_device_class_cdc_acm_ioctl+0x20>)
 800f01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f020:	0800f045 	.word	0x0800f045
 800f024:	0800f071 	.word	0x0800f071
 800f028:	0800f09d 	.word	0x0800f09d
 800f02c:	0800f0d1 	.word	0x0800f0d1
 800f030:	0800f0b7 	.word	0x0800f0b7
 800f034:	0800f17b 	.word	0x0800f17b
 800f038:	0800f17b 	.word	0x0800f17b
 800f03c:	0800f135 	.word	0x0800f135
 800f040:	0800f135 	.word	0x0800f135
    {

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	679a      	str	r2, [r3, #120]	; 0x78
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	791a      	ldrb	r2, [r3, #4]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	795a      	ldrb	r2, [r3, #5]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	799a      	ldrb	r2, [r3, #6]
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            
            break;
 800f06e:	e08d      	b.n	800f18c <_ux_device_class_cdc_acm_ioctl+0x18c>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING:
    
            /* Properly cast the parameter pointer.  */
            line_coding = (UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARAMETER *) parameter;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	613b      	str	r3, [r7, #16]
    
            /* Save the parameters in the cdc_acm function.  */
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	601a      	str	r2, [r3, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	711a      	strb	r2, [r3, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	715a      	strb	r2, [r3, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	719a      	strb	r2, [r3, #6]
            
            break;
 800f09a:	e077      	b.n	800f18c <_ux_device_class_cdc_acm_ioctl+0x18c>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	617b      	str	r3, [r7, #20]
    
            /* Return the DTR/RTS signals.  */
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	701a      	strb	r2, [r3, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	705a      	strb	r2, [r3, #1]
            
            break;
 800f0b4:	e06a      	b.n	800f18c <_ux_device_class_cdc_acm_ioctl+0x18c>
            
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_STATE:
        
            /* Properly cast the parameter pointer.  */
            line_state = (UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_PARAMETER *) parameter;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	617b      	str	r3, [r7, #20]
    
            /* Set the DTR/RTS signals.  */
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	781a      	ldrb	r2, [r3, #0]
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	785a      	ldrb	r2, [r3, #1]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            
            break;
 800f0ce:	e05d      	b.n	800f18c <_ux_device_class_cdc_acm_ioctl+0x18c>
            

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_ABORT_PIPE:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	61fb      	str	r3, [r7, #28]
    
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0da:	623b      	str	r3, [r7, #32]
            
            /* What direction ?  */
            switch( (ULONG) (ALIGN_TYPE) parameter)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d002      	beq.n	800f0e8 <_ux_device_class_cdc_acm_ioctl+0xe8>
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d00a      	beq.n	800f0fc <_ux_device_class_cdc_acm_ioctl+0xfc>
 800f0e6:	e013      	b.n	800f110 <_ux_device_class_cdc_acm_ioctl+0x110>
            {
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT : 
    
                /* Check the endpoint direction, if IN we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800f0e8:	6a3b      	ldr	r3, [r7, #32]
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d110      	bne.n	800f116 <_ux_device_class_cdc_acm_ioctl+0x116>
                {

                    /* So the next endpoint has to be the XMIT endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800f0f4:	6a3b      	ldr	r3, [r7, #32]
 800f0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f8:	623b      	str	r3, [r7, #32]
                }
                break;
 800f0fa:	e00c      	b.n	800f116 <_ux_device_class_cdc_acm_ioctl+0x116>
                
                case UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_RCV : 
    
                /* Check the endpoint direction, if OUT we have the correct endpoint.  */
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	695b      	ldr	r3, [r3, #20]
 800f100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f104:	2b00      	cmp	r3, #0
 800f106:	d008      	beq.n	800f11a <_ux_device_class_cdc_acm_ioctl+0x11a>
                {

                    /* So the next endpoint has to be the RCV endpoint.  */
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800f108:	6a3b      	ldr	r3, [r7, #32]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10c:	623b      	str	r3, [r7, #32]
                }
                break;
 800f10e:	e004      	b.n	800f11a <_ux_device_class_cdc_acm_ioctl+0x11a>


                default :
                
                /* Parameter not supported. Return an error.  */
                status =  UX_ENDPOINT_HANDLE_UNKNOWN;
 800f110:	2353      	movs	r3, #83	; 0x53
 800f112:	627b      	str	r3, [r7, #36]	; 0x24
 800f114:	e002      	b.n	800f11c <_ux_device_class_cdc_acm_ioctl+0x11c>
                break;
 800f116:	bf00      	nop
 800f118:	e000      	b.n	800f11c <_ux_device_class_cdc_acm_ioctl+0x11c>
                break;
 800f11a:	bf00      	nop
            }
        
            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800f11c:	6a3b      	ldr	r3, [r7, #32]
 800f11e:	3330      	adds	r3, #48	; 0x30
 800f120:	61bb      	str	r3, [r7, #24]
            else
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
#else

            /* Check the status of the transfer. */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2b01      	cmp	r3, #1
 800f128:	d12f      	bne.n	800f18a <_ux_device_class_cdc_acm_ioctl+0x18a>
            {

                /* Abort the transfer.  */
            _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800f12a:	21f9      	movs	r1, #249	; 0xf9
 800f12c:	69b8      	ldr	r0, [r7, #24]
 800f12e:	f7ff f82f 	bl	800e190 <_ux_device_stack_transfer_abort>

            }
#endif
            break;
 800f132:	e02a      	b.n	800f18a <_ux_device_class_cdc_acm_ioctl+0x18a>

        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT:
        case UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_WRITE_TIMEOUT:

            /* Get the interface from the instance.  */
            interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	61fb      	str	r3, [r7, #28]

            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f13e:	623b      	str	r3, [r7, #32]

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800f140:	6a3b      	ldr	r3, [r7, #32]
 800f142:	695b      	ldr	r3, [r3, #20]
 800f144:	f003 0380 	and.w	r3, r3, #128	; 0x80
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	2a08      	cmp	r2, #8
 800f14c:	d101      	bne.n	800f152 <_ux_device_class_cdc_acm_ioctl+0x152>
 800f14e:	2200      	movs	r2, #0
 800f150:	e000      	b.n	800f154 <_ux_device_class_cdc_acm_ioctl+0x154>
 800f152:	2280      	movs	r2, #128	; 0x80
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800f154:	429a      	cmp	r2, r3
 800f156:	d002      	beq.n	800f15e <_ux_device_class_cdc_acm_ioctl+0x15e>
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 800f158:	6a3b      	ldr	r3, [r7, #32]
 800f15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f15c:	623b      	str	r3, [r7, #32]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	3330      	adds	r3, #48	; 0x30
 800f162:	61bb      	str	r3, [r7, #24]

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d102      	bne.n	800f172 <_ux_device_class_cdc_acm_ioctl+0x172>
                status = UX_ERROR;
 800f16c:	23ff      	movs	r3, #255	; 0xff
 800f16e:	627b      	str	r3, [r7, #36]	; 0x24
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;

            break;
 800f170:	e00c      	b.n	800f18c <_ux_device_class_cdc_acm_ioctl+0x18c>
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 800f178:	e008      	b.n	800f18c <_ux_device_class_cdc_acm_ioctl+0x18c>
#endif

        default: 

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800f17a:	2254      	movs	r2, #84	; 0x54
 800f17c:	2107      	movs	r1, #7
 800f17e:	2002      	movs	r0, #2
 800f180:	f7ff f8dc 	bl	800e33c <_ux_system_error_handler>
    
            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
            /* Function not supported. Return an error.  */
            status =  UX_FUNCTION_NOT_SUPPORTED;
 800f184:	2354      	movs	r3, #84	; 0x54
 800f186:	627b      	str	r3, [r7, #36]	; 0x24
 800f188:	e000      	b.n	800f18c <_ux_device_class_cdc_acm_ioctl+0x18c>
            break;
 800f18a:	bf00      	nop
    }   

    /* Return status to caller.  */
    return(status);
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
          
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3728      	adds	r7, #40	; 0x28
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop

0800f198 <_ux_device_class_cdc_acm_read>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_read(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b08a      	sub	sp, #40	; 0x28
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
 800f1a4:	603b      	str	r3, [r7, #0]

UX_SLAVE_ENDPOINT           *endpoint;
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
UINT                        status= UX_SUCCESS;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f1aa:	4b43      	ldr	r3, [pc, #268]	; (800f2b8 <_ux_device_class_cdc_acm_read+0x120>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	3320      	adds	r3, #32
 800f1b0:	61bb      	str	r3, [r7, #24]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b03      	cmp	r3, #3
 800f1b8:	d006      	beq.n	800f1c8 <_ux_device_class_cdc_acm_read+0x30>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 800f1ba:	2251      	movs	r2, #81	; 0x51
 800f1bc:	2107      	movs	r1, #7
 800f1be:	2002      	movs	r0, #2
 800f1c0:	f7ff f8bc 	bl	800e33c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800f1c4:	2351      	movs	r3, #81	; 0x51
 800f1c6:	e073      	b.n	800f2b0 <_ux_device_class_cdc_acm_read+0x118>
    }
    
    /* This is the first time we are activated. We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	617b      	str	r3, [r7, #20]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d2:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	695b      	ldr	r3, [r3, #20]
 800f1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <_ux_device_class_cdc_acm_read+0x4e>
    {

        /* So the next endpoint has to be the OUT endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	3344      	adds	r3, #68	; 0x44
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7ff fc87 	bl	800eafe <_ux_utility_mutex_on>
        
    /* All CDC reading  are on the endpoint OUT, from the host.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	3330      	adds	r3, #48	; 0x30
 800f1f4:	613b      	str	r3, [r7, #16]
    
    /* Reset the actual length.  */
    *actual_length =  0;
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	601a      	str	r2, [r3, #0]
    
    /* Check if we need more transactions.  */
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800f1fc:	e040      	b.n	800f280 <_ux_device_class_cdc_acm_read+0xe8>
    { 
        
        /* Check if we have enough in the local buffer.  */
        if (requested_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f200:	69db      	ldr	r3, [r3, #28]
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	429a      	cmp	r2, r3
 800f206:	d903      	bls.n	800f210 <_ux_device_class_cdc_acm_read+0x78>
    
            /* We have too much to transfer.  */
            local_requested_length = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800f208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20a:	69db      	ldr	r3, [r3, #28]
 800f20c:	61fb      	str	r3, [r7, #28]
 800f20e:	e001      	b.n	800f214 <_ux_device_class_cdc_acm_read+0x7c>
            
        else
        
            /* We can proceed with the demanded length.  */
            local_requested_length = requested_length;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	61fb      	str	r3, [r7, #28]
        
        /* Send the request to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_requested_length);
 800f214:	69fa      	ldr	r2, [r7, #28]
 800f216:	69f9      	ldr	r1, [r7, #28]
 800f218:	6938      	ldr	r0, [r7, #16]
 800f21a:	f7ff f805 	bl	800e228 <_ux_device_stack_transfer_request>
 800f21e:	6238      	str	r0, [r7, #32]
        
        /* Check the status */    
        if (status == UX_SUCCESS)
 800f220:	6a3b      	ldr	r3, [r7, #32]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d125      	bne.n	800f272 <_ux_device_class_cdc_acm_read+0xda>
        {

            /* We need to copy the buffer locally.  */
            _ux_utility_memory_copy(buffer, transfer_request -> ux_slave_transfer_request_data_pointer,
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	68d9      	ldr	r1, [r3, #12]
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	461a      	mov	r2, r3
 800f230:	68b8      	ldr	r0, [r7, #8]
 800f232:	f7ff fb1c 	bl	800e86e <_ux_utility_memory_copy>
                            transfer_request -> ux_slave_transfer_request_actual_length); /* Use case of memcpy is verified. */
    
            /* Next buffer address.  */
            buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	699b      	ldr	r3, [r3, #24]
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	4413      	add	r3, r2
 800f23e:	60bb      	str	r3, [r7, #8]
    
            /* Set the length actually received. */
            *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	699b      	ldr	r3, [r3, #24]
 800f248:	441a      	add	r2, r3
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	601a      	str	r2, [r3, #0]
    
            /* Decrement what left has to be done.  */
            requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	699b      	ldr	r3, [r3, #24]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	607b      	str	r3, [r7, #4]


            /* Is this a short packet or a ZLP indicating we are done with this transfer ?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length < endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	699a      	ldr	r2, [r3, #24]
 800f25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25e:	69db      	ldr	r3, [r3, #28]
 800f260:	429a      	cmp	r2, r3
 800f262:	d20d      	bcs.n	800f280 <_ux_device_class_cdc_acm_read+0xe8>
            {            

                /* We are done.  */
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	3344      	adds	r3, #68	; 0x44
 800f268:	4618      	mov	r0, r3
 800f26a:	f7ff fc3d 	bl	800eae8 <_ux_utility_mutex_off>
    
                /* Return with success.  */
                return(UX_SUCCESS);
 800f26e:	2300      	movs	r3, #0
 800f270:	e01e      	b.n	800f2b0 <_ux_device_class_cdc_acm_read+0x118>
        }
        else
        {
            
            /* Free Mutex resource.  */
            _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	3344      	adds	r3, #68	; 0x44
 800f276:	4618      	mov	r0, r3
 800f278:	f7ff fc36 	bl	800eae8 <_ux_utility_mutex_off>
    
            /* We got an error.  */
            return(status);
 800f27c:	6a3b      	ldr	r3, [r7, #32]
 800f27e:	e017      	b.n	800f2b0 <_ux_device_class_cdc_acm_read+0x118>
    while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2b03      	cmp	r3, #3
 800f286:	d102      	bne.n	800f28e <_ux_device_class_cdc_acm_read+0xf6>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1b7      	bne.n	800f1fe <_ux_device_class_cdc_acm_read+0x66>
        }            
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	3344      	adds	r3, #68	; 0x44
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff fc28 	bl	800eae8 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b03      	cmp	r3, #3
 800f29e:	d006      	beq.n	800f2ae <_ux_device_class_cdc_acm_read+0x116>
    {        

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 800f2a0:	2222      	movs	r2, #34	; 0x22
 800f2a2:	2107      	movs	r1, #7
 800f2a4:	2002      	movs	r0, #2
 800f2a6:	f7ff f849 	bl	800e33c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 800f2aa:	2322      	movs	r3, #34	; 0x22
 800f2ac:	e000      	b.n	800f2b0 <_ux_device_class_cdc_acm_read+0x118>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 800f2ae:	6a3b      	ldr	r3, [r7, #32]
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3728      	adds	r7, #40	; 0x28
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	20005cc4 	.word	0x20005cc4

0800f2bc <_ux_device_class_cdc_acm_uninitialize>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_CDC_ACM      *cdc_acm;
UX_SLAVE_CLASS              *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a1b      	ldr	r3, [r3, #32]
 800f2c8:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2ce:	60bb      	str	r3, [r7, #8]

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d00c      	beq.n	800f2f0 <_ux_device_class_cdc_acm_uninitialize+0x34>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete the IN endpoint mutex.  */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	3310      	adds	r3, #16
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7ff fbf7 	bl	800eace <_ux_utility_mutex_delete>

        /* Out Mutex. */
        _ux_device_mutex_delete(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_out_mutex);
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	3344      	adds	r3, #68	; 0x44
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff fbf2 	bl	800eace <_ux_utility_mutex_delete>
        _ux_utility_memory_free(cdc_acm -> ux_slave_class_cdc_acm_bulkout_thread_stack);
#endif
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800f2ea:	68b8      	ldr	r0, [r7, #8]
 800f2ec:	f7ff fade 	bl	800e8ac <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
	...

0800f2fc <_ux_device_class_cdc_acm_write>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_cdc_acm_write(UX_SLAVE_CLASS_CDC_ACM *cdc_acm, UCHAR *buffer, 
                                ULONG requested_length, ULONG *actual_length)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08c      	sub	sp, #48	; 0x30
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	603b      	str	r3, [r7, #0]
UX_SLAVE_DEVICE             *device;
UX_SLAVE_INTERFACE          *interface_ptr;
UX_SLAVE_TRANSFER           *transfer_request;
ULONG                       local_requested_length;
ULONG                       local_host_length;
UINT                        status = 0;
 800f30a:	2300      	movs	r3, #0
 800f30c:	623b      	str	r3, [r7, #32]
        /* Not allowed. */
        return(UX_ERROR);
#endif

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f30e:	4b49      	ldr	r3, [pc, #292]	; (800f434 <_ux_device_class_cdc_acm_write+0x138>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	3320      	adds	r3, #32
 800f314:	61fb      	str	r3, [r7, #28]
    
    /* As long as the device is in the CONFIGURED state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b03      	cmp	r3, #3
 800f31c:	d006      	beq.n	800f32c <_ux_device_class_cdc_acm_write+0x30>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_CONFIGURATION_HANDLE_UNKNOWN);
 800f31e:	2251      	movs	r2, #81	; 0x51
 800f320:	2107      	movs	r1, #7
 800f322:	2002      	movs	r0, #2
 800f324:	f7ff f80a 	bl	800e33c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONFIGURATION_HANDLE_UNKNOWN, device, 0, 0, UX_TRACE_ERRORS, 0, 0)
    
        /* Cannot proceed with command, the interface is down.  */
        return(UX_CONFIGURATION_HANDLE_UNKNOWN);
 800f328:	2351      	movs	r3, #81	; 0x51
 800f32a:	e07f      	b.n	800f42c <_ux_device_class_cdc_acm_write+0x130>
    }
        
    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	61bb      	str	r3, [r7, #24]
    
    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f336:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800f338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33a:	695b      	ldr	r3, [r3, #20]
 800f33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f340:	2b00      	cmp	r3, #0
 800f342:	d102      	bne.n	800f34a <_ux_device_class_cdc_acm_write+0x4e>
    {

        /* So the next endpoint has to be the IN endpoint.  */
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800f344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f348:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Protect this thread.  */
    _ux_device_mutex_on(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	3310      	adds	r3, #16
 800f34e:	4618      	mov	r0, r3
 800f350:	f7ff fbd5 	bl	800eafe <_ux_utility_mutex_on>
        
    /* We are writing to the IN endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	3330      	adds	r3, #48	; 0x30
 800f358:	617b      	str	r3, [r7, #20]

    /* Reset the actual length.  */
    *actual_length =  0;
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	2200      	movs	r2, #0
 800f35e:	601a      	str	r2, [r3, #0]

    /* Check if the application forces a 0 length packet.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length == 0)
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b03      	cmp	r3, #3
 800f366:	d10f      	bne.n	800f388 <_ux_device_class_cdc_acm_write+0x8c>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d10c      	bne.n	800f388 <_ux_device_class_cdc_acm_write+0x8c>
    {
        
        /* Send the request for 0 byte packet to the device controller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, 0, 0);
 800f36e:	2200      	movs	r2, #0
 800f370:	2100      	movs	r1, #0
 800f372:	6978      	ldr	r0, [r7, #20]
 800f374:	f7fe ff58 	bl	800e228 <_ux_device_stack_transfer_request>
 800f378:	6238      	str	r0, [r7, #32]

        /* Free Mutex resource.  */
        _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	3310      	adds	r3, #16
 800f37e:	4618      	mov	r0, r3
 800f380:	f7ff fbb2 	bl	800eae8 <_ux_utility_mutex_off>

        /* Return the status.  */
        return(status);
 800f384:	6a3b      	ldr	r3, [r7, #32]
 800f386:	e051      	b.n	800f42c <_ux_device_class_cdc_acm_write+0x130>

    }
    else
    {    
        /* Check if we need more transactions.  */
        local_host_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 800f388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f38c:	627b      	str	r3, [r7, #36]	; 0x24
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800f38e:	e035      	b.n	800f3fc <_ux_device_class_cdc_acm_write+0x100>
        { 
    
            /* Check if we have enough in the local buffer.  */
            if (requested_length > UX_SLAVE_REQUEST_DATA_MAX_LENGTH)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f396:	d903      	bls.n	800f3a0 <_ux_device_class_cdc_acm_write+0xa4>
    
                /* We have too much to transfer.  */
                local_requested_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH;
 800f398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f39c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f39e:	e004      	b.n	800f3aa <_ux_device_class_cdc_acm_write+0xae>
                
            else
            {

                /* We can proceed with the demanded length.  */
                local_requested_length = requested_length;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Assume the length match expectation.  */
                local_host_length = requested_length;
#else

                /* Assume expecting more, so ZLP is appended in stack.  */
                local_host_length = UX_SLAVE_REQUEST_DATA_MAX_LENGTH + 1;
 800f3a4:	f240 2301 	movw	r3, #513	; 0x201
 800f3a8:	627b      	str	r3, [r7, #36]	; 0x24
#endif
            }
                            
            /* On a out, we copy the buffer to the caller. Not very efficient but it makes the API
               easier.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3b0:	68b9      	ldr	r1, [r7, #8]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7ff fa5b 	bl	800e86e <_ux_utility_memory_copy>
                                buffer, local_requested_length); /* Use case of memcpy is verified. */
        
            /* Send the request to the device controller.  */
            status =  _ux_device_stack_transfer_request(transfer_request, local_requested_length, local_host_length);
 800f3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3bc:	6978      	ldr	r0, [r7, #20]
 800f3be:	f7fe ff33 	bl	800e228 <_ux_device_stack_transfer_request>
 800f3c2:	6238      	str	r0, [r7, #32]
        
            /* Check the status */    
            if (status == UX_SUCCESS)
 800f3c4:	6a3b      	ldr	r3, [r7, #32]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d111      	bne.n	800f3ee <_ux_device_class_cdc_acm_write+0xf2>
            {
    
                /* Next buffer address.  */
                buffer += transfer_request -> ux_slave_transfer_request_actual_length;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	699b      	ldr	r3, [r3, #24]
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	60bb      	str	r3, [r7, #8]
    
                /* Set the length actually received. */
                *actual_length += transfer_request -> ux_slave_transfer_request_actual_length; 
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	699b      	ldr	r3, [r3, #24]
 800f3dc:	441a      	add	r2, r3
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	601a      	str	r2, [r3, #0]
    
                /* Decrement what left has to be done.  */
                requested_length -= transfer_request -> ux_slave_transfer_request_actual_length;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	699b      	ldr	r3, [r3, #24]
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	607b      	str	r3, [r7, #4]
 800f3ec:	e006      	b.n	800f3fc <_ux_device_class_cdc_acm_write+0x100>
            
            else
            {
             
                /* Free Mutex resource.  */
                _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	3310      	adds	r3, #16
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7ff fb78 	bl	800eae8 <_ux_utility_mutex_off>
                
                /* We had an error, abort.  */
                return(status);
 800f3f8:	6a3b      	ldr	r3, [r7, #32]
 800f3fa:	e017      	b.n	800f42c <_ux_device_class_cdc_acm_write+0x130>
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED && requested_length != 0)
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b03      	cmp	r3, #3
 800f402:	d102      	bne.n	800f40a <_ux_device_class_cdc_acm_write+0x10e>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1c2      	bne.n	800f390 <_ux_device_class_cdc_acm_write+0x94>
        }
    }

    
    /* Free Mutex resource.  */
    _ux_device_mutex_off(&cdc_acm -> ux_slave_class_cdc_acm_endpoint_in_mutex);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	3310      	adds	r3, #16
 800f40e:	4618      	mov	r0, r3
 800f410:	f7ff fb6a 	bl	800eae8 <_ux_utility_mutex_off>

    /* Check why we got here, either completion or device was extracted.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	2b03      	cmp	r3, #3
 800f41a:	d006      	beq.n	800f42a <_ux_device_class_cdc_acm_write+0x12e>
    {
            
        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_TRANSFER_NO_ANSWER);
 800f41c:	2222      	movs	r2, #34	; 0x22
 800f41e:	2107      	movs	r1, #7
 800f420:	2002      	movs	r0, #2
 800f422:	f7fe ff8b 	bl	800e33c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_TRANSFER_NO_ANSWER, transfer_request, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Device must have been extracted.  */
        return (UX_TRANSFER_NO_ANSWER);
 800f426:	2322      	movs	r3, #34	; 0x22
 800f428:	e000      	b.n	800f42c <_ux_device_class_cdc_acm_write+0x130>
    }
    else
    
        /* Simply return the last transaction result.  */
        return(status);        
 800f42a:	6a3b      	ldr	r3, [r7, #32]
          
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3730      	adds	r7, #48	; 0x30
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	20005cc4 	.word	0x20005cc4

0800f438 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2280      	movs	r2, #128	; 0x80
 800f446:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2201      	movs	r2, #1
 800f44c:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 800f44e:	6838      	ldr	r0, [r7, #0]
 800f450:	f7fd fe5c 	bl	800d10c <_ux_device_stack_control_request_process>
}
 800f454:	bf00      	nop
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	2200      	movs	r2, #0
 800f46c:	625a      	str	r2, [r3, #36]	; 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2280      	movs	r2, #128	; 0x80
 800f472:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800f474:	68b8      	ldr	r0, [r7, #8]
 800f476:	f7fd fe49 	bl	800d10c <_ux_device_stack_control_request_process>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d108      	bne.n	800f492 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2203      	movs	r2, #3
 800f484:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800f486:	2300      	movs	r3, #0
 800f488:	2200      	movs	r2, #0
 800f48a:	2100      	movs	r1, #0
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7f4 f93e 	bl	800370e <HAL_PCD_EP_Transmit>
    }
}
 800f492:	bf00      	nop
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b084      	sub	sp, #16
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	60f8      	str	r0, [r7, #12]
 800f4a2:	60b9      	str	r1, [r7, #8]
 800f4a4:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2280      	movs	r2, #128	; 0x80
 800f4aa:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800f4ac:	68b8      	ldr	r0, [r7, #8]
 800f4ae:	f7fd fe2d 	bl	800d10c <_ux_device_stack_control_request_process>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d108      	bne.n	800f4ca <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2204      	movs	r2, #4
 800f4bc:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800f4be:	2300      	movs	r3, #0
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7f4 f922 	bl	800370e <HAL_PCD_EP_Transmit>
    }
}
 800f4ca:	bf00      	nop
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
	...

0800f4d4 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b088      	sub	sp, #32
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f4dc:	4b39      	ldr	r3, [pc, #228]	; (800f5c4 <HAL_PCD_SetupStageCallback+0xf0>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	69db      	ldr	r3, [r3, #28]
 800f4e6:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 800f4e8:	69bb      	ldr	r3, [r7, #24]
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	3330      	adds	r3, #48	; 0x30
 800f4f4:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800f502:	2208      	movs	r2, #8
 800f504:	4619      	mov	r1, r3
 800f506:	f7ff f9b2 	bl	800e86e <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	2200      	movs	r2, #0
 800f50e:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	2201      	movs	r2, #1
 800f514:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	2200      	movs	r2, #0
 800f51a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	f023 020e 	bic.w	r2, r3, #14
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f52e:	b25b      	sxtb	r3, r3
 800f530:	2b00      	cmp	r3, #0
 800f532:	da04      	bge.n	800f53e <HAL_PCD_SetupStageCallback+0x6a>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 800f534:	6939      	ldr	r1, [r7, #16]
 800f536:	6978      	ldr	r0, [r7, #20]
 800f538:	f7ff ff7e 	bl	800f438 <_ux_dcd_stm32_setup_in>
 800f53c:	e03f      	b.n	800f5be <HAL_PCD_SetupStageCallback+0xea>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	2200      	movs	r2, #0
 800f542:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d10a      	bne.n	800f564 <HAL_PCD_SetupStageCallback+0x90>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800f554:	2b00      	cmp	r3, #0
 800f556:	d105      	bne.n	800f564 <HAL_PCD_SetupStageCallback+0x90>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	6939      	ldr	r1, [r7, #16]
 800f55c:	6978      	ldr	r0, [r7, #20]
 800f55e:	f7ff ff9c 	bl	800f49a <_ux_dcd_stm32_setup_status>
 800f562:	e02c      	b.n	800f5be <HAL_PCD_SetupStageCallback+0xea>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	3354      	adds	r3, #84	; 0x54
 800f56e:	3306      	adds	r3, #6
 800f570:	4618      	mov	r0, r3
 800f572:	f7ff fb48 	bl	800ec06 <_ux_utility_short_get>
 800f576:	4602      	mov	r2, r0
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	695b      	ldr	r3, [r3, #20]
 800f580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f584:	d907      	bls.n	800f596 <HAL_PCD_SetupStageCallback+0xc2>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 800f586:	68f9      	ldr	r1, [r7, #12]
 800f588:	69b8      	ldr	r0, [r7, #24]
 800f58a:	f000 fad2 	bl	800fb32 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	2200      	movs	r2, #0
 800f592:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 800f594:	e013      	b.n	800f5be <HAL_PCD_SetupStageCallback+0xea>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	2200      	movs	r2, #0
 800f59a:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	68da      	ldr	r2, [r3, #12]
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 800f5a8:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	695b      	ldr	r3, [r3, #20]
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f7f4 f861 	bl	800367a <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 800f5be:	3720      	adds	r7, #32
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	20005cc4 	.word	0x20005cc4

0800f5c8 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b088      	sub	sp, #32
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f5d4:	4b57      	ldr	r3, [pc, #348]	; (800f734 <HAL_PCD_DataInStageCallback+0x16c>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	69db      	ldr	r3, [r3, #28]
 800f5de:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 800f5e0:	78fb      	ldrb	r3, [r7, #3]
 800f5e2:	f003 030f 	and.w	r3, r3, #15
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00c      	beq.n	800f604 <HAL_PCD_DataInStageCallback+0x3c>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800f5ea:	78fb      	ldrb	r3, [r7, #3]
 800f5ec:	f003 020f 	and.w	r2, r3, #15
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	005b      	lsls	r3, r3, #1
 800f5f4:	4413      	add	r3, r2
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	3348      	adds	r3, #72	; 0x48
 800f5fa:	693a      	ldr	r2, [r7, #16]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	3304      	adds	r3, #4
 800f600:	61fb      	str	r3, [r7, #28]
 800f602:	e00a      	b.n	800f61a <HAL_PCD_DataInStageCallback+0x52>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800f604:	78fb      	ldrb	r3, [r7, #3]
 800f606:	f003 020f 	and.w	r2, r3, #15
 800f60a:	4613      	mov	r3, r2
 800f60c:	005b      	lsls	r3, r3, #1
 800f60e:	4413      	add	r3, r2
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	4413      	add	r3, r2
 800f616:	3304      	adds	r3, #4
 800f618:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	3330      	adds	r3, #48	; 0x30
 800f620:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800f622:	78fb      	ldrb	r3, [r7, #3]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d15d      	bne.n	800f6e4 <HAL_PCD_DataInStageCallback+0x11c>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 800f62e:	69fb      	ldr	r3, [r7, #28]
 800f630:	7a1b      	ldrb	r3, [r3, #8]
 800f632:	2b01      	cmp	r3, #1
 800f634:	d17a      	bne.n	800f72c <HAL_PCD_DataInStageCallback+0x164>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 800f636:	2300      	movs	r3, #0
 800f638:	2200      	movs	r2, #0
 800f63a:	2100      	movs	r1, #0
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7f4 f81c 	bl	800367a <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d825      	bhi.n	800f69a <HAL_PCD_DataInStageCallback+0xd2>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f652:	2b01      	cmp	r3, #1
 800f654:	d10b      	bne.n	800f66e <HAL_PCD_DataInStageCallback+0xa6>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 800f65a:	b2d9      	uxtb	r1, r3
 800f65c:	2300      	movs	r3, #0
 800f65e:	2200      	movs	r2, #0
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7f4 f854 	bl	800370e <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2200      	movs	r2, #0
 800f66a:	651a      	str	r2, [r3, #80]	; 0x50
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 800f66c:	e05e      	b.n	800f72c <HAL_PCD_DataInStageCallback+0x164>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2200      	movs	r2, #0
 800f672:	625a      	str	r2, [r3, #36]	; 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2202      	movs	r2, #2
 800f678:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f686:	2b00      	cmp	r3, #0
 800f688:	d003      	beq.n	800f692 <HAL_PCD_DataInStageCallback+0xca>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	2204      	movs	r2, #4
 800f696:	721a      	strb	r2, [r3, #8]
}
 800f698:	e048      	b.n	800f72c <HAL_PCD_DataInStageCallback+0x164>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	69da      	ldr	r2, [r3, #28]
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	69db      	ldr	r3, [r3, #28]
 800f6a2:	1ad3      	subs	r3, r2, r3
 800f6a4:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	69db      	ldr	r3, [r3, #28]
 800f6aa:	69ba      	ldr	r2, [r7, #24]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d902      	bls.n	800f6b6 <HAL_PCD_DataInStageCallback+0xee>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	69db      	ldr	r3, [r3, #28]
 800f6b4:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	691a      	ldr	r2, [r3, #16]
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	69db      	ldr	r3, [r3, #28]
 800f6be:	441a      	add	r2, r3
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	69da      	ldr	r2, [r3, #28]
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	1ad2      	subs	r2, r2, r3
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 800f6d4:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7f4 f816 	bl	800370e <HAL_PCD_EP_Transmit>
}
 800f6e2:	e023      	b.n	800f72c <HAL_PCD_DataInStageCallback+0x164>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d010      	beq.n	800f70e <HAL_PCD_DataInStageCallback+0x146>
            transfer_request -> ux_slave_transfer_request_requested_length)
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00c      	beq.n	800f70e <HAL_PCD_DataInStageCallback+0x146>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	651a      	str	r2, [r3, #80]	; 0x50
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800f700:	78f9      	ldrb	r1, [r7, #3]
 800f702:	2300      	movs	r3, #0
 800f704:	2200      	movs	r2, #0
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f7f4 f801 	bl	800370e <HAL_PCD_EP_Transmit>
}
 800f70c:	e00e      	b.n	800f72c <HAL_PCD_DataInStageCallback+0x164>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2200      	movs	r2, #0
 800f712:	625a      	str	r2, [r3, #36]	; 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2202      	movs	r2, #2
 800f718:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3330      	adds	r3, #48	; 0x30
 800f726:	4618      	mov	r0, r3
 800f728:	f7ff fa60 	bl	800ebec <_ux_utility_semaphore_put>
}
 800f72c:	bf00      	nop
 800f72e:	3720      	adds	r7, #32
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	20005cc4 	.word	0x20005cc4

0800f738 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b088      	sub	sp, #32
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	460b      	mov	r3, r1
 800f742:	70fb      	strb	r3, [r7, #3]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800f744:	4b3b      	ldr	r3, [pc, #236]	; (800f834 <HAL_PCD_DataOutStageCallback+0xfc>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	69db      	ldr	r3, [r3, #28]
 800f74e:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800f750:	78fb      	ldrb	r3, [r7, #3]
 800f752:	f003 020f 	and.w	r2, r3, #15
 800f756:	4613      	mov	r3, r2
 800f758:	005b      	lsls	r3, r3, #1
 800f75a:	4413      	add	r3, r2
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	69ba      	ldr	r2, [r7, #24]
 800f760:	4413      	add	r3, r2
 800f762:	3304      	adds	r3, #4
 800f764:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3330      	adds	r3, #48	; 0x30
 800f76c:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800f76e:	78fb      	ldrb	r3, [r7, #3]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d147      	bne.n	800f804 <HAL_PCD_DataOutStageCallback+0xcc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	7a1b      	ldrb	r3, [r3, #8]
 800f778:	2b02      	cmp	r3, #2
 800f77a:	d156      	bne.n	800f82a <HAL_PCD_DataOutStageCallback+0xf2>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800f782:	78fb      	ldrb	r3, [r7, #3]
 800f784:	4619      	mov	r1, r3
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7f3 ffa9 	bl	80036de <HAL_PCD_EP_GetRxCount>
 800f78c:	60b8      	str	r0, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	699a      	ldr	r2, [r3, #24]
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	441a      	add	r2, r3
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d822      	bhi.n	800f7ec <HAL_PCD_DataOutStageCallback+0xb4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d004      	beq.n	800f7bc <HAL_PCD_DataOutStageCallback+0x84>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800f7b6:	68ba      	ldr	r2, [r7, #8]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d005      	beq.n	800f7c8 <HAL_PCD_DataOutStageCallback+0x90>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	6939      	ldr	r1, [r7, #16]
 800f7c0:	6978      	ldr	r0, [r7, #20]
 800f7c2:	f7ff fe4b 	bl	800f45c <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 800f7c6:	e030      	b.n	800f82a <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	691a      	ldr	r2, [r3, #16]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	69db      	ldr	r3, [r3, #28]
 800f7d0:	441a      	add	r2, r3
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 800f7da:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	69db      	ldr	r3, [r3, #28]
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7f3 ff48 	bl	800367a <HAL_PCD_EP_Receive>
}
 800f7ea:	e01e      	b.n	800f82a <HAL_PCD_DataOutStageCallback+0xf2>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	2227      	movs	r2, #39	; 0x27
 800f7f0:	625a      	str	r2, [r3, #36]	; 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d017      	beq.n	800f82a <HAL_PCD_DataOutStageCallback+0xf2>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7fe:	6938      	ldr	r0, [r7, #16]
 800f800:	4798      	blx	r3
}
 800f802:	e012      	b.n	800f82a <HAL_PCD_DataOutStageCallback+0xf2>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800f804:	78fb      	ldrb	r3, [r7, #3]
 800f806:	4619      	mov	r1, r3
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7f3 ff68 	bl	80036de <HAL_PCD_EP_GetRxCount>
 800f80e:	4602      	mov	r2, r0
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	2200      	movs	r2, #0
 800f818:	625a      	str	r2, [r3, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	2202      	movs	r2, #2
 800f81e:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	3330      	adds	r3, #48	; 0x30
 800f824:	4618      	mov	r0, r3
 800f826:	f7ff f9e1 	bl	800ebec <_ux_utility_semaphore_put>
}
 800f82a:	bf00      	nop
 800f82c:	3720      	adds	r7, #32
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	20005cc4 	.word	0x20005cc4

0800f838 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800f840:	4b10      	ldr	r3, [pc, #64]	; (800f884 <HAL_PCD_ResetCallback+0x4c>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	6a1b      	ldr	r3, [r3, #32]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d001      	beq.n	800f84e <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800f84a:	f7fd ffdd 	bl	800d808 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	79db      	ldrb	r3, [r3, #7]
 800f852:	2b02      	cmp	r3, #2
 800f854:	d105      	bne.n	800f862 <HAL_PCD_ResetCallback+0x2a>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800f856:	4b0b      	ldr	r3, [pc, #44]	; (800f884 <HAL_PCD_ResetCallback+0x4c>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2201      	movs	r2, #1
 800f85c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        break;
 800f860:	e005      	b.n	800f86e <HAL_PCD_ResetCallback+0x36>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800f862:	4b08      	ldr	r3, [pc, #32]	; (800f884 <HAL_PCD_ResetCallback+0x4c>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	2201      	movs	r2, #1
 800f868:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
        break;
 800f86c:	bf00      	nop
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 800f86e:	f000 fa9f 	bl	800fdb0 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800f872:	4b04      	ldr	r3, [pc, #16]	; (800f884 <HAL_PCD_ResetCallback+0x4c>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2201      	movs	r2, #1
 800f878:	621a      	str	r2, [r3, #32]
}
 800f87a:	bf00      	nop
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	20005cc4 	.word	0x20005cc4

0800f888 <HAL_PCD_ConnectCallback>:
/*                                                                        */
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/**************************************************************************/
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f890:	4b07      	ldr	r3, [pc, #28]	; (800f8b0 <HAL_PCD_ConnectCallback+0x28>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d005      	beq.n	800f8a8 <HAL_PCD_ConnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_CONNECTED);
 800f89c:	4b04      	ldr	r3, [pc, #16]	; (800f8b0 <HAL_PCD_ConnectCallback+0x28>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f8a4:	20f1      	movs	r0, #241	; 0xf1
 800f8a6:	4798      	blx	r3
    }
}
 800f8a8:	bf00      	nop
 800f8aa:	3708      	adds	r7, #8
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	20005cc4 	.word	0x20005cc4

0800f8b4 <HAL_PCD_DisconnectCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f8bc:	4b0b      	ldr	r3, [pc, #44]	; (800f8ec <HAL_PCD_DisconnectCallback+0x38>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d005      	beq.n	800f8d4 <HAL_PCD_DisconnectCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_DISCONNECTED);
 800f8c8:	4b08      	ldr	r3, [pc, #32]	; (800f8ec <HAL_PCD_DisconnectCallback+0x38>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f8d0:	20f2      	movs	r0, #242	; 0xf2
 800f8d2:	4798      	blx	r3
    }

    /* Check if the device is attached or configured.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800f8d4:	4b05      	ldr	r3, [pc, #20]	; (800f8ec <HAL_PCD_DisconnectCallback+0x38>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <HAL_PCD_DisconnectCallback+0x2e>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 800f8de:	f7fd ff93 	bl	800d808 <_ux_device_stack_disconnect>
    }
}
 800f8e2:	bf00      	nop
 800f8e4:	3708      	adds	r7, #8
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	20005cc4 	.word	0x20005cc4

0800f8f0 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f8f8:	4b07      	ldr	r3, [pc, #28]	; (800f918 <HAL_PCD_SuspendCallback+0x28>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d005      	beq.n	800f910 <HAL_PCD_SuspendCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 800f904:	4b04      	ldr	r3, [pc, #16]	; (800f918 <HAL_PCD_SuspendCallback+0x28>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f90c:	20f4      	movs	r0, #244	; 0xf4
 800f90e:	4798      	blx	r3
    }
}
 800f910:	bf00      	nop
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	20005cc4 	.word	0x20005cc4

0800f91c <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f924:	4b07      	ldr	r3, [pc, #28]	; (800f944 <HAL_PCD_ResumeCallback+0x28>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d005      	beq.n	800f93c <HAL_PCD_ResumeCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 800f930:	4b04      	ldr	r3, [pc, #16]	; (800f944 <HAL_PCD_ResumeCallback+0x28>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f938:	20f3      	movs	r0, #243	; 0xf3
 800f93a:	4798      	blx	r3
    }
}
 800f93c:	bf00      	nop
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	20005cc4 	.word	0x20005cc4

0800f948 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800f950:	4b07      	ldr	r3, [pc, #28]	; (800f970 <HAL_PCD_SOFCallback+0x28>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d005      	beq.n	800f968 <HAL_PCD_SOFCallback+0x20>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 800f95c:	4b04      	ldr	r3, [pc, #16]	; (800f970 <HAL_PCD_SOFCallback+0x28>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f964:	20f0      	movs	r0, #240	; 0xf0
 800f966:	4798      	blx	r3
    }
}
 800f968:	bf00      	nop
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	20005cc4 	.word	0x20005cc4

0800f974 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 800f974:	b480      	push	{r7}
 800f976:	b085      	sub	sp, #20
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f984:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f98c:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	2b05      	cmp	r3, #5
 800f992:	d807      	bhi.n	800f9a4 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f99a:	791b      	ldrb	r3, [r3, #4]
 800f99c:	461a      	mov	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d301      	bcc.n	800f9a8 <_stm32_ed_get+0x34>
        return(UX_NULL);
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	e014      	b.n	800f9d2 <_stm32_ed_get+0x5e>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d009      	beq.n	800f9c2 <_stm32_ed_get+0x4e>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800f9ae:	68ba      	ldr	r2, [r7, #8]
 800f9b0:	4613      	mov	r3, r2
 800f9b2:	005b      	lsls	r3, r3, #1
 800f9b4:	4413      	add	r3, r2
 800f9b6:	009b      	lsls	r3, r3, #2
 800f9b8:	3348      	adds	r3, #72	; 0x48
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	4413      	add	r3, r2
 800f9be:	3304      	adds	r3, #4
 800f9c0:	e007      	b.n	800f9d2 <_stm32_ed_get+0x5e>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800f9c2:	68ba      	ldr	r2, [r7, #8]
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	4413      	add	r3, r2
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	687a      	ldr	r2, [r7, #4]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	3304      	adds	r3, #4
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3714      	adds	r7, #20
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr

0800f9de <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b084      	sub	sp, #16
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
 800f9e6:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	695b      	ldr	r3, [r3, #20]
 800f9ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9f0:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	695b      	ldr	r3, [r3, #20]
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7ff ffbb 	bl	800f974 <_stm32_ed_get>
 800f9fe:	60b8      	str	r0, [r7, #8]

    if (ed == UX_NULL)
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d101      	bne.n	800fa0a <_ux_dcd_stm32_endpoint_create+0x2c>
        return(UX_NO_ED_AVAILABLE);
 800fa06:	2314      	movs	r3, #20
 800fa08:	e034      	b.n	800fa74 <_ux_dcd_stm32_endpoint_create+0x96>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	f003 0301 	and.w	r3, r3, #1
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d12d      	bne.n	800fa72 <_ux_dcd_stm32_endpoint_create+0x94>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	f043 0201 	orr.w	r2, r3, #1
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	b2da      	uxtb	r2, r3
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	695b      	ldr	r3, [r3, #20]
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fa40:	b2da      	uxtb	r2, r3
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d010      	beq.n	800fa6e <_ux_dcd_stm32_endpoint_create+0x90>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	695b      	ldr	r3, [r3, #20]
 800fa56:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800fa5c:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	f003 0303 	and.w	r3, r3, #3
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	f7f3 fd52 	bl	8003512 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 800fa6e:	2300      	movs	r3, #0
 800fa70:	e000      	b.n	800fa74 <_ux_dcd_stm32_endpoint_create+0x96>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 800fa72:	2314      	movs	r3, #20
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3710      	adds	r7, #16
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b084      	sub	sp, #16
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	689b      	ldr	r3, [r3, #8]
 800fa8a:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	695b      	ldr	r3, [r3, #20]
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	4619      	mov	r1, r3
 800faa0:	4610      	mov	r0, r2
 800faa2:	f7f3 fda0 	bl	80035e6 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800faa6:	2300      	movs	r3, #0
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3710      	adds	r7, #16
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b088      	sub	sp, #32
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	689b      	ldr	r3, [r3, #8]
 800fabe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fac0:	f3ef 8310 	mrs	r3, PRIMASK
 800fac4:	617b      	str	r3, [r7, #20]
    return(posture);
 800fac6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800fac8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800faca:	b672      	cpsid	i
    return(int_posture);
 800facc:	693b      	ldr	r3, [r7, #16]

    UX_DISABLE
 800face:	61bb      	str	r3, [r7, #24]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	f423 7243 	bic.w	r2, r3, #780	; 0x30c
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	2200      	movs	r2, #0
 800fae0:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	695b      	ldr	r3, [r3, #20]
 800faec:	b2db      	uxtb	r3, r3
 800faee:	4619      	mov	r1, r3
 800faf0:	4610      	mov	r0, r2
 800faf2:	f7f3 fe9f 	bl	8003834 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	695b      	ldr	r3, [r3, #20]
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	4619      	mov	r1, r3
 800fb04:	4610      	mov	r0, r2
 800fb06:	f7f3 ff1c 	bl	8003942 <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d004      	beq.n	800fb1c <_ux_dcd_stm32_endpoint_reset+0x6c>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	3360      	adds	r3, #96	; 0x60
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7ff f868 	bl	800ebec <_ux_utility_semaphore_put>
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f383 8810 	msr	PRIMASK, r3
}
 800fb26:	bf00      	nop
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 800fb28:	2300      	movs	r3, #0
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3720      	adds	r7, #32
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	689b      	ldr	r3, [r3, #8]
 800fb40:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	f043 0204 	orr.w	r2, r3, #4
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	695b      	ldr	r3, [r3, #20]
 800fb58:	b2da      	uxtb	r2, r3
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	7a9b      	ldrb	r3, [r3, #10]
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	4619      	mov	r1, r3
 800fb64:	f7f3 fe04 	bl	8003770 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 800fb68:	2300      	movs	r3, #0
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <_stm32_ed_get>:
{
 800fb72:	b480      	push	{r7}
 800fb74:	b085      	sub	sp, #20
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb82:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb8a:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	2b05      	cmp	r3, #5
 800fb90:	d807      	bhi.n	800fba2 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb98:	791b      	ldrb	r3, [r3, #4]
 800fb9a:	461a      	mov	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d301      	bcc.n	800fba6 <_stm32_ed_get+0x34>
        return(UX_NULL);
 800fba2:	2300      	movs	r3, #0
 800fba4:	e014      	b.n	800fbd0 <_stm32_ed_get+0x5e>
    if (ep_dir)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d009      	beq.n	800fbc0 <_stm32_ed_get+0x4e>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800fbac:	68ba      	ldr	r2, [r7, #8]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	005b      	lsls	r3, r3, #1
 800fbb2:	4413      	add	r3, r2
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	3348      	adds	r3, #72	; 0x48
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	4413      	add	r3, r2
 800fbbc:	3304      	adds	r3, #4
 800fbbe:	e007      	b.n	800fbd0 <_stm32_ed_get+0x5e>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	4613      	mov	r3, r2
 800fbc4:	005b      	lsls	r3, r3, #1
 800fbc6:	4413      	add	r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	4413      	add	r3, r2
 800fbce:	3304      	adds	r3, #4
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3714      	adds	r7, #20
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 800fbe6:	6839      	ldr	r1, [r7, #0]
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f7ff ffc2 	bl	800fb72 <_stm32_ed_get>
 800fbee:	60f8      	str	r0, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	f003 0301 	and.w	r3, r3, #1
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d101      	bne.n	800fc00 <_ux_dcd_stm32_endpoint_status+0x24>
        return(UX_ERROR);
 800fbfc:	23ff      	movs	r3, #255	; 0xff
 800fbfe:	e008      	b.n	800fc12 <_ux_dcd_stm32_endpoint_status+0x36>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	f003 0304 	and.w	r3, r3, #4
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d101      	bne.n	800fc10 <_ux_dcd_stm32_endpoint_status+0x34>
        return(UX_FALSE);
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	e000      	b.n	800fc12 <_ux_dcd_stm32_endpoint_status+0x36>
    else
        return(UX_TRUE);
 800fc10:	2301      	movs	r3, #1
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 800fc1a:	b480      	push	{r7}
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	370c      	adds	r7, #12
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
	...

0800fc34 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b086      	sub	sp, #24
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d106      	bne.n	800fc56 <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 800fc48:	2255      	movs	r2, #85	; 0x55
 800fc4a:	2102      	movs	r1, #2
 800fc4c:	2002      	movs	r0, #2
 800fc4e:	f7fe fb75 	bl	800e33c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 800fc52:	2355      	movs	r3, #85	; 0x55
 800fc54:	e077      	b.n	800fd46 <_ux_dcd_stm32_function+0x112>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	69db      	ldr	r3, [r3, #28]
 800fc5a:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	3b0a      	subs	r3, #10
 800fc60:	2b0b      	cmp	r3, #11
 800fc62:	d867      	bhi.n	800fd34 <_ux_dcd_stm32_function+0x100>
 800fc64:	a201      	add	r2, pc, #4	; (adr r2, 800fc6c <_ux_dcd_stm32_function+0x38>)
 800fc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6a:	bf00      	nop
 800fc6c:	0800fc9d 	.word	0x0800fc9d
 800fc70:	0800fd35 	.word	0x0800fd35
 800fc74:	0800fca9 	.word	0x0800fca9
 800fc78:	0800fcb5 	.word	0x0800fcb5
 800fc7c:	0800fcc1 	.word	0x0800fcc1
 800fc80:	0800fccd 	.word	0x0800fccd
 800fc84:	0800fcd9 	.word	0x0800fcd9
 800fc88:	0800fcf1 	.word	0x0800fcf1
 800fc8c:	0800fd35 	.word	0x0800fd35
 800fc90:	0800fd09 	.word	0x0800fd09
 800fc94:	0800fce5 	.word	0x0800fce5
 800fc98:	0800fd27 	.word	0x0800fd27
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 800fc9c:	6879      	ldr	r1, [r7, #4]
 800fc9e:	6938      	ldr	r0, [r7, #16]
 800fca0:	f7ff ffbb 	bl	800fc1a <_ux_dcd_stm32_frame_number_get>
 800fca4:	6178      	str	r0, [r7, #20]
        break;
 800fca6:	e04d      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	6938      	ldr	r0, [r7, #16]
 800fcac:	f000 f96b 	bl	800ff86 <_ux_dcd_stm32_transfer_request>
 800fcb0:	6178      	str	r0, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 800fcb2:	e047      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 800fcb4:	6879      	ldr	r1, [r7, #4]
 800fcb6:	6938      	ldr	r0, [r7, #16]
 800fcb8:	f000 f944 	bl	800ff44 <_ux_dcd_stm32_transfer_abort>
 800fcbc:	6178      	str	r0, [r7, #20]
        break;
 800fcbe:	e041      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 800fcc0:	6879      	ldr	r1, [r7, #4]
 800fcc2:	6938      	ldr	r0, [r7, #16]
 800fcc4:	f7ff fe8b 	bl	800f9de <_ux_dcd_stm32_endpoint_create>
 800fcc8:	6178      	str	r0, [r7, #20]
        break;
 800fcca:	e03b      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 800fccc:	6879      	ldr	r1, [r7, #4]
 800fcce:	6938      	ldr	r0, [r7, #16]
 800fcd0:	f7ff fed4 	bl	800fa7c <_ux_dcd_stm32_endpoint_destroy>
 800fcd4:	6178      	str	r0, [r7, #20]
        break;
 800fcd6:	e035      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	6938      	ldr	r0, [r7, #16]
 800fcdc:	f7ff fee8 	bl	800fab0 <_ux_dcd_stm32_endpoint_reset>
 800fce0:	6178      	str	r0, [r7, #20]
        break;
 800fce2:	e02f      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 800fce4:	6879      	ldr	r1, [r7, #4]
 800fce6:	6938      	ldr	r0, [r7, #16]
 800fce8:	f7ff ff23 	bl	800fb32 <_ux_dcd_stm32_endpoint_stall>
 800fcec:	6178      	str	r0, [r7, #20]
        break;
 800fcee:	e029      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	b2d2      	uxtb	r2, r2
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7f3 fbe4 	bl	80034ca <HAL_PCD_SetAddress>
 800fd02:	4603      	mov	r3, r0
 800fd04:	617b      	str	r3, [r7, #20]
        break;
 800fd06:	e01d      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2b0b      	cmp	r3, #11
 800fd0c:	d108      	bne.n	800fd20 <_ux_dcd_stm32_function+0xec>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7f2 fef5 	bl	8002b04 <HAL_PCD_Stop>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 800fd1e:	e011      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>
          status = UX_SUCCESS;
 800fd20:	2300      	movs	r3, #0
 800fd22:	617b      	str	r3, [r7, #20]
        break;
 800fd24:	e00e      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4619      	mov	r1, r3
 800fd2a:	6938      	ldr	r0, [r7, #16]
 800fd2c:	f7ff ff56 	bl	800fbdc <_ux_dcd_stm32_endpoint_status>
 800fd30:	6178      	str	r0, [r7, #20]
        break;
 800fd32:	e007      	b.n	800fd44 <_ux_dcd_stm32_function+0x110>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 800fd34:	2254      	movs	r2, #84	; 0x54
 800fd36:	2102      	movs	r1, #2
 800fd38:	2002      	movs	r0, #2
 800fd3a:	f7fe faff 	bl	800e33c <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 800fd3e:	2354      	movs	r3, #84	; 0x54
 800fd40:	617b      	str	r3, [r7, #20]
        break;
 800fd42:	bf00      	nop
    }

    /* Return completion status.  */
    return(status);
 800fd44:	697b      	ldr	r3, [r7, #20]
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3718      	adds	r7, #24
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop

0800fd50 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fd5a:	4b13      	ldr	r3, [pc, #76]	; (800fda8 <_ux_dcd_stm32_initialize+0x58>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2280      	movs	r2, #128	; 0x80
 800fd64:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 800fd66:	2298      	movs	r2, #152	; 0x98
 800fd68:	2100      	movs	r1, #0
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	f7fe fc56 	bl	800e61c <_ux_utility_memory_allocate>
 800fd70:	60b8      	str	r0, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d101      	bne.n	800fd7c <_ux_dcd_stm32_initialize+0x2c>
        return(UX_MEMORY_INSUFFICIENT);
 800fd78:	2312      	movs	r3, #18
 800fd7a:	e010      	b.n	800fd9e <_ux_dcd_stm32_initialize+0x4e>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	68ba      	ldr	r2, [r7, #8]
 800fd80:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	68fa      	ldr	r2, [r7, #12]
 800fd86:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	4a08      	ldr	r2, [pc, #32]	; (800fdac <_ux_dcd_stm32_initialize+0x5c>)
 800fd8c:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 800fd8e:	683a      	ldr	r2, [r7, #0]
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2201      	movs	r2, #1
 800fd9a:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800fd9c:	2300      	movs	r3, #0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	20005cc4 	.word	0x20005cc4
 800fdac:	0800fc35 	.word	0x0800fc35

0800fdb0 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fdb6:	4b61      	ldr	r3, [pc, #388]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	69db      	ldr	r3, [r3, #28]
 800fdc0:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800fdc2:	4b5e      	ldr	r3, [pc, #376]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	3320      	adds	r3, #32
 800fdc8:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800fdca:	4b5c      	ldr	r3, [pc, #368]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d110      	bne.n	800fdf8 <_ux_dcd_stm32_initialize_complete+0x48>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 800fdd6:	4b59      	ldr	r3, [pc, #356]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	4b58      	ldr	r3, [pc, #352]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
 800fde2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 800fde6:	4b55      	ldr	r3, [pc, #340]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	4b54      	ldr	r3, [pc, #336]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
 800fdf2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800fdf6:	e02b      	b.n	800fe50 <_ux_dcd_stm32_initialize_complete+0xa0>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800fdf8:	4b50      	ldr	r3, [pc, #320]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800fe02:	4b4e      	ldr	r3, [pc, #312]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d110      	bne.n	800fe30 <_ux_dcd_stm32_initialize_complete+0x80>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800fe0e:	4b4b      	ldr	r3, [pc, #300]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	4b4a      	ldr	r3, [pc, #296]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 800fe1a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800fe1e:	4b47      	ldr	r3, [pc, #284]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	4b46      	ldr	r3, [pc, #280]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f8d2 2134 	ldr.w	r2, [r2, #308]	; 0x134
 800fe2a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 800fe2e:	e00f      	b.n	800fe50 <_ux_dcd_stm32_initialize_complete+0xa0>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 800fe30:	4b42      	ldr	r3, [pc, #264]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	4b41      	ldr	r3, [pc, #260]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 800fe3c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800fe40:	4b3e      	ldr	r3, [pc, #248]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	4b3d      	ldr	r3, [pc, #244]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f8d2 213c 	ldr.w	r2, [r2, #316]	; 0x13c
 800fe4c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800fe50:	4b3a      	ldr	r3, [pc, #232]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800fe58:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 800fe5e:	220e      	movs	r2, #14
 800fe60:	4937      	ldr	r1, [pc, #220]	; (800ff40 <_ux_dcd_stm32_initialize_complete+0x190>)
 800fe62:	68b8      	ldr	r0, [r7, #8]
 800fe64:	f7fe fb58 	bl	800e518 <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	336c      	adds	r3, #108	; 0x6c
 800fe6c:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fe74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800fe90:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	323c      	adds	r2, #60	; 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800feac:	210e      	movs	r1, #14
 800feae:	6978      	ldr	r0, [r7, #20]
 800feb0:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800feb8:	2100      	movs	r1, #0
 800feba:	4618      	mov	r0, r3
 800febc:	f7f3 fd41 	bl	8003942 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	69db      	ldr	r3, [r3, #28]
 800feca:	b29a      	uxth	r2, r3
 800fecc:	2300      	movs	r3, #0
 800fece:	2100      	movs	r1, #0
 800fed0:	f7f3 fb1f 	bl	8003512 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800feda:	2180      	movs	r1, #128	; 0x80
 800fedc:	4618      	mov	r0, r3
 800fede:	f7f3 fd30 	bl	8003942 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	69db      	ldr	r3, [r3, #28]
 800feec:	b29a      	uxth	r2, r3
 800feee:	2300      	movs	r3, #0
 800fef0:	2180      	movs	r1, #128	; 0x80
 800fef2:	f7f3 fb0e 	bl	8003512 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2200      	movs	r2, #0
 800fefa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2201      	movs	r2, #1
 800ff00:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2201      	movs	r2, #1
 800ff06:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2208      	movs	r2, #8
 800ff0c:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2208      	movs	r2, #8
 800ff12:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800ff1a:	4b08      	ldr	r3, [pc, #32]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d005      	beq.n	800ff32 <_ux_dcd_stm32_initialize_complete+0x182>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800ff26:	4b05      	ldr	r3, [pc, #20]	; (800ff3c <_ux_dcd_stm32_initialize_complete+0x18c>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800ff2e:	2001      	movs	r0, #1
 800ff30:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 800ff32:	2300      	movs	r3, #0
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3718      	adds	r7, #24
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	20005cc4 	.word	0x20005cc4
 800ff40:	20000030 	.word	0x20000030

0800ff44 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]

   UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	695b      	ldr	r3, [r3, #20]
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	4619      	mov	r1, r3
 800ff62:	4610      	mov	r0, r2
 800ff64:	f7f3 fcbc 	bl	80038e0 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	695b      	ldr	r3, [r3, #20]
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	4619      	mov	r1, r3
 800ff76:	4610      	mov	r0, r2
 800ff78:	f7f3 fce3 	bl	8003942 <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 800ff7c:	2300      	movs	r3, #0
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b084      	sub	sp, #16
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
 800ff8e:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	689b      	ldr	r3, [r3, #8]
 800ff94:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff9a:	2b03      	cmp	r3, #3
 800ff9c:	d12d      	bne.n	800fffa <_ux_dcd_stm32_transfer_request+0x74>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800ffa8:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	695b      	ldr	r3, [r3, #20]
 800ffb2:	f7f3 fbac 	bl	800370e <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	695b      	ldr	r3, [r3, #20]
 800ffba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d045      	beq.n	801004e <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 800ffcc:	4619      	mov	r1, r3
 800ffce:	4610      	mov	r0, r2
 800ffd0:	f7fe fdd4 	bl	800eb7c <_ux_utility_semaphore_get>
 800ffd4:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d001      	beq.n	800ffe0 <_ux_dcd_stm32_transfer_request+0x5a>
                return(status);
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	e037      	b.n	8010050 <_ux_dcd_stm32_transfer_request+0xca>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	695a      	ldr	r2, [r3, #20]
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d002      	beq.n	800fff6 <_ux_dcd_stm32_transfer_request+0x70>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff4:	e02c      	b.n	8010050 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 800fff6:	2300      	movs	r3, #0
 800fff8:	e02a      	b.n	8010050 <_ux_dcd_stm32_transfer_request+0xca>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 8010004:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	695b      	ldr	r3, [r3, #20]
 801000e:	f7f3 fb34 	bl	800367a <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	695b      	ldr	r3, [r3, #20]
 8010016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801001a:	2b00      	cmp	r3, #0
 801001c:	d017      	beq.n	801004e <_ux_dcd_stm32_transfer_request+0xc8>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 8010028:	4619      	mov	r1, r3
 801002a:	4610      	mov	r0, r2
 801002c:	f7fe fda6 	bl	800eb7c <_ux_utility_semaphore_get>
 8010030:	60b8      	str	r0, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d001      	beq.n	801003c <_ux_dcd_stm32_transfer_request+0xb6>
                return(status);
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	e009      	b.n	8010050 <_ux_dcd_stm32_transfer_request+0xca>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010040:	2b00      	cmp	r3, #0
 8010042:	d002      	beq.n	801004a <_ux_dcd_stm32_transfer_request+0xc4>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010048:	e002      	b.n	8010050 <_ux_dcd_stm32_transfer_request+0xca>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 801004a:	2300      	movs	r3, #0
 801004c:	e000      	b.n	8010050 <_ux_dcd_stm32_transfer_request+0xca>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 801004e:	2300      	movs	r3, #0
}
 8010050:	4618      	mov	r0, r3
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <Init_UART_DMA>:
*
* STEP 1: Allocate memory for the device handler
* STEP 2: Make ready the handler for use
********************************************************************************************************/
void Init_UART_DMA(UART * Bus, UART_HandleTypeDef *UART_Handle)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
	Bus->Handle = UART_Handle;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	683a      	ldr	r2, [r7, #0]
 8010066:	601a      	str	r2, [r3, #0]
	Bus->Enable = true;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2201      	movs	r2, #1
 801006c:	711a      	strb	r2, [r3, #4]
	Bus->Rx_BufferTailPointer = 0;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	Bus->Is_Transmitting = false;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

	if(Number_of_UARTs < MAX_UARTS)
 801007e:	4b0d      	ldr	r3, [pc, #52]	; (80100b4 <Init_UART_DMA+0x5c>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b09      	cmp	r3, #9
 8010084:	dc08      	bgt.n	8010098 <Init_UART_DMA+0x40>
		Registerd_UARTs[Number_of_UARTs++] = Bus;
 8010086:	4b0b      	ldr	r3, [pc, #44]	; (80100b4 <Init_UART_DMA+0x5c>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	1c5a      	adds	r2, r3, #1
 801008c:	4909      	ldr	r1, [pc, #36]	; (80100b4 <Init_UART_DMA+0x5c>)
 801008e:	600a      	str	r2, [r1, #0]
 8010090:	4909      	ldr	r1, [pc, #36]	; (80100b8 <Init_UART_DMA+0x60>)
 8010092:	687a      	ldr	r2, [r7, #4]
 8010094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Ready DMA to receive
	HAL_UART_Receive_DMA(Bus->Handle, Bus->Rx_Buffer, UART_RX_BUFFER_SIZE);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6818      	ldr	r0, [r3, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	3305      	adds	r3, #5
 80100a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100a4:	4619      	mov	r1, r3
 80100a6:	f7f5 fe97 	bl	8005dd8 <HAL_UART_Receive_DMA>
} // END OF Init_UART_DMA
 80100aa:	bf00      	nop
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	20005cf4 	.word	0x20005cf4
 80100b8:	20005ccc 	.word	0x20005ccc

080100bc <UART_DMA_Receive>:
* @return The number of bytes received
*
* STEP 1: See work done by Devin K. in handling Rx DMA circular buffer
********************************************************************************************************/
uint32_t UART_DMA_Receive(UART *Bus, uint8_t *DataBuffer, uint32_t *DataBufferLength)
{
 80100bc:	b480      	push	{r7}
 80100be:	b085      	sub	sp, #20
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
    // STEP 1: See work done by Devin K. in handling Rx DMA circular buffer
    *DataBufferLength = 0;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2200      	movs	r2, #0
 80100cc:	601a      	str	r2, [r3, #0]
    if(Bus->Handle->RxState == HAL_UART_STATE_BUSY_RX)
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100d6:	2b22      	cmp	r3, #34	; 0x22
 80100d8:	d12b      	bne.n	8010132 <UART_DMA_Receive+0x76>
    {
        while(Bus->Rx_BufferTailPointer != (UART_RX_BUFFER_SIZE - Bus->Handle->hdmarx->Instance->CNDTR))
 80100da:	e01a      	b.n	8010112 <UART_DMA_Receive+0x56>
        {
            DataBuffer[(*DataBufferLength)++] = Bus->Rx_Buffer[Bus->Rx_BufferTailPointer++];
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80100e2:	1c59      	adds	r1, r3, #1
 80100e4:	68fa      	ldr	r2, [r7, #12]
 80100e6:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	6812      	ldr	r2, [r2, #0]
 80100ee:	1c50      	adds	r0, r2, #1
 80100f0:	6879      	ldr	r1, [r7, #4]
 80100f2:	6008      	str	r0, [r1, #0]
 80100f4:	68b9      	ldr	r1, [r7, #8]
 80100f6:	440a      	add	r2, r1
 80100f8:	68f9      	ldr	r1, [r7, #12]
 80100fa:	440b      	add	r3, r1
 80100fc:	795b      	ldrb	r3, [r3, #5]
 80100fe:	7013      	strb	r3, [r2, #0]

            if(Bus->Rx_BufferTailPointer >= UART_RX_BUFFER_SIZE)
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8010106:	2bff      	cmp	r3, #255	; 0xff
 8010108:	d903      	bls.n	8010112 <UART_DMA_Receive+0x56>
                Bus->Rx_BufferTailPointer = 0;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2200      	movs	r2, #0
 801010e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        while(Bus->Rx_BufferTailPointer != (UART_RX_BUFFER_SIZE - Bus->Handle->hdmarx->Instance->CNDTR))
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8010128:	429a      	cmp	r2, r3
 801012a:	d1d7      	bne.n	80100dc <UART_DMA_Receive+0x20>
        }
        return (int32_t)*DataBufferLength;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	e001      	b.n	8010136 <UART_DMA_Receive+0x7a>
    }

    return(*DataBufferLength);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]

} // END OF UART_DMA_Receive
 8010136:	4618      	mov	r0, r3
 8010138:	3714      	adds	r7, #20
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr

08010142 <UART_DMA_Transmit>:


uint16_t UART_DMA_Transmit(UART *Bus, uint8_t *DataBuffer, uint16_t DataLength)
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b086      	sub	sp, #24
 8010146:	af00      	add	r7, sp, #0
 8010148:	60f8      	str	r0, [r7, #12]
 801014a:	60b9      	str	r1, [r7, #8]
 801014c:	4613      	mov	r3, r2
 801014e:	80fb      	strh	r3, [r7, #6]
	if (Bus->Is_Transmitting)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010156:	b2db      	uxtb	r3, r3
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <UART_DMA_Transmit+0x1e>
	{
	    return(0);
 801015c:	2300      	movs	r3, #0
 801015e:	e014      	b.n	801018a <UART_DMA_Transmit+0x48>
	}

	uint16_t ReturnValueDataLength = 0;
 8010160:	2300      	movs	r3, #0
 8010162:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef Status = HAL_UART_Transmit_DMA(Bus->Handle, DataBuffer, DataLength);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	88fa      	ldrh	r2, [r7, #6]
 801016a:	68b9      	ldr	r1, [r7, #8]
 801016c:	4618      	mov	r0, r3
 801016e:	f7f5 fdb3 	bl	8005cd8 <HAL_UART_Transmit_DMA>
 8010172:	4603      	mov	r3, r0
 8010174:	757b      	strb	r3, [r7, #21]
	if (Status == HAL_OK)
 8010176:	7d7b      	ldrb	r3, [r7, #21]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d105      	bne.n	8010188 <UART_DMA_Transmit+0x46>
	{
		Bus->Is_Transmitting = true;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2201      	movs	r2, #1
 8010180:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		ReturnValueDataLength = DataLength;
 8010184:	88fb      	ldrh	r3, [r7, #6]
 8010186:	82fb      	strh	r3, [r7, #22]
	}

	return(ReturnValueDataLength);
 8010188:	8afb      	ldrh	r3, [r7, #22]
}
 801018a:	4618      	mov	r0, r3
 801018c:	3718      	adds	r7, #24
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
	...

08010194 <HAL_UART_TxCpltCallback>:
{
    return(Bus->Enable);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010194:	b480      	push	{r7}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
	// Find the UART structure based on the handle
	for(int i = 0; i < Number_of_UARTs; i++)
 801019c:	2300      	movs	r3, #0
 801019e:	60fb      	str	r3, [r7, #12]
 80101a0:	e011      	b.n	80101c6 <HAL_UART_TxCpltCallback+0x32>
	{
		if(Registerd_UARTs[i]->Handle == huart)
 80101a2:	4a0f      	ldr	r2, [pc, #60]	; (80101e0 <HAL_UART_TxCpltCallback+0x4c>)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d106      	bne.n	80101c0 <HAL_UART_TxCpltCallback+0x2c>
		{
			Registerd_UARTs[i]->Is_Transmitting = false;
 80101b2:	4a0b      	ldr	r2, [pc, #44]	; (80101e0 <HAL_UART_TxCpltCallback+0x4c>)
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101ba:	2200      	movs	r2, #0
 80101bc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	for(int i = 0; i < Number_of_UARTs; i++)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	3301      	adds	r3, #1
 80101c4:	60fb      	str	r3, [r7, #12]
 80101c6:	4b07      	ldr	r3, [pc, #28]	; (80101e4 <HAL_UART_TxCpltCallback+0x50>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	68fa      	ldr	r2, [r7, #12]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	dbe8      	blt.n	80101a2 <HAL_UART_TxCpltCallback+0xe>
		}
	}
}
 80101d0:	bf00      	nop
 80101d2:	bf00      	nop
 80101d4:	3714      	adds	r7, #20
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr
 80101de:	bf00      	nop
 80101e0:	20005ccc 	.word	0x20005ccc
 80101e4:	20005cf4 	.word	0x20005cf4

080101e8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
	// Find the UART structure based on the handle
	for(int i = 0; i < Number_of_UARTs; i++)
 80101f0:	2300      	movs	r3, #0
 80101f2:	60fb      	str	r3, [r7, #12]
 80101f4:	e02c      	b.n	8010250 <HAL_UART_ErrorCallback+0x68>
	{
		if(Registerd_UARTs[i]->Handle == huart)
 80101f6:	4a1b      	ldr	r2, [pc, #108]	; (8010264 <HAL_UART_ErrorCallback+0x7c>)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	429a      	cmp	r2, r3
 8010204:	d121      	bne.n	801024a <HAL_UART_ErrorCallback+0x62>
		{
			// We have found the correct UART, reset the bus
			Registerd_UARTs[i]->Rx_BufferTailPointer = 0;
 8010206:	4a17      	ldr	r2, [pc, #92]	; (8010264 <HAL_UART_ErrorCallback+0x7c>)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801020e:	2200      	movs	r2, #0
 8010210:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			Registerd_UARTs[i]->Is_Transmitting = false;
 8010214:	4a13      	ldr	r2, [pc, #76]	; (8010264 <HAL_UART_ErrorCallback+0x7c>)
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801021c:	2200      	movs	r2, #0
 801021e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			HAL_DMA_Abort_IT(huart->hdmarx);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010228:	4618      	mov	r0, r3
 801022a:	f7f1 ff96 	bl	800215a <HAL_DMA_Abort_IT>
			HAL_UART_DMAStop(huart);
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f7f5 fe1e 	bl	8005e70 <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(huart, Registerd_UARTs[i]->Rx_Buffer, UART_RX_BUFFER_SIZE);
 8010234:	4a0b      	ldr	r2, [pc, #44]	; (8010264 <HAL_UART_ErrorCallback+0x7c>)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801023c:	3305      	adds	r3, #5
 801023e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010242:	4619      	mov	r1, r3
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f7f5 fdc7 	bl	8005dd8 <HAL_UART_Receive_DMA>
	for(int i = 0; i < Number_of_UARTs; i++)
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	3301      	adds	r3, #1
 801024e:	60fb      	str	r3, [r7, #12]
 8010250:	4b05      	ldr	r3, [pc, #20]	; (8010268 <HAL_UART_ErrorCallback+0x80>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	68fa      	ldr	r2, [r7, #12]
 8010256:	429a      	cmp	r2, r3
 8010258:	dbcd      	blt.n	80101f6 <HAL_UART_ErrorCallback+0xe>
		}
	}
}
 801025a:	bf00      	nop
 801025c:	bf00      	nop
 801025e:	3710      	adds	r7, #16
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	20005ccc 	.word	0x20005ccc
 8010268:	20005cf4 	.word	0x20005cf4

0801026c <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param  memory_ptr: memory pointer
  * @retval status
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 801026c:	b590      	push	{r4, r7, lr}
 801026e:	b097      	sub	sp, #92	; 0x5c
 8010270:	af08      	add	r7, sp, #32
 8010272:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 8010274:	2300      	movs	r3, #0
 8010276:	637b      	str	r3, [r7, #52]	; 0x34
  ULONG string_framework_length;
  ULONG language_id_framework_length;
  UCHAR *string_framework;
  UCHAR *language_id_framework;
  UCHAR *pointer;
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	633b      	str	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */

  /* Allocate the stack for USBX Memory */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,
 801027c:	f107 010c 	add.w	r1, r7, #12
 8010280:	2300      	movs	r3, #0
 8010282:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8010286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010288:	f7fb fc6a 	bl	800bb60 <_txe_byte_allocate>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d001      	beq.n	8010296 <MX_USBX_Device_Init+0x2a>
                       USBX_DEVICE_MEMORY_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_ALLOCATE_STACK_ERORR */
    return TX_POOL_ERROR;
 8010292:	2302      	movs	r3, #2
 8010294:	e0cf      	b.n	8010436 <MX_USBX_Device_Init+0x1ca>
    /* USER CODE END USBX_ALLOCATE_STACK_ERORR */
  }

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	2300      	movs	r3, #0
 801029a:	2200      	movs	r2, #0
 801029c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80102a0:	f7fe f86e 	bl	800e380 <_ux_system_initialize>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <MX_USBX_Device_Init+0x42>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERORR */
    return UX_ERROR;
 80102aa:	23ff      	movs	r3, #255	; 0xff
 80102ac:	e0c3      	b.n	8010436 <MX_USBX_Device_Init+0x1ca>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERORR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 80102ae:	f107 031c 	add.w	r3, r7, #28
 80102b2:	4619      	mov	r1, r3
 80102b4:	2001      	movs	r0, #1
 80102b6:	f000 f9ab 	bl	8010610 <USBD_Get_Device_Framework_Speed>
 80102ba:	62f8      	str	r0, [r7, #44]	; 0x2c
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80102bc:	f107 0318 	add.w	r3, r7, #24
 80102c0:	4619      	mov	r1, r3
 80102c2:	2000      	movs	r0, #0
 80102c4:	f000 f9a4 	bl	8010610 <USBD_Get_Device_Framework_Speed>
 80102c8:	62b8      	str	r0, [r7, #40]	; 0x28
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 80102ca:	f107 0314 	add.w	r3, r7, #20
 80102ce:	4618      	mov	r0, r3
 80102d0:	f000 f9e0 	bl	8010694 <USBD_Get_String_Framework>
 80102d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 80102d6:	f107 0310 	add.w	r3, r7, #16
 80102da:	4618      	mov	r0, r3
 80102dc:	f000 fa5e 	bl	801079c <USBD_Get_Language_Id_Framework>
 80102e0:	6238      	str	r0, [r7, #32]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 80102e2:	69f9      	ldr	r1, [r7, #28]
 80102e4:	69b8      	ldr	r0, [r7, #24]
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	693a      	ldr	r2, [r7, #16]
 80102ea:	2400      	movs	r4, #0
 80102ec:	9404      	str	r4, [sp, #16]
 80102ee:	9203      	str	r2, [sp, #12]
 80102f0:	6a3a      	ldr	r2, [r7, #32]
 80102f2:	9202      	str	r2, [sp, #8]
 80102f4:	9301      	str	r3, [sp, #4]
 80102f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	4603      	mov	r3, r0
 80102fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010300:	f7fd fb90 	bl	800da24 <_ux_device_stack_initialize>
 8010304:	4603      	mov	r3, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	d001      	beq.n	801030e <MX_USBX_Device_Init+0xa2>
                                 language_id_framework,
                                 language_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERORR */
    return UX_ERROR;
 801030a:	23ff      	movs	r3, #255	; 0xff
 801030c:	e093      	b.n	8010436 <MX_USBX_Device_Init+0x1ca>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERORR */
  }

  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 801030e:	4b4c      	ldr	r3, [pc, #304]	; (8010440 <MX_USBX_Device_Init+0x1d4>)
 8010310:	4a4c      	ldr	r2, [pc, #304]	; (8010444 <MX_USBX_Device_Init+0x1d8>)
 8010312:	601a      	str	r2, [r3, #0]
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 8010314:	4b4a      	ldr	r3, [pc, #296]	; (8010440 <MX_USBX_Device_Init+0x1d4>)
 8010316:	4a4c      	ldr	r2, [pc, #304]	; (8010448 <MX_USBX_Device_Init+0x1dc>)
 8010318:	605a      	str	r2, [r3, #4]
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 801031a:	4b49      	ldr	r3, [pc, #292]	; (8010440 <MX_USBX_Device_Init+0x1d4>)
 801031c:	4a4b      	ldr	r2, [pc, #300]	; (801044c <MX_USBX_Device_Init+0x1e0>)
 801031e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 8010320:	2100      	movs	r1, #0
 8010322:	2002      	movs	r0, #2
 8010324:	f000 fa9a 	bl	801085c <USBD_Get_Configuration_Number>
 8010328:	4603      	mov	r3, r0
 801032a:	461a      	mov	r2, r3
 801032c:	4b48      	ldr	r3, [pc, #288]	; (8010450 <MX_USBX_Device_Init+0x1e4>)
 801032e:	601a      	str	r2, [r3, #0]

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 8010330:	2100      	movs	r1, #0
 8010332:	2002      	movs	r0, #2
 8010334:	f000 fa54 	bl	80107e0 <USBD_Get_Interface_Number>
 8010338:	4603      	mov	r3, r0
 801033a:	461a      	mov	r2, r3
 801033c:	4b45      	ldr	r3, [pc, #276]	; (8010454 <MX_USBX_Device_Init+0x1e8>)
 801033e:	601a      	str	r2, [r3, #0]

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 8010340:	4b43      	ldr	r3, [pc, #268]	; (8010450 <MX_USBX_Device_Init+0x1e4>)
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	4b43      	ldr	r3, [pc, #268]	; (8010454 <MX_USBX_Device_Init+0x1e8>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	493d      	ldr	r1, [pc, #244]	; (8010440 <MX_USBX_Device_Init+0x1d4>)
 801034a:	9100      	str	r1, [sp, #0]
 801034c:	4942      	ldr	r1, [pc, #264]	; (8010458 <MX_USBX_Device_Init+0x1ec>)
 801034e:	4843      	ldr	r0, [pc, #268]	; (801045c <MX_USBX_Device_Init+0x1f0>)
 8010350:	f7fc fc62 	bl	800cc18 <_ux_device_stack_class_register>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d001      	beq.n	801035e <MX_USBX_Device_Init+0xf2>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
    return UX_ERROR;
 801035a:	23ff      	movs	r3, #255	; 0xff
 801035c:	e06b      	b.n	8010436 <MX_USBX_Device_Init+0x1ca>
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
  }

  /* Allocate the stack for device application main thread */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_DEVICE_APP_THREAD_STACK_SIZE,
 801035e:	f107 010c 	add.w	r1, r7, #12
 8010362:	2300      	movs	r3, #0
 8010364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801036a:	f7fb fbf9 	bl	800bb60 <_txe_byte_allocate>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <MX_USBX_Device_Init+0x10c>
                       TX_NO_WAIT) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_ALLOCATE_STACK_ERORR */
    return TX_POOL_ERROR;
 8010374:	2302      	movs	r3, #2
 8010376:	e05e      	b.n	8010436 <MX_USBX_Device_Init+0x1ca>
    /* USER CODE END MAIN_THREAD_ALLOCATE_STACK_ERORR */
  }

  /* Create the device application main thread */
  if (tx_thread_create(&ux_device_app_thread, UX_DEVICE_APP_THREAD_NAME, app_ux_device_thread_entry,
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	22b0      	movs	r2, #176	; 0xb0
 801037c:	9206      	str	r2, [sp, #24]
 801037e:	2201      	movs	r2, #1
 8010380:	9205      	str	r2, [sp, #20]
 8010382:	2200      	movs	r2, #0
 8010384:	9204      	str	r2, [sp, #16]
 8010386:	220a      	movs	r2, #10
 8010388:	9203      	str	r2, [sp, #12]
 801038a:	220a      	movs	r2, #10
 801038c:	9202      	str	r2, [sp, #8]
 801038e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010392:	9201      	str	r2, [sp, #4]
 8010394:	9300      	str	r3, [sp, #0]
 8010396:	2300      	movs	r3, #0
 8010398:	4a31      	ldr	r2, [pc, #196]	; (8010460 <MX_USBX_Device_Init+0x1f4>)
 801039a:	4932      	ldr	r1, [pc, #200]	; (8010464 <MX_USBX_Device_Init+0x1f8>)
 801039c:	4832      	ldr	r0, [pc, #200]	; (8010468 <MX_USBX_Device_Init+0x1fc>)
 801039e:	f7fc f8ad 	bl	800c4fc <_txe_thread_create>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d001      	beq.n	80103ac <MX_USBX_Device_Init+0x140>
                       0, pointer, UX_DEVICE_APP_THREAD_STACK_SIZE, UX_DEVICE_APP_THREAD_PRIO,
                       UX_DEVICE_APP_THREAD_PREEMPTION_THRESHOLD, UX_DEVICE_APP_THREAD_TIME_SLICE,
                       UX_DEVICE_APP_THREAD_START_OPTION) != TX_SUCCESS)
  {
    /* USER CODE BEGIN MAIN_THREAD_CREATE_ERORR */
    return TX_THREAD_ERROR;
 80103a8:	230e      	movs	r3, #14
 80103aa:	e044      	b.n	8010436 <MX_USBX_Device_Init+0x1ca>
    /* USER CODE END MAIN_THREAD_CREATE_ERORR */
  }

  /* USER CODE BEGIN MX_USBX_Device_Init1 */
  /* Allocate memory for the UX RX thread */
  tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT);
 80103ac:	f107 010c 	add.w	r1, r7, #12
 80103b0:	2300      	movs	r3, #0
 80103b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80103b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103b8:	f7fb fbd2 	bl	800bb60 <_txe_byte_allocate>
  /* Create the UX RX thread */
  tx_thread_create(&ux_cdc_read_thread, "cdc_acm_read_usbx_app_thread_entry", usbx_cdc_acm_read_thread_entry, 1, pointer, 1024, 20, 20, TX_NO_TIME_SLICE, TX_AUTO_START);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	22b0      	movs	r2, #176	; 0xb0
 80103c0:	9206      	str	r2, [sp, #24]
 80103c2:	2201      	movs	r2, #1
 80103c4:	9205      	str	r2, [sp, #20]
 80103c6:	2200      	movs	r2, #0
 80103c8:	9204      	str	r2, [sp, #16]
 80103ca:	2214      	movs	r2, #20
 80103cc:	9203      	str	r2, [sp, #12]
 80103ce:	2214      	movs	r2, #20
 80103d0:	9202      	str	r2, [sp, #8]
 80103d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80103d6:	9201      	str	r2, [sp, #4]
 80103d8:	9300      	str	r3, [sp, #0]
 80103da:	2301      	movs	r3, #1
 80103dc:	4a23      	ldr	r2, [pc, #140]	; (801046c <MX_USBX_Device_Init+0x200>)
 80103de:	4924      	ldr	r1, [pc, #144]	; (8010470 <MX_USBX_Device_Init+0x204>)
 80103e0:	4824      	ldr	r0, [pc, #144]	; (8010474 <MX_USBX_Device_Init+0x208>)
 80103e2:	f7fc f88b 	bl	800c4fc <_txe_thread_create>
  /* Allocate memory for the UX TX thread */
  tx_byte_allocate(byte_pool, (VOID **)&pointer, 1024, TX_NO_WAIT);
 80103e6:	f107 010c 	add.w	r1, r7, #12
 80103ea:	2300      	movs	r3, #0
 80103ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80103f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103f2:	f7fb fbb5 	bl	800bb60 <_txe_byte_allocate>
  /* Create the UX TX thread */
  tx_thread_create(&ux_cdc_write_thread, "cdc_acm_write_usbx_app_thread_entry", usbx_cdc_acm_write_thread_entry, 1, pointer, 1025, 20, 20, TX_NO_TIME_SLICE, TX_AUTO_START);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	22b0      	movs	r2, #176	; 0xb0
 80103fa:	9206      	str	r2, [sp, #24]
 80103fc:	2201      	movs	r2, #1
 80103fe:	9205      	str	r2, [sp, #20]
 8010400:	2200      	movs	r2, #0
 8010402:	9204      	str	r2, [sp, #16]
 8010404:	2214      	movs	r2, #20
 8010406:	9203      	str	r2, [sp, #12]
 8010408:	2214      	movs	r2, #20
 801040a:	9202      	str	r2, [sp, #8]
 801040c:	f240 4201 	movw	r2, #1025	; 0x401
 8010410:	9201      	str	r2, [sp, #4]
 8010412:	9300      	str	r3, [sp, #0]
 8010414:	2301      	movs	r3, #1
 8010416:	4a18      	ldr	r2, [pc, #96]	; (8010478 <MX_USBX_Device_Init+0x20c>)
 8010418:	4918      	ldr	r1, [pc, #96]	; (801047c <MX_USBX_Device_Init+0x210>)
 801041a:	4819      	ldr	r0, [pc, #100]	; (8010480 <MX_USBX_Device_Init+0x214>)
 801041c:	f7fc f86e 	bl	800c4fc <_txe_thread_create>
  if (tx_event_flags_create(&USB_EventFlag, "USB Event Flag") != TX_SUCCESS)
 8010420:	2224      	movs	r2, #36	; 0x24
 8010422:	4918      	ldr	r1, [pc, #96]	; (8010484 <MX_USBX_Device_Init+0x218>)
 8010424:	4818      	ldr	r0, [pc, #96]	; (8010488 <MX_USBX_Device_Init+0x21c>)
 8010426:	f7fb fcaf 	bl	800bd88 <_txe_event_flags_create>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d001      	beq.n	8010434 <MX_USBX_Device_Init+0x1c8>
  {
      return(TX_GROUP_ERROR);
 8010430:	2306      	movs	r3, #6
 8010432:	e000      	b.n	8010436 <MX_USBX_Device_Init+0x1ca>
  }
  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 8010434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010436:	4618      	mov	r0, r3
 8010438:	373c      	adds	r7, #60	; 0x3c
 801043a:	46bd      	mov	sp, r7
 801043c:	bd90      	pop	{r4, r7, pc}
 801043e:	bf00      	nop
 8010440:	20005d00 	.word	0x20005d00
 8010444:	080104ed 	.word	0x080104ed
 8010448:	08010521 	.word	0x08010521
 801044c:	0801054d 	.word	0x0801054d
 8010450:	20005cfc 	.word	0x20005cfc
 8010454:	20005cf8 	.word	0x20005cf8
 8010458:	0800eeb5 	.word	0x0800eeb5
 801045c:	20000010 	.word	0x20000010
 8010460:	0801048d 	.word	0x0801048d
 8010464:	080126a8 	.word	0x080126a8
 8010468:	20005d0c 	.word	0x20005d0c
 801046c:	080105a1 	.word	0x080105a1
 8010470:	080126c4 	.word	0x080126c4
 8010474:	20005dbc 	.word	0x20005dbc
 8010478:	08010561 	.word	0x08010561
 801047c:	080126e8 	.word	0x080126e8
 8010480:	20005e6c 	.word	0x20005e6c
 8010484:	0801270c 	.word	0x0801270c
 8010488:	20005f1c 	.word	0x20005f1c

0801048c <app_ux_device_thread_entry>:
  * @brief  Function implementing app_ux_device_thread_entry.
  * @param  thread_input: User thread input parameter.
  * @retval none
  */
static VOID app_ux_device_thread_entry(ULONG thread_input)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_ux_device_thread_entry */
  TX_PARAMETER_NOT_USED(thread_input);
    USBX_APP_Device_Init();
 8010494:	f000 f804 	bl	80104a0 <USBX_APP_Device_Init>
  /* USER CODE END app_ux_device_thread_entry */
}
 8010498:	bf00      	nop
 801049a:	3708      	adds	r7, #8
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <USBX_APP_Device_Init>:
  *         Initialization of USB device.
  * @param  none
  * @retval none
  */
VOID USBX_APP_Device_Init(VOID)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment_0 */

  /* USER CODE END USB_Device_Init_PreTreatment_0 */

  /* USB_OTG_FS init function */
  MX_USB_OTG_FS_PCD_Init();
 80104a4:	f7f1 fac2 	bl	8001a2c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE BEGIN USB_Device_Init_PreTreatment_1 */
  /* Set Rx FIFO */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x100);
 80104a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80104ac:	480e      	ldr	r0, [pc, #56]	; (80104e8 <USBX_APP_Device_Init+0x48>)
 80104ae:	f7f3 fbc6 	bl	8003c3e <HAL_PCDEx_SetRxFiFo>

  /* Set Tx FIFO 0 */
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x10);
 80104b2:	2210      	movs	r2, #16
 80104b4:	2100      	movs	r1, #0
 80104b6:	480c      	ldr	r0, [pc, #48]	; (80104e8 <USBX_APP_Device_Init+0x48>)
 80104b8:	f7f3 fb7a 	bl	8003bb0 <HAL_PCDEx_SetTxFiFo>

  /* Set Tx FIFO 2 */
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x10);
 80104bc:	2210      	movs	r2, #16
 80104be:	2101      	movs	r1, #1
 80104c0:	4809      	ldr	r0, [pc, #36]	; (80104e8 <USBX_APP_Device_Init+0x48>)
 80104c2:	f7f3 fb75 	bl	8003bb0 <HAL_PCDEx_SetTxFiFo>

  /* Set Tx FIFO 3 */
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x20);
 80104c6:	2220      	movs	r2, #32
 80104c8:	2102      	movs	r1, #2
 80104ca:	4807      	ldr	r0, [pc, #28]	; (80104e8 <USBX_APP_Device_Init+0x48>)
 80104cc:	f7f3 fb70 	bl	8003bb0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END USB_Device_Init_PreTreatment_1 */

  /* Initialize and link controller HAL driver */
  ux_dcd_stm32_initialize((ULONG)USB_OTG_FS, (ULONG)&hpcd_USB_OTG_FS);
 80104d0:	4b05      	ldr	r3, [pc, #20]	; (80104e8 <USBX_APP_Device_Init+0x48>)
 80104d2:	4619      	mov	r1, r3
 80104d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80104d8:	f7ff fc3a 	bl	800fd50 <_ux_dcd_stm32_initialize>

  /* Start the USB device */
  HAL_PCD_Start(&hpcd_USB_OTG_FS);
 80104dc:	4802      	ldr	r0, [pc, #8]	; (80104e8 <USBX_APP_Device_Init+0x48>)
 80104de:	f7f2 fae2 	bl	8002aa6 <HAL_PCD_Start>

  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80104e2:	bf00      	nop
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	2000519c 	.word	0x2000519c

080104ec <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Activate */
//  UX_PARAMETER_NOT_USED(cdc_acm_instance);
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *)cdc_acm_instance;
 80104f4:	4a08      	ldr	r2, [pc, #32]	; (8010518 <USBD_CDC_ACM_Activate+0x2c>)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6013      	str	r3, [r2, #0]
    if (tx_event_flags_set(&USB_EventFlag, USB_EVENT_CDC_INSERTED, TX_OR) != TX_SUCCESS)
 80104fa:	2200      	movs	r2, #0
 80104fc:	2101      	movs	r1, #1
 80104fe:	4807      	ldr	r0, [pc, #28]	; (801051c <USBD_CDC_ACM_Activate+0x30>)
 8010500:	f7fb fd2a 	bl	800bf58 <_txe_event_flags_set>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d002      	beq.n	8010510 <USBD_CDC_ACM_Activate+0x24>
    {
      Error_Handler();
 801050a:	f7f0 ffd9 	bl	80014c0 <Error_Handler>
    }
  /* USER CODE END USBD_CDC_ACM_Activate */

  return;
 801050e:	bf00      	nop
 8010510:	bf00      	nop
}
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	20005f40 	.word	0x20005f40
 801051c:	20005f1c 	.word	0x20005f1c

08010520 <USBD_CDC_ACM_Deactivate>:
  *         This function is called when extraction of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Deactivate(VOID *cdc_acm_instance)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b082      	sub	sp, #8
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  if (tx_event_flags_set(&USB_EventFlag, USB_EVENT_CDC_REMOVED, TX_OR) != TX_SUCCESS)
 8010528:	2200      	movs	r2, #0
 801052a:	2102      	movs	r1, #2
 801052c:	4806      	ldr	r0, [pc, #24]	; (8010548 <USBD_CDC_ACM_Deactivate+0x28>)
 801052e:	f7fb fd13 	bl	800bf58 <_txe_event_flags_set>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d002      	beq.n	801053e <USBD_CDC_ACM_Deactivate+0x1e>
    {
      Error_Handler();
 8010538:	f7f0 ffc2 	bl	80014c0 <Error_Handler>
    }
  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
 801053c:	bf00      	nop
 801053e:	bf00      	nop
}
 8010540:	3708      	adds	r7, #8
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop
 8010548:	20005f1c 	.word	0x20005f1c

0801054c <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 801054c:	b480      	push	{r7}
 801054e:	b083      	sub	sp, #12
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_CDC_ACM_ParameterChange */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);
  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
 8010554:	bf00      	nop
}
 8010556:	370c      	adds	r7, #12
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr

08010560 <usbx_cdc_acm_write_thread_entry>:

/* USER CODE BEGIN 1 */
VOID usbx_cdc_acm_write_thread_entry(ULONG thread_input)
{
 8010560:	b5b0      	push	{r4, r5, r7, lr}
 8010562:	b08a      	sub	sp, #40	; 0x28
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
      /* Private Variables */
      ULONG tx_actual_length;
      const uint8_t message[] = "USBX Application Running!\r\n";
 8010568:	4b0b      	ldr	r3, [pc, #44]	; (8010598 <usbx_cdc_acm_write_thread_entry+0x38>)
 801056a:	f107 0408 	add.w	r4, r7, #8
 801056e:	461d      	mov	r5, r3
 8010570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      while(1)
      {
             ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)(message), sizeof(message), &tx_actual_length);
 801057c:	4b07      	ldr	r3, [pc, #28]	; (801059c <usbx_cdc_acm_write_thread_entry+0x3c>)
 801057e:	6818      	ldr	r0, [r3, #0]
 8010580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010584:	f107 0108 	add.w	r1, r7, #8
 8010588:	221c      	movs	r2, #28
 801058a:	f7fe feb7 	bl	800f2fc <_ux_device_class_cdc_acm_write>
             tx_thread_sleep(100);
 801058e:	2064      	movs	r0, #100	; 0x64
 8010590:	f7fa fd50 	bl	800b034 <_tx_thread_sleep>
             ux_device_class_cdc_acm_write(cdc_acm, (UCHAR *)(message), sizeof(message), &tx_actual_length);
 8010594:	e7f2      	b.n	801057c <usbx_cdc_acm_write_thread_entry+0x1c>
 8010596:	bf00      	nop
 8010598:	0801271c 	.word	0x0801271c
 801059c:	20005f40 	.word	0x20005f40

080105a0 <usbx_cdc_acm_read_thread_entry>:
      }
}

VOID usbx_cdc_acm_read_thread_entry(ULONG thread_input)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b094      	sub	sp, #80	; 0x50
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
      ULONG rx_actual_length;
      uint8_t UserRxBuffer[64];
      /* Infinite Loop */
      while(1)
      {
             if(cdc_acm != UX_NULL)
 80105a8:	4b15      	ldr	r3, [pc, #84]	; (8010600 <usbx_cdc_acm_read_thread_entry+0x60>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d0fb      	beq.n	80105a8 <usbx_cdc_acm_read_thread_entry+0x8>
             {
                   ux_device_class_cdc_acm_read(cdc_acm, (UCHAR *)UserRxBuffer, 64, &rx_actual_length);
 80105b0:	4b13      	ldr	r3, [pc, #76]	; (8010600 <usbx_cdc_acm_read_thread_entry+0x60>)
 80105b2:	6818      	ldr	r0, [r3, #0]
 80105b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80105b8:	f107 010c 	add.w	r1, r7, #12
 80105bc:	2240      	movs	r2, #64	; 0x40
 80105be:	f7fe fdeb 	bl	800f198 <_ux_device_class_cdc_acm_read>
                   switch(UserRxBuffer[rx_actual_length-1])
 80105c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105c4:	3b01      	subs	r3, #1
 80105c6:	3350      	adds	r3, #80	; 0x50
 80105c8:	443b      	add	r3, r7
 80105ca:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80105ce:	2b30      	cmp	r3, #48	; 0x30
 80105d0:	d00b      	beq.n	80105ea <usbx_cdc_acm_read_thread_entry+0x4a>
 80105d2:	2b31      	cmp	r3, #49	; 0x31
 80105d4:	d1e8      	bne.n	80105a8 <usbx_cdc_acm_read_thread_entry+0x8>
                   {
                   case '1':
                   {
                       TP9_SET();
 80105d6:	2201      	movs	r2, #1
 80105d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80105dc:	4809      	ldr	r0, [pc, #36]	; (8010604 <usbx_cdc_acm_read_thread_entry+0x64>)
 80105de:	f7f2 f921 	bl	8002824 <HAL_GPIO_WritePin>
                       printf("TP 9 ON\r\n");
 80105e2:	4809      	ldr	r0, [pc, #36]	; (8010608 <usbx_cdc_acm_read_thread_entry+0x68>)
 80105e4:	f001 f8fe 	bl	80117e4 <puts>
                   }
                   break;
 80105e8:	e009      	b.n	80105fe <usbx_cdc_acm_read_thread_entry+0x5e>
                   case '0':
                   {
                       TP9_CLR();
 80105ea:	2200      	movs	r2, #0
 80105ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80105f0:	4804      	ldr	r0, [pc, #16]	; (8010604 <usbx_cdc_acm_read_thread_entry+0x64>)
 80105f2:	f7f2 f917 	bl	8002824 <HAL_GPIO_WritePin>
                       printf("TP 9 OFF\r\n");
 80105f6:	4805      	ldr	r0, [pc, #20]	; (801060c <usbx_cdc_acm_read_thread_entry+0x6c>)
 80105f8:	f001 f8f4 	bl	80117e4 <puts>
                   }
                   break;
 80105fc:	bf00      	nop
             if(cdc_acm != UX_NULL)
 80105fe:	e7d3      	b.n	80105a8 <usbx_cdc_acm_read_thread_entry+0x8>
 8010600:	20005f40 	.word	0x20005f40
 8010604:	48001000 	.word	0x48001000
 8010608:	08012738 	.word	0x08012738
 801060c:	08012744 	.word	0x08012744

08010610 <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af00      	add	r7, sp, #0
 8010616:	4603      	mov	r3, r0
 8010618:	6039      	str	r1, [r7, #0]
 801061a:	71fb      	strb	r3, [r7, #7]
  uint8_t *pFrameWork = NULL;
 801061c:	2300      	movs	r3, #0
 801061e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER TAG BEGIN Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 8010620:	79fb      	ldrb	r3, [r7, #7]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d113      	bne.n	801064e <USBD_Get_Device_Framework_Speed+0x3e>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 8010626:	4b16      	ldr	r3, [pc, #88]	; (8010680 <USBD_Get_Device_Framework_Speed+0x70>)
 8010628:	6819      	ldr	r1, [r3, #0]
 801062a:	79fb      	ldrb	r3, [r7, #7]
 801062c:	4a15      	ldr	r2, [pc, #84]	; (8010684 <USBD_Get_Device_Framework_Speed+0x74>)
 801062e:	4816      	ldr	r0, [pc, #88]	; (8010688 <USBD_Get_Device_Framework_Speed+0x78>)
 8010630:	f000 f974 	bl	801091c <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 8010634:	4b14      	ldr	r3, [pc, #80]	; (8010688 <USBD_Get_Device_Framework_Speed+0x78>)
 8010636:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 801063a:	4b13      	ldr	r3, [pc, #76]	; (8010688 <USBD_Get_Device_Framework_Speed+0x78>)
 801063c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010640:	441a      	add	r2, r3
 8010642:	683b      	ldr	r3, [r7, #0]
 8010644:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 8010646:	4b0e      	ldr	r3, [pc, #56]	; (8010680 <USBD_Get_Device_Framework_Speed+0x70>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	60fb      	str	r3, [r7, #12]
 801064c:	e012      	b.n	8010674 <USBD_Get_Device_Framework_Speed+0x64>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 801064e:	4b0f      	ldr	r3, [pc, #60]	; (801068c <USBD_Get_Device_Framework_Speed+0x7c>)
 8010650:	6819      	ldr	r1, [r3, #0]
 8010652:	79fb      	ldrb	r3, [r7, #7]
 8010654:	4a0b      	ldr	r2, [pc, #44]	; (8010684 <USBD_Get_Device_Framework_Speed+0x74>)
 8010656:	480e      	ldr	r0, [pc, #56]	; (8010690 <USBD_Get_Device_Framework_Speed+0x80>)
 8010658:	f000 f960 	bl	801091c <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 801065c:	4b0c      	ldr	r3, [pc, #48]	; (8010690 <USBD_Get_Device_Framework_Speed+0x80>)
 801065e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8010662:	4b0b      	ldr	r3, [pc, #44]	; (8010690 <USBD_Get_Device_Framework_Speed+0x80>)
 8010664:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010668:	441a      	add	r2, r3
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 801066e:	4b07      	ldr	r3, [pc, #28]	; (801068c <USBD_Get_Device_Framework_Speed+0x7c>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE Device_Framework1 */

  /* USER CODE Device_Framework1 */
  return pFrameWork;
 8010674:	68fb      	ldr	r3, [r7, #12]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3710      	adds	r7, #16
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	20000064 	.word	0x20000064
 8010684:	20000058 	.word	0x20000058
 8010688:	20005f44 	.word	0x20005f44
 801068c:	20000068 	.word	0x20000068
 8010690:	2000606c 	.word	0x2000606c

08010694 <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 801069c:	2300      	movs	r3, #0
 801069e:	81bb      	strh	r3, [r7, #12]
  uint8_t count = 0U;
 80106a0:	2300      	movs	r3, #0
 80106a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE String_Framework0 */

  /* USER CODE String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80106a4:	7bfb      	ldrb	r3, [r7, #15]
 80106a6:	1c5a      	adds	r2, r3, #1
 80106a8:	73fa      	strb	r2, [r7, #15]
 80106aa:	461a      	mov	r2, r3
 80106ac:	4b37      	ldr	r3, [pc, #220]	; (801078c <USBD_Get_String_Framework+0xf8>)
 80106ae:	2109      	movs	r1, #9
 80106b0:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80106b2:	7bfb      	ldrb	r3, [r7, #15]
 80106b4:	1c5a      	adds	r2, r3, #1
 80106b6:	73fa      	strb	r2, [r7, #15]
 80106b8:	461a      	mov	r2, r3
 80106ba:	4b34      	ldr	r3, [pc, #208]	; (801078c <USBD_Get_String_Framework+0xf8>)
 80106bc:	2104      	movs	r1, #4
 80106be:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 80106c0:	7bfb      	ldrb	r3, [r7, #15]
 80106c2:	1c5a      	adds	r2, r3, #1
 80106c4:	73fa      	strb	r2, [r7, #15]
 80106c6:	461a      	mov	r2, r3
 80106c8:	4b30      	ldr	r3, [pc, #192]	; (801078c <USBD_Get_String_Framework+0xf8>)
 80106ca:	2101      	movs	r1, #1
 80106cc:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 80106ce:	7bfb      	ldrb	r3, [r7, #15]
 80106d0:	4a2e      	ldr	r2, [pc, #184]	; (801078c <USBD_Get_String_Framework+0xf8>)
 80106d2:	4413      	add	r3, r2
 80106d4:	f107 020c 	add.w	r2, r7, #12
 80106d8:	4619      	mov	r1, r3
 80106da:	482d      	ldr	r0, [pc, #180]	; (8010790 <USBD_Get_String_Framework+0xfc>)
 80106dc:	f000 f8d0 	bl	8010880 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 80106e0:	89bb      	ldrh	r3, [r7, #12]
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	7bfb      	ldrb	r3, [r7, #15]
 80106e6:	4413      	add	r3, r2
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	3301      	adds	r3, #1
 80106ec:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80106ee:	7bfb      	ldrb	r3, [r7, #15]
 80106f0:	1c5a      	adds	r2, r3, #1
 80106f2:	73fa      	strb	r2, [r7, #15]
 80106f4:	461a      	mov	r2, r3
 80106f6:	4b25      	ldr	r3, [pc, #148]	; (801078c <USBD_Get_String_Framework+0xf8>)
 80106f8:	2109      	movs	r1, #9
 80106fa:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
 80106fe:	1c5a      	adds	r2, r3, #1
 8010700:	73fa      	strb	r2, [r7, #15]
 8010702:	461a      	mov	r2, r3
 8010704:	4b21      	ldr	r3, [pc, #132]	; (801078c <USBD_Get_String_Framework+0xf8>)
 8010706:	2104      	movs	r1, #4
 8010708:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	1c5a      	adds	r2, r3, #1
 801070e:	73fa      	strb	r2, [r7, #15]
 8010710:	461a      	mov	r2, r3
 8010712:	4b1e      	ldr	r3, [pc, #120]	; (801078c <USBD_Get_String_Framework+0xf8>)
 8010714:	2102      	movs	r1, #2
 8010716:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 8010718:	7bfb      	ldrb	r3, [r7, #15]
 801071a:	4a1c      	ldr	r2, [pc, #112]	; (801078c <USBD_Get_String_Framework+0xf8>)
 801071c:	4413      	add	r3, r2
 801071e:	f107 020c 	add.w	r2, r7, #12
 8010722:	4619      	mov	r1, r3
 8010724:	481b      	ldr	r0, [pc, #108]	; (8010794 <USBD_Get_String_Framework+0x100>)
 8010726:	f000 f8ab 	bl	8010880 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 801072a:	89bb      	ldrh	r3, [r7, #12]
 801072c:	b2da      	uxtb	r2, r3
 801072e:	7bfb      	ldrb	r3, [r7, #15]
 8010730:	4413      	add	r3, r2
 8010732:	b2db      	uxtb	r3, r3
 8010734:	3301      	adds	r3, #1
 8010736:	73fb      	strb	r3, [r7, #15]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	1c5a      	adds	r2, r3, #1
 801073c:	73fa      	strb	r2, [r7, #15]
 801073e:	461a      	mov	r2, r3
 8010740:	4b12      	ldr	r3, [pc, #72]	; (801078c <USBD_Get_String_Framework+0xf8>)
 8010742:	2109      	movs	r1, #9
 8010744:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8010746:	7bfb      	ldrb	r3, [r7, #15]
 8010748:	1c5a      	adds	r2, r3, #1
 801074a:	73fa      	strb	r2, [r7, #15]
 801074c:	461a      	mov	r2, r3
 801074e:	4b0f      	ldr	r3, [pc, #60]	; (801078c <USBD_Get_String_Framework+0xf8>)
 8010750:	2104      	movs	r1, #4
 8010752:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 8010754:	7bfb      	ldrb	r3, [r7, #15]
 8010756:	1c5a      	adds	r2, r3, #1
 8010758:	73fa      	strb	r2, [r7, #15]
 801075a:	461a      	mov	r2, r3
 801075c:	4b0b      	ldr	r3, [pc, #44]	; (801078c <USBD_Get_String_Framework+0xf8>)
 801075e:	2103      	movs	r1, #3
 8010760:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 8010762:	7bfb      	ldrb	r3, [r7, #15]
 8010764:	4a09      	ldr	r2, [pc, #36]	; (801078c <USBD_Get_String_Framework+0xf8>)
 8010766:	4413      	add	r3, r2
 8010768:	f107 020c 	add.w	r2, r7, #12
 801076c:	4619      	mov	r1, r3
 801076e:	480a      	ldr	r0, [pc, #40]	; (8010798 <USBD_Get_String_Framework+0x104>)
 8010770:	f000 f886 	bl	8010880 <USBD_Desc_GetString>
  /* USER CODE String_Framework1 */

  /* USER CODE String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 8010774:	4805      	ldr	r0, [pc, #20]	; (801078c <USBD_Get_String_Framework+0xf8>)
 8010776:	f7ef fe69 	bl	800044c <strlen>
 801077a:	4602      	mov	r2, r0
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 8010780:	4b02      	ldr	r3, [pc, #8]	; (801078c <USBD_Get_String_Framework+0xf8>)
}
 8010782:	4618      	mov	r0, r3
 8010784:	3710      	adds	r7, #16
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	20006324 	.word	0x20006324
 8010790:	08012750 	.word	0x08012750
 8010794:	08012764 	.word	0x08012764
 8010798:	08012778 	.word	0x08012778

0801079c <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 80107a4:	2300      	movs	r3, #0
 80107a6:	73fb      	strb	r3, [r7, #15]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	73fa      	strb	r2, [r7, #15]
 80107ae:	461a      	mov	r2, r3
 80107b0:	4b0a      	ldr	r3, [pc, #40]	; (80107dc <USBD_Get_Language_Id_Framework+0x40>)
 80107b2:	2109      	movs	r1, #9
 80107b4:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 80107b6:	7bfb      	ldrb	r3, [r7, #15]
 80107b8:	1c5a      	adds	r2, r3, #1
 80107ba:	73fa      	strb	r2, [r7, #15]
 80107bc:	461a      	mov	r2, r3
 80107be:	4b07      	ldr	r3, [pc, #28]	; (80107dc <USBD_Get_Language_Id_Framework+0x40>)
 80107c0:	2104      	movs	r1, #4
 80107c2:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 80107c4:	4805      	ldr	r0, [pc, #20]	; (80107dc <USBD_Get_Language_Id_Framework+0x40>)
 80107c6:	f7ef fe41 	bl	800044c <strlen>
 80107ca:	4602      	mov	r2, r0
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 80107d0:	4b02      	ldr	r3, [pc, #8]	; (80107dc <USBD_Get_Language_Id_Framework+0x40>)
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3710      	adds	r7, #16
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
 80107da:	bf00      	nop
 80107dc:	20006424 	.word	0x20006424

080107e0 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b085      	sub	sp, #20
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	4603      	mov	r3, r0
 80107e8:	460a      	mov	r2, r1
 80107ea:	71fb      	strb	r3, [r7, #7]
 80107ec:	4613      	mov	r3, r2
 80107ee:	71bb      	strb	r3, [r7, #6]
  uint8_t itf_num = 0U;
 80107f0:	2300      	movs	r3, #0
 80107f2:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 80107f4:	2300      	movs	r3, #0
 80107f6:	73bb      	strb	r3, [r7, #14]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 80107f8:	2300      	movs	r3, #0
 80107fa:	73bb      	strb	r3, [r7, #14]
 80107fc:	e021      	b.n	8010842 <USBD_Get_Interface_Number+0x62>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 80107fe:	7bbb      	ldrb	r3, [r7, #14]
 8010800:	4a15      	ldr	r2, [pc, #84]	; (8010858 <USBD_Get_Interface_Number+0x78>)
 8010802:	215c      	movs	r1, #92	; 0x5c
 8010804:	fb01 f303 	mul.w	r3, r1, r3
 8010808:	4413      	add	r3, r2
 801080a:	330c      	adds	r3, #12
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	79fa      	ldrb	r2, [r7, #7]
 8010810:	429a      	cmp	r2, r3
 8010812:	d113      	bne.n	801083c <USBD_Get_Interface_Number+0x5c>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 8010814:	7bbb      	ldrb	r3, [r7, #14]
 8010816:	4a10      	ldr	r2, [pc, #64]	; (8010858 <USBD_Get_Interface_Number+0x78>)
 8010818:	215c      	movs	r1, #92	; 0x5c
 801081a:	fb01 f303 	mul.w	r3, r1, r3
 801081e:	4413      	add	r3, r2
 8010820:	3314      	adds	r3, #20
 8010822:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 8010824:	79ba      	ldrb	r2, [r7, #6]
 8010826:	429a      	cmp	r2, r3
 8010828:	d108      	bne.n	801083c <USBD_Get_Interface_Number+0x5c>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 801082a:	7bbb      	ldrb	r3, [r7, #14]
 801082c:	4a0a      	ldr	r2, [pc, #40]	; (8010858 <USBD_Get_Interface_Number+0x78>)
 801082e:	215c      	movs	r1, #92	; 0x5c
 8010830:	fb01 f303 	mul.w	r3, r1, r3
 8010834:	4413      	add	r3, r2
 8010836:	335a      	adds	r3, #90	; 0x5a
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	73fb      	strb	r3, [r7, #15]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 801083c:	7bbb      	ldrb	r3, [r7, #14]
 801083e:	3301      	adds	r3, #1
 8010840:	73bb      	strb	r3, [r7, #14]
 8010842:	7bbb      	ldrb	r3, [r7, #14]
 8010844:	2b02      	cmp	r3, #2
 8010846:	d9da      	bls.n	80107fe <USBD_Get_Interface_Number+0x1e>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  return itf_num;
 8010848:	7bfb      	ldrb	r3, [r7, #15]
 801084a:	b29b      	uxth	r3, r3
}
 801084c:	4618      	mov	r0, r3
 801084e:	3714      	adds	r7, #20
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr
 8010858:	20005f44 	.word	0x20005f44

0801085c <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 801085c:	b480      	push	{r7}
 801085e:	b085      	sub	sp, #20
 8010860:	af00      	add	r7, sp, #0
 8010862:	4603      	mov	r3, r0
 8010864:	460a      	mov	r2, r1
 8010866:	71fb      	strb	r3, [r7, #7]
 8010868:	4613      	mov	r3, r2
 801086a:	71bb      	strb	r3, [r7, #6]
  uint8_t cfg_num = 1U;
 801086c:	2301      	movs	r3, #1
 801086e:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 8010870:	7bfb      	ldrb	r3, [r7, #15]
 8010872:	b29b      	uxth	r3, r3
}
 8010874:	4618      	mov	r0, r3
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b086      	sub	sp, #24
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801088c:	2300      	movs	r3, #0
 801088e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d023      	beq.n	80108de <USBD_Desc_GetString+0x5e>
  {
    return;
  }

  pdesc = desc;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 801089a:	6938      	ldr	r0, [r7, #16]
 801089c:	f000 f823 	bl	80108e6 <USBD_Desc_GetLen>
 80108a0:	4603      	mov	r3, r0
 80108a2:	b29a      	uxth	r2, r3
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 80108a8:	7dfb      	ldrb	r3, [r7, #23]
 80108aa:	1c5a      	adds	r2, r3, #1
 80108ac:	75fa      	strb	r2, [r7, #23]
 80108ae:	461a      	mov	r2, r3
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	4413      	add	r3, r2
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	7812      	ldrb	r2, [r2, #0]
 80108b8:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 80108ba:	e00b      	b.n	80108d4 <USBD_Desc_GetString+0x54>
  {
    unicode[idx++] = *pdesc;
 80108bc:	7dfb      	ldrb	r3, [r7, #23]
 80108be:	1c5a      	adds	r2, r3, #1
 80108c0:	75fa      	strb	r2, [r7, #23]
 80108c2:	461a      	mov	r2, r3
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	4413      	add	r3, r2
 80108c8:	693a      	ldr	r2, [r7, #16]
 80108ca:	7812      	ldrb	r2, [r2, #0]
 80108cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	3301      	adds	r3, #1
 80108d2:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d1ef      	bne.n	80108bc <USBD_Desc_GetString+0x3c>
 80108dc:	e000      	b.n	80108e0 <USBD_Desc_GetString+0x60>
    return;
 80108de:	bf00      	nop
  }
}
 80108e0:	3718      	adds	r7, #24
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 80108e6:	b480      	push	{r7}
 80108e8:	b085      	sub	sp, #20
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80108ee:	2300      	movs	r3, #0
 80108f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80108f6:	e005      	b.n	8010904 <USBD_Desc_GetLen+0x1e>
  {
    len++;
 80108f8:	7bfb      	ldrb	r3, [r7, #15]
 80108fa:	3301      	adds	r3, #1
 80108fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	3301      	adds	r3, #1
 8010902:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d1f5      	bne.n	80108f8 <USBD_Desc_GetLen+0x12>
  }

  return len;
 801090c:	7bfb      	ldrb	r3, [r7, #15]
}
 801090e:	4618      	mov	r0, r3
 8010910:	3714      	adds	r7, #20
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr
	...

0801091c <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b088      	sub	sp, #32
 8010920:	af02      	add	r7, sp, #8
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
 8010928:	70fb      	strb	r3, [r7, #3]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 801092a:	2300      	movs	r3, #0
 801092c:	75fb      	strb	r3, [r7, #23]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	2200      	movs	r2, #0
 8010932:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  pdev->CurrDevDescSz = 0U;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2200      	movs	r2, #0
 801093a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 801093e:	4a73      	ldr	r2, [pc, #460]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	6013      	str	r3, [r2, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8010944:	4b71      	ldr	r3, [pc, #452]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2212      	movs	r2, #18
 801094a:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 801094c:	4b6f      	ldr	r3, [pc, #444]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2201      	movs	r2, #1
 8010952:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 8010954:	4b6d      	ldr	r3, [pc, #436]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2200      	movs	r2, #0
 801095a:	709a      	strb	r2, [r3, #2]
 801095c:	2200      	movs	r2, #0
 801095e:	f042 0202 	orr.w	r2, r2, #2
 8010962:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 8010964:	4b69      	ldr	r3, [pc, #420]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2200      	movs	r2, #0
 801096a:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 801096c:	4b67      	ldr	r3, [pc, #412]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2200      	movs	r2, #0
 8010972:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 8010974:	4b65      	ldr	r3, [pc, #404]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	2200      	movs	r2, #0
 801097a:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 801097c:	4b63      	ldr	r3, [pc, #396]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2240      	movs	r2, #64	; 0x40
 8010982:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 8010984:	4b61      	ldr	r3, [pc, #388]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2200      	movs	r2, #0
 801098a:	f062 027c 	orn	r2, r2, #124	; 0x7c
 801098e:	721a      	strb	r2, [r3, #8]
 8010990:	2200      	movs	r2, #0
 8010992:	f042 0204 	orr.w	r2, r2, #4
 8010996:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 8010998:	4b5c      	ldr	r3, [pc, #368]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2200      	movs	r2, #0
 801099e:	f042 0210 	orr.w	r2, r2, #16
 80109a2:	729a      	strb	r2, [r3, #10]
 80109a4:	2200      	movs	r2, #0
 80109a6:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80109aa:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 80109ac:	4b57      	ldr	r3, [pc, #348]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2200      	movs	r2, #0
 80109b2:	731a      	strb	r2, [r3, #12]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f042 0202 	orr.w	r2, r2, #2
 80109ba:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 80109bc:	4b53      	ldr	r3, [pc, #332]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2201      	movs	r2, #1
 80109c2:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 80109c4:	4b51      	ldr	r3, [pc, #324]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2202      	movs	r2, #2
 80109ca:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 80109cc:	4b4f      	ldr	r3, [pc, #316]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	2203      	movs	r2, #3
 80109d2:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 80109d4:	4b4d      	ldr	r3, [pc, #308]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2201      	movs	r2, #1
 80109da:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80109e2:	f103 0212 	add.w	r2, r3, #18
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 80109ec:	78fb      	ldrb	r3, [r7, #3]
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d162      	bne.n	8010ab8 <USBD_Device_Framework_Builder+0x19c>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80109f8:	68ba      	ldr	r2, [r7, #8]
 80109fa:	4413      	add	r3, r2
 80109fc:	4a44      	ldr	r2, [pc, #272]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 80109fe:	6013      	str	r3, [r2, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 8010a00:	4b43      	ldr	r3, [pc, #268]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	220a      	movs	r2, #10
 8010a06:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8010a08:	4b41      	ldr	r3, [pc, #260]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2206      	movs	r2, #6
 8010a0e:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 8010a10:	4b3f      	ldr	r3, [pc, #252]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2200      	movs	r2, #0
 8010a16:	709a      	strb	r2, [r3, #2]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f042 0202 	orr.w	r2, r2, #2
 8010a1e:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 8010a20:	4b3b      	ldr	r3, [pc, #236]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	2200      	movs	r2, #0
 8010a26:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 8010a28:	4b39      	ldr	r3, [pc, #228]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 8010a30:	4b37      	ldr	r3, [pc, #220]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2200      	movs	r2, #0
 8010a36:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 8010a38:	4b35      	ldr	r3, [pc, #212]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2240      	movs	r2, #64	; 0x40
 8010a3e:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 8010a40:	4b33      	ldr	r3, [pc, #204]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2201      	movs	r2, #1
 8010a46:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 8010a48:	4b31      	ldr	r3, [pc, #196]	; (8010b10 <USBD_Device_Framework_Builder+0x1f4>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010a56:	f103 020a 	add.w	r2, r3, #10
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8010a60:	e02a      	b.n	8010ab8 <USBD_Device_Framework_Builder+0x19c>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	2b02      	cmp	r3, #2
 8010a68:	d823      	bhi.n	8010ab2 <USBD_Device_Framework_Builder+0x196>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8010a6e:	2b02      	cmp	r3, #2
 8010a70:	d81f      	bhi.n	8010ab2 <USBD_Device_Framework_Builder+0x196>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 8010a72:	7dfb      	ldrb	r3, [r7, #23]
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	4413      	add	r3, r2
 8010a78:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d019      	beq.n	8010ab2 <USBD_Device_Framework_Builder+0x196>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 8010a7e:	7dfb      	ldrb	r3, [r7, #23]
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	4413      	add	r3, r2
      (void)USBD_FrameWork_AddClass(pdev,
 8010a84:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
      (void)USBD_FrameWork_AddClass(pdev,
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	4413      	add	r3, r2
 8010a90:	78fa      	ldrb	r2, [r7, #3]
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	4613      	mov	r3, r2
 8010a96:	2200      	movs	r2, #0
 8010a98:	68f8      	ldr	r0, [r7, #12]
 8010a9a:	f000 f83b 	bl	8010b14 <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	1c5a      	adds	r2, r3, #1
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	1c5a      	adds	r2, r3, #1
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 8010ab2:	7dfb      	ldrb	r3, [r7, #23]
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	75fb      	strb	r3, [r7, #23]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 8010ab8:	7dfb      	ldrb	r3, [r7, #23]
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	d9d1      	bls.n	8010a62 <USBD_Device_Framework_Builder+0x146>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	2b01      	cmp	r3, #1
 8010ac4:	d90c      	bls.n	8010ae0 <USBD_Device_Framework_Builder+0x1c4>
  {
    pDevDesc->bDeviceClass = 0xEF;
 8010ac6:	4b11      	ldr	r3, [pc, #68]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	22ef      	movs	r2, #239	; 0xef
 8010acc:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 8010ace:	4b0f      	ldr	r3, [pc, #60]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2202      	movs	r2, #2
 8010ad4:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 8010ad6:	4b0d      	ldr	r3, [pc, #52]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2201      	movs	r2, #1
 8010adc:	719a      	strb	r2, [r3, #6]
 8010ade:	e00f      	b.n	8010b00 <USBD_Device_Framework_Builder+0x1e4>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	2b02      	cmp	r3, #2
 8010ae6:	d10b      	bne.n	8010b00 <USBD_Device_Framework_Builder+0x1e4>
    {
      pDevDesc->bDeviceClass = 0x02;
 8010ae8:	4b08      	ldr	r3, [pc, #32]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2202      	movs	r2, #2
 8010aee:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 8010af0:	4b06      	ldr	r3, [pc, #24]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	2202      	movs	r2, #2
 8010af6:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 8010af8:	4b04      	ldr	r3, [pc, #16]	; (8010b0c <USBD_Device_Framework_Builder+0x1f0>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	2200      	movs	r2, #0
 8010afe:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 8010b00:	68bb      	ldr	r3, [r7, #8]
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3718      	adds	r7, #24
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	20006428 	.word	0x20006428
 8010b10:	2000642c 	.word	0x2000642c

08010b14 <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	4608      	mov	r0, r1
 8010b1e:	4611      	mov	r1, r2
 8010b20:	461a      	mov	r2, r3
 8010b22:	4603      	mov	r3, r0
 8010b24:	70fb      	strb	r3, [r7, #3]
 8010b26:	460b      	mov	r3, r1
 8010b28:	70bb      	strb	r3, [r7, #2]
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	707b      	strb	r3, [r7, #1]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	2b02      	cmp	r3, #2
 8010b34:	d834      	bhi.n	8010ba0 <USBD_FrameWork_AddClass+0x8c>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	215c      	movs	r1, #92	; 0x5c
 8010b3e:	fb01 f303 	mul.w	r3, r1, r3
 8010b42:	4413      	add	r3, r2
 8010b44:	3318      	adds	r3, #24
 8010b46:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d129      	bne.n	8010ba0 <USBD_FrameWork_AddClass+0x8c>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	6852      	ldr	r2, [r2, #4]
 8010b54:	6879      	ldr	r1, [r7, #4]
 8010b56:	205c      	movs	r0, #92	; 0x5c
 8010b58:	fb00 f303 	mul.w	r3, r0, r3
 8010b5c:	440b      	add	r3, r1
 8010b5e:	3310      	adds	r3, #16
 8010b60:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	215c      	movs	r1, #92	; 0x5c
 8010b6a:	fb01 f303 	mul.w	r3, r1, r3
 8010b6e:	4413      	add	r3, r2
 8010b70:	3318      	adds	r3, #24
 8010b72:	2201      	movs	r2, #1
 8010b74:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	215c      	movs	r1, #92	; 0x5c
 8010b7e:	fb01 f303 	mul.w	r3, r1, r3
 8010b82:	4413      	add	r3, r2
 8010b84:	330c      	adds	r3, #12
 8010b86:	78fa      	ldrb	r2, [r7, #3]
 8010b88:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8010b8a:	787b      	ldrb	r3, [r7, #1]
 8010b8c:	693a      	ldr	r2, [r7, #16]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f000 f80a 	bl	8010baa <USBD_FrameWork_AddToConfDesc>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d001      	beq.n	8010ba0 <USBD_FrameWork_AddClass+0x8c>
    {
      return UX_ERROR;
 8010b9c:	23ff      	movs	r3, #255	; 0xff
 8010b9e:	e000      	b.n	8010ba2 <USBD_FrameWork_AddClass+0x8e>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 8010ba0:	2300      	movs	r3, #0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b086      	sub	sp, #24
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	60f8      	str	r0, [r7, #12]
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	607a      	str	r2, [r7, #4]
 8010bb6:	72fb      	strb	r3, [r7, #11]
  uint8_t interface = 0U;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	75fb      	strb	r3, [r7, #23]
  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* USER CODE FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	7afa      	ldrb	r2, [r7, #11]
 8010bc0:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d107      	bne.n	8010bda <USBD_FrameWork_AddToConfDesc+0x30>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	4610      	mov	r0, r2
 8010bd6:	f000 f8a1 	bl	8010d1c <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	68fa      	ldr	r2, [r7, #12]
 8010be0:	215c      	movs	r1, #92	; 0x5c
 8010be2:	fb01 f303 	mul.w	r3, r1, r3
 8010be6:	4413      	add	r3, r2
 8010be8:	330c      	adds	r3, #12
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	2b02      	cmp	r3, #2
 8010bee:	d162      	bne.n	8010cb6 <USBD_FrameWork_AddToConfDesc+0x10c>
#if USBD_CDC_ACM_CLASS_ACTIVATED == 1

    case CLASS_TYPE_CDC_ACM:

      /* Find the first available interface slot and Assign number of interfaces */
      interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f000 f866 	bl	8010cc2 <USBD_FrameWork_FindFreeIFNbr>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	75fb      	strb	r3, [r7, #23]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	68fa      	ldr	r2, [r7, #12]
 8010c00:	215c      	movs	r1, #92	; 0x5c
 8010c02:	fb01 f303 	mul.w	r3, r1, r3
 8010c06:	4413      	add	r3, r2
 8010c08:	3320      	adds	r3, #32
 8010c0a:	2202      	movs	r2, #2
 8010c0c:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	215c      	movs	r1, #92	; 0x5c
 8010c16:	fb01 f303 	mul.w	r3, r1, r3
 8010c1a:	4413      	add	r3, r2
 8010c1c:	335a      	adds	r3, #90	; 0x5a
 8010c1e:	7dfa      	ldrb	r2, [r7, #23]
 8010c20:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	685b      	ldr	r3, [r3, #4]
 8010c26:	7dfa      	ldrb	r2, [r7, #23]
 8010c28:	3201      	adds	r2, #1
 8010c2a:	b2d0      	uxtb	r0, r2
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	215c      	movs	r1, #92	; 0x5c
 8010c30:	fb01 f303 	mul.w	r3, r1, r3
 8010c34:	4413      	add	r3, r2
 8010c36:	335b      	adds	r3, #91	; 0x5b
 8010c38:	4602      	mov	r2, r0
 8010c3a:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	68fa      	ldr	r2, [r7, #12]
 8010c42:	215c      	movs	r1, #92	; 0x5c
 8010c44:	fb01 f303 	mul.w	r3, r1, r3
 8010c48:	4413      	add	r3, r2
 8010c4a:	331c      	adds	r3, #28
 8010c4c:	2203      	movs	r2, #3
 8010c4e:	601a      	str	r2, [r3, #0]

      /* Check the current speed to assign endpoints */
      if (Speed == USBD_HIGH_SPEED)
 8010c50:	7afb      	ldrb	r3, [r7, #11]
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d114      	bne.n	8010c80 <USBD_FrameWork_AddToConfDesc+0xd6>
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 8010c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c5a:	2202      	movs	r2, #2
 8010c5c:	2101      	movs	r1, #1
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f000 f889 	bl	8010d76 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_HS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 8010c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c68:	2202      	movs	r2, #2
 8010c6a:	2181      	movs	r1, #129	; 0x81
 8010c6c:	68f8      	ldr	r0, [r7, #12]
 8010c6e:	f000 f882 	bl	8010d76 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_HS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 8010c72:	2308      	movs	r3, #8
 8010c74:	2203      	movs	r2, #3
 8010c76:	2182      	movs	r1, #130	; 0x82
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f000 f87c 	bl	8010d76 <USBD_FrameWork_AssignEp>
 8010c7e:	e011      	b.n	8010ca4 <USBD_FrameWork_AddToConfDesc+0xfa>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_HS_MPS);
      }
      else
      {
        /* Assign OUT Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 8010c80:	2340      	movs	r3, #64	; 0x40
 8010c82:	2202      	movs	r2, #2
 8010c84:	2101      	movs	r1, #1
 8010c86:	68f8      	ldr	r0, [r7, #12]
 8010c88:	f000 f875 	bl	8010d76 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPOUT_FS_MPS);

        /* Assign IN Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 8010c8c:	2340      	movs	r3, #64	; 0x40
 8010c8e:	2202      	movs	r2, #2
 8010c90:	2181      	movs	r1, #129	; 0x81
 8010c92:	68f8      	ldr	r0, [r7, #12]
 8010c94:	f000 f86f 	bl	8010d76 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_BULK, USBD_CDCACM_EPIN_FS_MPS);

        /* Assign CMD Endpoint */
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 8010c98:	2308      	movs	r3, #8
 8010c9a:	2203      	movs	r2, #3
 8010c9c:	2182      	movs	r1, #130	; 0x82
 8010c9e:	68f8      	ldr	r0, [r7, #12]
 8010ca0:	f000 f869 	bl	8010d76 <USBD_FrameWork_AssignEp>
                                USBD_EP_TYPE_INTR, USBD_CDCACM_EPINCMD_FS_MPS);
      }

      /* Configure and Append the Descriptor */
      USBD_FrameWork_CDCDesc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8010ca4:	6879      	ldr	r1, [r7, #4]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8010cac:	461a      	mov	r2, r3
 8010cae:	68f8      	ldr	r0, [r7, #12]
 8010cb0:	f000 f8d4 	bl	8010e5c <USBD_FrameWork_CDCDesc>

      break;
 8010cb4:	e000      	b.n	8010cb8 <USBD_FrameWork_AddToConfDesc+0x10e>

    default:
      /* USER CODE FrameWork_AddToConfDesc_2 */

      /* USER CODE FrameWork_AddToConfDesc_2 */
      break;
 8010cb6:	bf00      	nop
  }

  return UX_SUCCESS;
 8010cb8:	2300      	movs	r3, #0
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3718      	adds	r7, #24
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}

08010cc2 <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 8010cc2:	b480      	push	{r7}
 8010cc4:	b087      	sub	sp, #28
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8010cce:	2300      	movs	r3, #0
 8010cd0:	613b      	str	r3, [r7, #16]
 8010cd2:	e016      	b.n	8010d02 <USBD_FrameWork_FindFreeIFNbr+0x40>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	60fb      	str	r3, [r7, #12]
 8010cd8:	e005      	b.n	8010ce6 <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	60fb      	str	r3, [r7, #12]
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	215c      	movs	r1, #92	; 0x5c
 8010cec:	fb01 f303 	mul.w	r3, r1, r3
 8010cf0:	4413      	add	r3, r2
 8010cf2:	3320      	adds	r3, #32
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	68fa      	ldr	r2, [r7, #12]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d3ee      	bcc.n	8010cda <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	613b      	str	r3, [r7, #16]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	689b      	ldr	r3, [r3, #8]
 8010d06:	693a      	ldr	r2, [r7, #16]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d3e3      	bcc.n	8010cd4 <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	b2db      	uxtb	r3, r3
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	371c      	adds	r7, #28
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr

08010d1c <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b085      	sub	sp, #20
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2209      	movs	r2, #9
 8010d2e:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2202      	movs	r2, #2
 8010d34:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	709a      	strb	r2, [r3, #2]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2200      	movs	r2, #0
 8010d44:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2201      	movs	r2, #1
 8010d4a:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	22c0      	movs	r2, #192	; 0xc0
 8010d56:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	2219      	movs	r2, #25
 8010d5c:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f103 0209 	add.w	r2, r3, #9
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	601a      	str	r2, [r3, #0]
}
 8010d6a:	bf00      	nop
 8010d6c:	3714      	adds	r7, #20
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr

08010d76 <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8010d76:	b490      	push	{r4, r7}
 8010d78:	b086      	sub	sp, #24
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	60f8      	str	r0, [r7, #12]
 8010d7e:	607b      	str	r3, [r7, #4]
 8010d80:	460b      	mov	r3, r1
 8010d82:	72fb      	strb	r3, [r7, #11]
 8010d84:	4613      	mov	r3, r2
 8010d86:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8010d8c:	e002      	b.n	8010d94 <USBD_FrameWork_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	3301      	adds	r3, #1
 8010d92:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	215c      	movs	r1, #92	; 0x5c
 8010d9c:	fb01 f303 	mul.w	r3, r1, r3
 8010da0:	4413      	add	r3, r2
 8010da2:	331c      	adds	r3, #28
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	697a      	ldr	r2, [r7, #20]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d210      	bcs.n	8010dce <USBD_FrameWork_AssignEp+0x58>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6858      	ldr	r0, [r3, #4]
 8010db0:	68f9      	ldr	r1, [r7, #12]
 8010db2:	697a      	ldr	r2, [r7, #20]
 8010db4:	4613      	mov	r3, r2
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	4413      	add	r3, r2
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	225c      	movs	r2, #92	; 0x5c
 8010dbe:	fb00 f202 	mul.w	r2, r0, r2
 8010dc2:	4413      	add	r3, r2
 8010dc4:	440b      	add	r3, r1
 8010dc6:	3328      	adds	r3, #40	; 0x28
 8010dc8:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d1df      	bne.n	8010d8e <USBD_FrameWork_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6858      	ldr	r0, [r3, #4]
 8010dd2:	68f9      	ldr	r1, [r7, #12]
 8010dd4:	697a      	ldr	r2, [r7, #20]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	4413      	add	r3, r2
 8010ddc:	005b      	lsls	r3, r3, #1
 8010dde:	225c      	movs	r2, #92	; 0x5c
 8010de0:	fb00 f202 	mul.w	r2, r0, r2
 8010de4:	4413      	add	r3, r2
 8010de6:	440b      	add	r3, r1
 8010de8:	3324      	adds	r3, #36	; 0x24
 8010dea:	7afa      	ldrb	r2, [r7, #11]
 8010dec:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	6858      	ldr	r0, [r3, #4]
 8010df2:	68f9      	ldr	r1, [r7, #12]
 8010df4:	697a      	ldr	r2, [r7, #20]
 8010df6:	4613      	mov	r3, r2
 8010df8:	005b      	lsls	r3, r3, #1
 8010dfa:	4413      	add	r3, r2
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	225c      	movs	r2, #92	; 0x5c
 8010e00:	fb00 f202 	mul.w	r2, r0, r2
 8010e04:	4413      	add	r3, r2
 8010e06:	440b      	add	r3, r1
 8010e08:	3325      	adds	r3, #37	; 0x25
 8010e0a:	7aba      	ldrb	r2, [r7, #10]
 8010e0c:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6858      	ldr	r0, [r3, #4]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	b29c      	uxth	r4, r3
 8010e16:	68f9      	ldr	r1, [r7, #12]
 8010e18:	697a      	ldr	r2, [r7, #20]
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	4413      	add	r3, r2
 8010e20:	005b      	lsls	r3, r3, #1
 8010e22:	225c      	movs	r2, #92	; 0x5c
 8010e24:	fb00 f202 	mul.w	r2, r0, r2
 8010e28:	4413      	add	r3, r2
 8010e2a:	440b      	add	r3, r1
 8010e2c:	3326      	adds	r3, #38	; 0x26
 8010e2e:	4622      	mov	r2, r4
 8010e30:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	6858      	ldr	r0, [r3, #4]
 8010e36:	68f9      	ldr	r1, [r7, #12]
 8010e38:	697a      	ldr	r2, [r7, #20]
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	005b      	lsls	r3, r3, #1
 8010e3e:	4413      	add	r3, r2
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	225c      	movs	r2, #92	; 0x5c
 8010e44:	fb00 f202 	mul.w	r2, r0, r2
 8010e48:	4413      	add	r3, r2
 8010e4a:	440b      	add	r3, r1
 8010e4c:	3328      	adds	r3, #40	; 0x28
 8010e4e:	2201      	movs	r2, #1
 8010e50:	701a      	strb	r2, [r3, #0]
}
 8010e52:	bf00      	nop
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bc90      	pop	{r4, r7}
 8010e5a:	4770      	bx	lr

08010e5c <USBD_FrameWork_CDCDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void USBD_FrameWork_CDCDesc(USBD_DevClassHandleTypeDef *pdev,
                                   uint32_t pConf, uint32_t *Sze)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b085      	sub	sp, #20
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681a      	ldr	r2, [r3, #0]
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	4413      	add	r3, r2
 8010e70:	461a      	mov	r2, r3
 8010e72:	4b99      	ldr	r3, [pc, #612]	; (80110d8 <USBD_FrameWork_CDCDesc+0x27c>)
 8010e74:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 8010e76:	4b98      	ldr	r3, [pc, #608]	; (80110d8 <USBD_FrameWork_CDCDesc+0x27c>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	2208      	movs	r2, #8
 8010e7c:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8010e7e:	4b96      	ldr	r3, [pc, #600]	; (80110d8 <USBD_FrameWork_CDCDesc+0x27c>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	220b      	movs	r2, #11
 8010e84:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	685a      	ldr	r2, [r3, #4]
 8010e8a:	4b93      	ldr	r3, [pc, #588]	; (80110d8 <USBD_FrameWork_CDCDesc+0x27c>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	68f9      	ldr	r1, [r7, #12]
 8010e90:	205c      	movs	r0, #92	; 0x5c
 8010e92:	fb00 f202 	mul.w	r2, r0, r2
 8010e96:	440a      	add	r2, r1
 8010e98:	325a      	adds	r2, #90	; 0x5a
 8010e9a:	7812      	ldrb	r2, [r2, #0]
 8010e9c:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 8010e9e:	4b8e      	ldr	r3, [pc, #568]	; (80110d8 <USBD_FrameWork_CDCDesc+0x27c>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	2202      	movs	r2, #2
 8010ea4:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass = 0x02U;
 8010ea6:	4b8c      	ldr	r3, [pc, #560]	; (80110d8 <USBD_FrameWork_CDCDesc+0x27c>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	2202      	movs	r2, #2
 8010eac:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 8010eae:	4b8a      	ldr	r3, [pc, #552]	; (80110d8 <USBD_FrameWork_CDCDesc+0x27c>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2202      	movs	r2, #2
 8010eb4:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol = 0x01U;
 8010eb6:	4b88      	ldr	r3, [pc, #544]	; (80110d8 <USBD_FrameWork_CDCDesc+0x27c>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2201      	movs	r2, #1
 8010ebc:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction = 0; /* String Index */
 8010ebe:	4b86      	ldr	r3, [pc, #536]	; (80110d8 <USBD_FrameWork_CDCDesc+0x27c>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	71da      	strb	r2, [r3, #7]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	f103 0208 	add.w	r2, r3, #8
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	4413      	add	r3, r2
 8010eda:	461a      	mov	r2, r3
 8010edc:	4b7f      	ldr	r3, [pc, #508]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010ede:	601a      	str	r2, [r3, #0]
 8010ee0:	4b7e      	ldr	r3, [pc, #504]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	2209      	movs	r2, #9
 8010ee6:	701a      	strb	r2, [r3, #0]
 8010ee8:	4b7c      	ldr	r3, [pc, #496]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	2204      	movs	r2, #4
 8010eee:	705a      	strb	r2, [r3, #1]
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	685a      	ldr	r2, [r3, #4]
 8010ef4:	4b79      	ldr	r3, [pc, #484]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	68f9      	ldr	r1, [r7, #12]
 8010efa:	205c      	movs	r0, #92	; 0x5c
 8010efc:	fb00 f202 	mul.w	r2, r0, r2
 8010f00:	440a      	add	r2, r1
 8010f02:	325a      	adds	r2, #90	; 0x5a
 8010f04:	7812      	ldrb	r2, [r2, #0]
 8010f06:	709a      	strb	r2, [r3, #2]
 8010f08:	4b74      	ldr	r3, [pc, #464]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	70da      	strb	r2, [r3, #3]
 8010f10:	4b72      	ldr	r3, [pc, #456]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2201      	movs	r2, #1
 8010f16:	711a      	strb	r2, [r3, #4]
 8010f18:	4b70      	ldr	r3, [pc, #448]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2202      	movs	r2, #2
 8010f1e:	715a      	strb	r2, [r3, #5]
 8010f20:	4b6e      	ldr	r3, [pc, #440]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2202      	movs	r2, #2
 8010f26:	719a      	strb	r2, [r3, #6]
 8010f28:	4b6c      	ldr	r3, [pc, #432]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	71da      	strb	r2, [r3, #7]
 8010f30:	4b6a      	ldr	r3, [pc, #424]	; (80110dc <USBD_FrameWork_CDCDesc+0x280>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2200      	movs	r2, #0
 8010f36:	721a      	strb	r2, [r3, #8]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f103 0209 	add.w	r2, r3, #9
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	601a      	str	r2, [r3, #0]
                          0x02U, 0x01U, 0U);

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	4b64      	ldr	r3, [pc, #400]	; (80110e0 <USBD_FrameWork_CDCDesc+0x284>)
 8010f50:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 8010f52:	4b63      	ldr	r3, [pc, #396]	; (80110e0 <USBD_FrameWork_CDCDesc+0x284>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	2205      	movs	r2, #5
 8010f58:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 8010f5a:	4b61      	ldr	r3, [pc, #388]	; (80110e0 <USBD_FrameWork_CDCDesc+0x284>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2224      	movs	r2, #36	; 0x24
 8010f60:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 8010f62:	4b5f      	ldr	r3, [pc, #380]	; (80110e0 <USBD_FrameWork_CDCDesc+0x284>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2200      	movs	r2, #0
 8010f68:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110;
 8010f6a:	4b5d      	ldr	r3, [pc, #372]	; (80110e0 <USBD_FrameWork_CDCDesc+0x284>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	f042 0210 	orr.w	r2, r2, #16
 8010f74:	70da      	strb	r2, [r3, #3]
 8010f76:	2200      	movs	r2, #0
 8010f78:	f042 0201 	orr.w	r2, r2, #1
 8010f7c:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	1d5a      	adds	r2, r3, #5
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	4413      	add	r3, r2
 8010f90:	461a      	mov	r2, r3
 8010f92:	4b54      	ldr	r3, [pc, #336]	; (80110e4 <USBD_FrameWork_CDCDesc+0x288>)
 8010f94:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 8010f96:	4b53      	ldr	r3, [pc, #332]	; (80110e4 <USBD_FrameWork_CDCDesc+0x288>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2205      	movs	r2, #5
 8010f9c:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 8010f9e:	4b51      	ldr	r3, [pc, #324]	; (80110e4 <USBD_FrameWork_CDCDesc+0x288>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2224      	movs	r2, #36	; 0x24
 8010fa4:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 8010fa6:	4b4f      	ldr	r3, [pc, #316]	; (80110e4 <USBD_FrameWork_CDCDesc+0x288>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2201      	movs	r2, #1
 8010fac:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 8010fae:	4b4d      	ldr	r3, [pc, #308]	; (80110e4 <USBD_FrameWork_CDCDesc+0x288>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	685a      	ldr	r2, [r3, #4]
 8010fba:	4b4a      	ldr	r3, [pc, #296]	; (80110e4 <USBD_FrameWork_CDCDesc+0x288>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	68f9      	ldr	r1, [r7, #12]
 8010fc0:	205c      	movs	r0, #92	; 0x5c
 8010fc2:	fb00 f202 	mul.w	r2, r0, r2
 8010fc6:	440a      	add	r2, r1
 8010fc8:	325b      	adds	r2, #91	; 0x5b
 8010fca:	7812      	ldrb	r2, [r2, #0]
 8010fcc:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	1d5a      	adds	r2, r3, #5
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	4413      	add	r3, r2
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	4b41      	ldr	r3, [pc, #260]	; (80110e8 <USBD_FrameWork_CDCDesc+0x28c>)
 8010fe4:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 8010fe6:	4b40      	ldr	r3, [pc, #256]	; (80110e8 <USBD_FrameWork_CDCDesc+0x28c>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	2204      	movs	r2, #4
 8010fec:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8010fee:	4b3e      	ldr	r3, [pc, #248]	; (80110e8 <USBD_FrameWork_CDCDesc+0x28c>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	2224      	movs	r2, #36	; 0x24
 8010ff4:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 8010ff6:	4b3c      	ldr	r3, [pc, #240]	; (80110e8 <USBD_FrameWork_CDCDesc+0x28c>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	2202      	movs	r2, #2
 8010ffc:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02;
 8010ffe:	4b3a      	ldr	r3, [pc, #232]	; (80110e8 <USBD_FrameWork_CDCDesc+0x28c>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2202      	movs	r2, #2
 8011004:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	1d1a      	adds	r2, r3, #4
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	4413      	add	r3, r2
 8011018:	461a      	mov	r2, r3
 801101a:	4b34      	ldr	r3, [pc, #208]	; (80110ec <USBD_FrameWork_CDCDesc+0x290>)
 801101c:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 801101e:	4b33      	ldr	r3, [pc, #204]	; (80110ec <USBD_FrameWork_CDCDesc+0x290>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2205      	movs	r2, #5
 8011024:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 8011026:	4b31      	ldr	r3, [pc, #196]	; (80110ec <USBD_FrameWork_CDCDesc+0x290>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2224      	movs	r2, #36	; 0x24
 801102c:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 801102e:	4b2f      	ldr	r3, [pc, #188]	; (80110ec <USBD_FrameWork_CDCDesc+0x290>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2206      	movs	r2, #6
 8011034:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	685a      	ldr	r2, [r3, #4]
 801103a:	4b2c      	ldr	r3, [pc, #176]	; (80110ec <USBD_FrameWork_CDCDesc+0x290>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	68f9      	ldr	r1, [r7, #12]
 8011040:	205c      	movs	r0, #92	; 0x5c
 8011042:	fb00 f202 	mul.w	r2, r0, r2
 8011046:	440a      	add	r2, r1
 8011048:	325a      	adds	r2, #90	; 0x5a
 801104a:	7812      	ldrb	r2, [r2, #0]
 801104c:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	685a      	ldr	r2, [r3, #4]
 8011052:	4b26      	ldr	r3, [pc, #152]	; (80110ec <USBD_FrameWork_CDCDesc+0x290>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68f9      	ldr	r1, [r7, #12]
 8011058:	205c      	movs	r0, #92	; 0x5c
 801105a:	fb00 f202 	mul.w	r2, r0, r2
 801105e:	440a      	add	r2, r1
 8011060:	325b      	adds	r2, #91	; 0x5b
 8011062:	7812      	ldrb	r2, [r2, #0]
 8011064:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	1d5a      	adds	r2, r3, #5
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	4413      	add	r3, r2
 8011078:	461a      	mov	r2, r3
 801107a:	4b1d      	ldr	r3, [pc, #116]	; (80110f0 <USBD_FrameWork_CDCDesc+0x294>)
 801107c:	601a      	str	r2, [r3, #0]
 801107e:	4b1c      	ldr	r3, [pc, #112]	; (80110f0 <USBD_FrameWork_CDCDesc+0x294>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	2207      	movs	r2, #7
 8011084:	701a      	strb	r2, [r3, #0]
 8011086:	4b1a      	ldr	r3, [pc, #104]	; (80110f0 <USBD_FrameWork_CDCDesc+0x294>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2205      	movs	r2, #5
 801108c:	705a      	strb	r2, [r3, #1]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	685a      	ldr	r2, [r3, #4]
 8011092:	4b17      	ldr	r3, [pc, #92]	; (80110f0 <USBD_FrameWork_CDCDesc+0x294>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	68f9      	ldr	r1, [r7, #12]
 8011098:	205c      	movs	r0, #92	; 0x5c
 801109a:	fb00 f202 	mul.w	r2, r0, r2
 801109e:	440a      	add	r2, r1
 80110a0:	3230      	adds	r2, #48	; 0x30
 80110a2:	7812      	ldrb	r2, [r2, #0]
 80110a4:	709a      	strb	r2, [r3, #2]
 80110a6:	4b12      	ldr	r3, [pc, #72]	; (80110f0 <USBD_FrameWork_CDCDesc+0x294>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2203      	movs	r2, #3
 80110ac:	70da      	strb	r2, [r3, #3]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	685a      	ldr	r2, [r3, #4]
 80110b2:	4b0f      	ldr	r3, [pc, #60]	; (80110f0 <USBD_FrameWork_CDCDesc+0x294>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	68f9      	ldr	r1, [r7, #12]
 80110b8:	205c      	movs	r0, #92	; 0x5c
 80110ba:	fb00 f202 	mul.w	r2, r0, r2
 80110be:	440a      	add	r2, r1
 80110c0:	3232      	adds	r2, #50	; 0x32
 80110c2:	8812      	ldrh	r2, [r2, #0]
 80110c4:	809a      	strh	r2, [r3, #4]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	2b01      	cmp	r3, #1
 80110cc:	d112      	bne.n	80110f4 <USBD_FrameWork_CDCDesc+0x298>
 80110ce:	4b08      	ldr	r3, [pc, #32]	; (80110f0 <USBD_FrameWork_CDCDesc+0x294>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2205      	movs	r2, #5
 80110d4:	719a      	strb	r2, [r3, #6]
 80110d6:	e011      	b.n	80110fc <USBD_FrameWork_CDCDesc+0x2a0>
 80110d8:	20006430 	.word	0x20006430
 80110dc:	20006434 	.word	0x20006434
 80110e0:	20006438 	.word	0x20006438
 80110e4:	2000643c 	.word	0x2000643c
 80110e8:	20006440 	.word	0x20006440
 80110ec:	20006444 	.word	0x20006444
 80110f0:	20006448 	.word	0x20006448
 80110f4:	4b66      	ldr	r3, [pc, #408]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	2205      	movs	r2, #5
 80110fa:	719a      	strb	r2, [r3, #6]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	1dda      	adds	r2, r3, #7
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	601a      	str	r2, [r3, #0]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	4413      	add	r3, r2
 801110e:	461a      	mov	r2, r3
 8011110:	4b60      	ldr	r3, [pc, #384]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 8011112:	601a      	str	r2, [r3, #0]
 8011114:	4b5f      	ldr	r3, [pc, #380]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2209      	movs	r2, #9
 801111a:	701a      	strb	r2, [r3, #0]
 801111c:	4b5d      	ldr	r3, [pc, #372]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	2204      	movs	r2, #4
 8011122:	705a      	strb	r2, [r3, #1]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	685a      	ldr	r2, [r3, #4]
 8011128:	4b5a      	ldr	r3, [pc, #360]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	68f9      	ldr	r1, [r7, #12]
 801112e:	205c      	movs	r0, #92	; 0x5c
 8011130:	fb00 f202 	mul.w	r2, r0, r2
 8011134:	440a      	add	r2, r1
 8011136:	325b      	adds	r2, #91	; 0x5b
 8011138:	7812      	ldrb	r2, [r2, #0]
 801113a:	709a      	strb	r2, [r3, #2]
 801113c:	4b55      	ldr	r3, [pc, #340]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2200      	movs	r2, #0
 8011142:	70da      	strb	r2, [r3, #3]
 8011144:	4b53      	ldr	r3, [pc, #332]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	2202      	movs	r2, #2
 801114a:	711a      	strb	r2, [r3, #4]
 801114c:	4b51      	ldr	r3, [pc, #324]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	220a      	movs	r2, #10
 8011152:	715a      	strb	r2, [r3, #5]
 8011154:	4b4f      	ldr	r3, [pc, #316]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2200      	movs	r2, #0
 801115a:	719a      	strb	r2, [r3, #6]
 801115c:	4b4d      	ldr	r3, [pc, #308]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2200      	movs	r2, #0
 8011162:	71da      	strb	r2, [r3, #7]
 8011164:	4b4b      	ldr	r3, [pc, #300]	; (8011294 <USBD_FrameWork_CDCDesc+0x438>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2200      	movs	r2, #0
 801116a:	721a      	strb	r2, [r3, #8]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f103 0209 	add.w	r2, r3, #9
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	601a      	str	r2, [r3, #0]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681a      	ldr	r2, [r3, #0]
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	4413      	add	r3, r2
 8011180:	461a      	mov	r2, r3
 8011182:	4b43      	ldr	r3, [pc, #268]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 8011184:	601a      	str	r2, [r3, #0]
 8011186:	4b42      	ldr	r3, [pc, #264]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2207      	movs	r2, #7
 801118c:	701a      	strb	r2, [r3, #0]
 801118e:	4b40      	ldr	r3, [pc, #256]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2205      	movs	r2, #5
 8011194:	705a      	strb	r2, [r3, #1]
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	685a      	ldr	r2, [r3, #4]
 801119a:	4b3d      	ldr	r3, [pc, #244]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	68f9      	ldr	r1, [r7, #12]
 80111a0:	205c      	movs	r0, #92	; 0x5c
 80111a2:	fb00 f202 	mul.w	r2, r0, r2
 80111a6:	440a      	add	r2, r1
 80111a8:	3224      	adds	r2, #36	; 0x24
 80111aa:	7812      	ldrb	r2, [r2, #0]
 80111ac:	709a      	strb	r2, [r3, #2]
 80111ae:	4b38      	ldr	r3, [pc, #224]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	2202      	movs	r2, #2
 80111b4:	70da      	strb	r2, [r3, #3]
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	685a      	ldr	r2, [r3, #4]
 80111ba:	4b35      	ldr	r3, [pc, #212]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	68f9      	ldr	r1, [r7, #12]
 80111c0:	205c      	movs	r0, #92	; 0x5c
 80111c2:	fb00 f202 	mul.w	r2, r0, r2
 80111c6:	440a      	add	r2, r1
 80111c8:	3226      	adds	r2, #38	; 0x26
 80111ca:	8812      	ldrh	r2, [r2, #0]
 80111cc:	809a      	strh	r2, [r3, #4]
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	d104      	bne.n	80111e0 <USBD_FrameWork_CDCDesc+0x384>
 80111d6:	4b2e      	ldr	r3, [pc, #184]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2200      	movs	r2, #0
 80111dc:	719a      	strb	r2, [r3, #6]
 80111de:	e003      	b.n	80111e8 <USBD_FrameWork_CDCDesc+0x38c>
 80111e0:	4b2b      	ldr	r3, [pc, #172]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2200      	movs	r2, #0
 80111e6:	719a      	strb	r2, [r3, #6]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	1dda      	adds	r2, r3, #7
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681a      	ldr	r2, [r3, #0]
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	4413      	add	r3, r2
 80111fa:	461a      	mov	r2, r3
 80111fc:	4b24      	ldr	r3, [pc, #144]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 80111fe:	601a      	str	r2, [r3, #0]
 8011200:	4b23      	ldr	r3, [pc, #140]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2207      	movs	r2, #7
 8011206:	701a      	strb	r2, [r3, #0]
 8011208:	4b21      	ldr	r3, [pc, #132]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2205      	movs	r2, #5
 801120e:	705a      	strb	r2, [r3, #1]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	685a      	ldr	r2, [r3, #4]
 8011214:	4b1e      	ldr	r3, [pc, #120]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	68f9      	ldr	r1, [r7, #12]
 801121a:	205c      	movs	r0, #92	; 0x5c
 801121c:	fb00 f202 	mul.w	r2, r0, r2
 8011220:	440a      	add	r2, r1
 8011222:	322a      	adds	r2, #42	; 0x2a
 8011224:	7812      	ldrb	r2, [r2, #0]
 8011226:	709a      	strb	r2, [r3, #2]
 8011228:	4b19      	ldr	r3, [pc, #100]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	2202      	movs	r2, #2
 801122e:	70da      	strb	r2, [r3, #3]
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	685a      	ldr	r2, [r3, #4]
 8011234:	4b16      	ldr	r3, [pc, #88]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	68f9      	ldr	r1, [r7, #12]
 801123a:	205c      	movs	r0, #92	; 0x5c
 801123c:	fb00 f202 	mul.w	r2, r0, r2
 8011240:	440a      	add	r2, r1
 8011242:	322c      	adds	r2, #44	; 0x2c
 8011244:	8812      	ldrh	r2, [r2, #0]
 8011246:	809a      	strh	r2, [r3, #4]
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	2b01      	cmp	r3, #1
 801124e:	d104      	bne.n	801125a <USBD_FrameWork_CDCDesc+0x3fe>
 8011250:	4b0f      	ldr	r3, [pc, #60]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2200      	movs	r2, #0
 8011256:	719a      	strb	r2, [r3, #6]
 8011258:	e003      	b.n	8011262 <USBD_FrameWork_CDCDesc+0x406>
 801125a:	4b0d      	ldr	r3, [pc, #52]	; (8011290 <USBD_FrameWork_CDCDesc+0x434>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2200      	movs	r2, #0
 8011260:	719a      	strb	r2, [r3, #6]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	1dda      	adds	r2, r3, #7
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	601a      	str	r2, [r3, #0]
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	791a      	ldrb	r2, [r3, #4]
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	3202      	adds	r2, #2
 8011274:	b2d2      	uxtb	r2, r2
 8011276:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681a      	ldr	r2, [r3, #0]
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	b292      	uxth	r2, r2
 8011280:	805a      	strh	r2, [r3, #2]
}
 8011282:	bf00      	nop
 8011284:	3714      	adds	r7, #20
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	20006448 	.word	0x20006448
 8011294:	20006434 	.word	0x20006434

08011298 <malloc>:
 8011298:	4b02      	ldr	r3, [pc, #8]	; (80112a4 <malloc+0xc>)
 801129a:	4601      	mov	r1, r0
 801129c:	6818      	ldr	r0, [r3, #0]
 801129e:	f000 b823 	b.w	80112e8 <_malloc_r>
 80112a2:	bf00      	nop
 80112a4:	200000c4 	.word	0x200000c4

080112a8 <sbrk_aligned>:
 80112a8:	b570      	push	{r4, r5, r6, lr}
 80112aa:	4e0e      	ldr	r6, [pc, #56]	; (80112e4 <sbrk_aligned+0x3c>)
 80112ac:	460c      	mov	r4, r1
 80112ae:	6831      	ldr	r1, [r6, #0]
 80112b0:	4605      	mov	r5, r0
 80112b2:	b911      	cbnz	r1, 80112ba <sbrk_aligned+0x12>
 80112b4:	f000 fbd8 	bl	8011a68 <_sbrk_r>
 80112b8:	6030      	str	r0, [r6, #0]
 80112ba:	4621      	mov	r1, r4
 80112bc:	4628      	mov	r0, r5
 80112be:	f000 fbd3 	bl	8011a68 <_sbrk_r>
 80112c2:	1c43      	adds	r3, r0, #1
 80112c4:	d00a      	beq.n	80112dc <sbrk_aligned+0x34>
 80112c6:	1cc4      	adds	r4, r0, #3
 80112c8:	f024 0403 	bic.w	r4, r4, #3
 80112cc:	42a0      	cmp	r0, r4
 80112ce:	d007      	beq.n	80112e0 <sbrk_aligned+0x38>
 80112d0:	1a21      	subs	r1, r4, r0
 80112d2:	4628      	mov	r0, r5
 80112d4:	f000 fbc8 	bl	8011a68 <_sbrk_r>
 80112d8:	3001      	adds	r0, #1
 80112da:	d101      	bne.n	80112e0 <sbrk_aligned+0x38>
 80112dc:	f04f 34ff 	mov.w	r4, #4294967295
 80112e0:	4620      	mov	r0, r4
 80112e2:	bd70      	pop	{r4, r5, r6, pc}
 80112e4:	20006450 	.word	0x20006450

080112e8 <_malloc_r>:
 80112e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112ec:	1ccd      	adds	r5, r1, #3
 80112ee:	f025 0503 	bic.w	r5, r5, #3
 80112f2:	3508      	adds	r5, #8
 80112f4:	2d0c      	cmp	r5, #12
 80112f6:	bf38      	it	cc
 80112f8:	250c      	movcc	r5, #12
 80112fa:	2d00      	cmp	r5, #0
 80112fc:	4607      	mov	r7, r0
 80112fe:	db01      	blt.n	8011304 <_malloc_r+0x1c>
 8011300:	42a9      	cmp	r1, r5
 8011302:	d905      	bls.n	8011310 <_malloc_r+0x28>
 8011304:	230c      	movs	r3, #12
 8011306:	603b      	str	r3, [r7, #0]
 8011308:	2600      	movs	r6, #0
 801130a:	4630      	mov	r0, r6
 801130c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011310:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80113e4 <_malloc_r+0xfc>
 8011314:	f000 f868 	bl	80113e8 <__malloc_lock>
 8011318:	f8d8 3000 	ldr.w	r3, [r8]
 801131c:	461c      	mov	r4, r3
 801131e:	bb5c      	cbnz	r4, 8011378 <_malloc_r+0x90>
 8011320:	4629      	mov	r1, r5
 8011322:	4638      	mov	r0, r7
 8011324:	f7ff ffc0 	bl	80112a8 <sbrk_aligned>
 8011328:	1c43      	adds	r3, r0, #1
 801132a:	4604      	mov	r4, r0
 801132c:	d155      	bne.n	80113da <_malloc_r+0xf2>
 801132e:	f8d8 4000 	ldr.w	r4, [r8]
 8011332:	4626      	mov	r6, r4
 8011334:	2e00      	cmp	r6, #0
 8011336:	d145      	bne.n	80113c4 <_malloc_r+0xdc>
 8011338:	2c00      	cmp	r4, #0
 801133a:	d048      	beq.n	80113ce <_malloc_r+0xe6>
 801133c:	6823      	ldr	r3, [r4, #0]
 801133e:	4631      	mov	r1, r6
 8011340:	4638      	mov	r0, r7
 8011342:	eb04 0903 	add.w	r9, r4, r3
 8011346:	f000 fb8f 	bl	8011a68 <_sbrk_r>
 801134a:	4581      	cmp	r9, r0
 801134c:	d13f      	bne.n	80113ce <_malloc_r+0xe6>
 801134e:	6821      	ldr	r1, [r4, #0]
 8011350:	1a6d      	subs	r5, r5, r1
 8011352:	4629      	mov	r1, r5
 8011354:	4638      	mov	r0, r7
 8011356:	f7ff ffa7 	bl	80112a8 <sbrk_aligned>
 801135a:	3001      	adds	r0, #1
 801135c:	d037      	beq.n	80113ce <_malloc_r+0xe6>
 801135e:	6823      	ldr	r3, [r4, #0]
 8011360:	442b      	add	r3, r5
 8011362:	6023      	str	r3, [r4, #0]
 8011364:	f8d8 3000 	ldr.w	r3, [r8]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d038      	beq.n	80113de <_malloc_r+0xf6>
 801136c:	685a      	ldr	r2, [r3, #4]
 801136e:	42a2      	cmp	r2, r4
 8011370:	d12b      	bne.n	80113ca <_malloc_r+0xe2>
 8011372:	2200      	movs	r2, #0
 8011374:	605a      	str	r2, [r3, #4]
 8011376:	e00f      	b.n	8011398 <_malloc_r+0xb0>
 8011378:	6822      	ldr	r2, [r4, #0]
 801137a:	1b52      	subs	r2, r2, r5
 801137c:	d41f      	bmi.n	80113be <_malloc_r+0xd6>
 801137e:	2a0b      	cmp	r2, #11
 8011380:	d917      	bls.n	80113b2 <_malloc_r+0xca>
 8011382:	1961      	adds	r1, r4, r5
 8011384:	42a3      	cmp	r3, r4
 8011386:	6025      	str	r5, [r4, #0]
 8011388:	bf18      	it	ne
 801138a:	6059      	strne	r1, [r3, #4]
 801138c:	6863      	ldr	r3, [r4, #4]
 801138e:	bf08      	it	eq
 8011390:	f8c8 1000 	streq.w	r1, [r8]
 8011394:	5162      	str	r2, [r4, r5]
 8011396:	604b      	str	r3, [r1, #4]
 8011398:	4638      	mov	r0, r7
 801139a:	f104 060b 	add.w	r6, r4, #11
 801139e:	f000 f829 	bl	80113f4 <__malloc_unlock>
 80113a2:	f026 0607 	bic.w	r6, r6, #7
 80113a6:	1d23      	adds	r3, r4, #4
 80113a8:	1af2      	subs	r2, r6, r3
 80113aa:	d0ae      	beq.n	801130a <_malloc_r+0x22>
 80113ac:	1b9b      	subs	r3, r3, r6
 80113ae:	50a3      	str	r3, [r4, r2]
 80113b0:	e7ab      	b.n	801130a <_malloc_r+0x22>
 80113b2:	42a3      	cmp	r3, r4
 80113b4:	6862      	ldr	r2, [r4, #4]
 80113b6:	d1dd      	bne.n	8011374 <_malloc_r+0x8c>
 80113b8:	f8c8 2000 	str.w	r2, [r8]
 80113bc:	e7ec      	b.n	8011398 <_malloc_r+0xb0>
 80113be:	4623      	mov	r3, r4
 80113c0:	6864      	ldr	r4, [r4, #4]
 80113c2:	e7ac      	b.n	801131e <_malloc_r+0x36>
 80113c4:	4634      	mov	r4, r6
 80113c6:	6876      	ldr	r6, [r6, #4]
 80113c8:	e7b4      	b.n	8011334 <_malloc_r+0x4c>
 80113ca:	4613      	mov	r3, r2
 80113cc:	e7cc      	b.n	8011368 <_malloc_r+0x80>
 80113ce:	230c      	movs	r3, #12
 80113d0:	603b      	str	r3, [r7, #0]
 80113d2:	4638      	mov	r0, r7
 80113d4:	f000 f80e 	bl	80113f4 <__malloc_unlock>
 80113d8:	e797      	b.n	801130a <_malloc_r+0x22>
 80113da:	6025      	str	r5, [r4, #0]
 80113dc:	e7dc      	b.n	8011398 <_malloc_r+0xb0>
 80113de:	605b      	str	r3, [r3, #4]
 80113e0:	deff      	udf	#255	; 0xff
 80113e2:	bf00      	nop
 80113e4:	2000644c 	.word	0x2000644c

080113e8 <__malloc_lock>:
 80113e8:	4801      	ldr	r0, [pc, #4]	; (80113f0 <__malloc_lock+0x8>)
 80113ea:	f000 bb8a 	b.w	8011b02 <__retarget_lock_acquire_recursive>
 80113ee:	bf00      	nop
 80113f0:	20006594 	.word	0x20006594

080113f4 <__malloc_unlock>:
 80113f4:	4801      	ldr	r0, [pc, #4]	; (80113fc <__malloc_unlock+0x8>)
 80113f6:	f000 bb85 	b.w	8011b04 <__retarget_lock_release_recursive>
 80113fa:	bf00      	nop
 80113fc:	20006594 	.word	0x20006594

08011400 <__sflush_r>:
 8011400:	898a      	ldrh	r2, [r1, #12]
 8011402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011406:	4605      	mov	r5, r0
 8011408:	0710      	lsls	r0, r2, #28
 801140a:	460c      	mov	r4, r1
 801140c:	d458      	bmi.n	80114c0 <__sflush_r+0xc0>
 801140e:	684b      	ldr	r3, [r1, #4]
 8011410:	2b00      	cmp	r3, #0
 8011412:	dc05      	bgt.n	8011420 <__sflush_r+0x20>
 8011414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011416:	2b00      	cmp	r3, #0
 8011418:	dc02      	bgt.n	8011420 <__sflush_r+0x20>
 801141a:	2000      	movs	r0, #0
 801141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011422:	2e00      	cmp	r6, #0
 8011424:	d0f9      	beq.n	801141a <__sflush_r+0x1a>
 8011426:	2300      	movs	r3, #0
 8011428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801142c:	682f      	ldr	r7, [r5, #0]
 801142e:	6a21      	ldr	r1, [r4, #32]
 8011430:	602b      	str	r3, [r5, #0]
 8011432:	d032      	beq.n	801149a <__sflush_r+0x9a>
 8011434:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011436:	89a3      	ldrh	r3, [r4, #12]
 8011438:	075a      	lsls	r2, r3, #29
 801143a:	d505      	bpl.n	8011448 <__sflush_r+0x48>
 801143c:	6863      	ldr	r3, [r4, #4]
 801143e:	1ac0      	subs	r0, r0, r3
 8011440:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011442:	b10b      	cbz	r3, 8011448 <__sflush_r+0x48>
 8011444:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011446:	1ac0      	subs	r0, r0, r3
 8011448:	2300      	movs	r3, #0
 801144a:	4602      	mov	r2, r0
 801144c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801144e:	6a21      	ldr	r1, [r4, #32]
 8011450:	4628      	mov	r0, r5
 8011452:	47b0      	blx	r6
 8011454:	1c43      	adds	r3, r0, #1
 8011456:	89a3      	ldrh	r3, [r4, #12]
 8011458:	d106      	bne.n	8011468 <__sflush_r+0x68>
 801145a:	6829      	ldr	r1, [r5, #0]
 801145c:	291d      	cmp	r1, #29
 801145e:	d82b      	bhi.n	80114b8 <__sflush_r+0xb8>
 8011460:	4a29      	ldr	r2, [pc, #164]	; (8011508 <__sflush_r+0x108>)
 8011462:	410a      	asrs	r2, r1
 8011464:	07d6      	lsls	r6, r2, #31
 8011466:	d427      	bmi.n	80114b8 <__sflush_r+0xb8>
 8011468:	2200      	movs	r2, #0
 801146a:	6062      	str	r2, [r4, #4]
 801146c:	04d9      	lsls	r1, r3, #19
 801146e:	6922      	ldr	r2, [r4, #16]
 8011470:	6022      	str	r2, [r4, #0]
 8011472:	d504      	bpl.n	801147e <__sflush_r+0x7e>
 8011474:	1c42      	adds	r2, r0, #1
 8011476:	d101      	bne.n	801147c <__sflush_r+0x7c>
 8011478:	682b      	ldr	r3, [r5, #0]
 801147a:	b903      	cbnz	r3, 801147e <__sflush_r+0x7e>
 801147c:	6560      	str	r0, [r4, #84]	; 0x54
 801147e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011480:	602f      	str	r7, [r5, #0]
 8011482:	2900      	cmp	r1, #0
 8011484:	d0c9      	beq.n	801141a <__sflush_r+0x1a>
 8011486:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801148a:	4299      	cmp	r1, r3
 801148c:	d002      	beq.n	8011494 <__sflush_r+0x94>
 801148e:	4628      	mov	r0, r5
 8011490:	f000 fb42 	bl	8011b18 <_free_r>
 8011494:	2000      	movs	r0, #0
 8011496:	6360      	str	r0, [r4, #52]	; 0x34
 8011498:	e7c0      	b.n	801141c <__sflush_r+0x1c>
 801149a:	2301      	movs	r3, #1
 801149c:	4628      	mov	r0, r5
 801149e:	47b0      	blx	r6
 80114a0:	1c41      	adds	r1, r0, #1
 80114a2:	d1c8      	bne.n	8011436 <__sflush_r+0x36>
 80114a4:	682b      	ldr	r3, [r5, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d0c5      	beq.n	8011436 <__sflush_r+0x36>
 80114aa:	2b1d      	cmp	r3, #29
 80114ac:	d001      	beq.n	80114b2 <__sflush_r+0xb2>
 80114ae:	2b16      	cmp	r3, #22
 80114b0:	d101      	bne.n	80114b6 <__sflush_r+0xb6>
 80114b2:	602f      	str	r7, [r5, #0]
 80114b4:	e7b1      	b.n	801141a <__sflush_r+0x1a>
 80114b6:	89a3      	ldrh	r3, [r4, #12]
 80114b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114bc:	81a3      	strh	r3, [r4, #12]
 80114be:	e7ad      	b.n	801141c <__sflush_r+0x1c>
 80114c0:	690f      	ldr	r7, [r1, #16]
 80114c2:	2f00      	cmp	r7, #0
 80114c4:	d0a9      	beq.n	801141a <__sflush_r+0x1a>
 80114c6:	0793      	lsls	r3, r2, #30
 80114c8:	680e      	ldr	r6, [r1, #0]
 80114ca:	bf08      	it	eq
 80114cc:	694b      	ldreq	r3, [r1, #20]
 80114ce:	600f      	str	r7, [r1, #0]
 80114d0:	bf18      	it	ne
 80114d2:	2300      	movne	r3, #0
 80114d4:	eba6 0807 	sub.w	r8, r6, r7
 80114d8:	608b      	str	r3, [r1, #8]
 80114da:	f1b8 0f00 	cmp.w	r8, #0
 80114de:	dd9c      	ble.n	801141a <__sflush_r+0x1a>
 80114e0:	6a21      	ldr	r1, [r4, #32]
 80114e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114e4:	4643      	mov	r3, r8
 80114e6:	463a      	mov	r2, r7
 80114e8:	4628      	mov	r0, r5
 80114ea:	47b0      	blx	r6
 80114ec:	2800      	cmp	r0, #0
 80114ee:	dc06      	bgt.n	80114fe <__sflush_r+0xfe>
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114f6:	81a3      	strh	r3, [r4, #12]
 80114f8:	f04f 30ff 	mov.w	r0, #4294967295
 80114fc:	e78e      	b.n	801141c <__sflush_r+0x1c>
 80114fe:	4407      	add	r7, r0
 8011500:	eba8 0800 	sub.w	r8, r8, r0
 8011504:	e7e9      	b.n	80114da <__sflush_r+0xda>
 8011506:	bf00      	nop
 8011508:	dfbffffe 	.word	0xdfbffffe

0801150c <_fflush_r>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	690b      	ldr	r3, [r1, #16]
 8011510:	4605      	mov	r5, r0
 8011512:	460c      	mov	r4, r1
 8011514:	b913      	cbnz	r3, 801151c <_fflush_r+0x10>
 8011516:	2500      	movs	r5, #0
 8011518:	4628      	mov	r0, r5
 801151a:	bd38      	pop	{r3, r4, r5, pc}
 801151c:	b118      	cbz	r0, 8011526 <_fflush_r+0x1a>
 801151e:	6a03      	ldr	r3, [r0, #32]
 8011520:	b90b      	cbnz	r3, 8011526 <_fflush_r+0x1a>
 8011522:	f000 f8bb 	bl	801169c <__sinit>
 8011526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d0f3      	beq.n	8011516 <_fflush_r+0xa>
 801152e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011530:	07d0      	lsls	r0, r2, #31
 8011532:	d404      	bmi.n	801153e <_fflush_r+0x32>
 8011534:	0599      	lsls	r1, r3, #22
 8011536:	d402      	bmi.n	801153e <_fflush_r+0x32>
 8011538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801153a:	f000 fae2 	bl	8011b02 <__retarget_lock_acquire_recursive>
 801153e:	4628      	mov	r0, r5
 8011540:	4621      	mov	r1, r4
 8011542:	f7ff ff5d 	bl	8011400 <__sflush_r>
 8011546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011548:	07da      	lsls	r2, r3, #31
 801154a:	4605      	mov	r5, r0
 801154c:	d4e4      	bmi.n	8011518 <_fflush_r+0xc>
 801154e:	89a3      	ldrh	r3, [r4, #12]
 8011550:	059b      	lsls	r3, r3, #22
 8011552:	d4e1      	bmi.n	8011518 <_fflush_r+0xc>
 8011554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011556:	f000 fad5 	bl	8011b04 <__retarget_lock_release_recursive>
 801155a:	e7dd      	b.n	8011518 <_fflush_r+0xc>

0801155c <fflush>:
 801155c:	4601      	mov	r1, r0
 801155e:	b920      	cbnz	r0, 801156a <fflush+0xe>
 8011560:	4a04      	ldr	r2, [pc, #16]	; (8011574 <fflush+0x18>)
 8011562:	4905      	ldr	r1, [pc, #20]	; (8011578 <fflush+0x1c>)
 8011564:	4805      	ldr	r0, [pc, #20]	; (801157c <fflush+0x20>)
 8011566:	f000 b8b1 	b.w	80116cc <_fwalk_sglue>
 801156a:	4b05      	ldr	r3, [pc, #20]	; (8011580 <fflush+0x24>)
 801156c:	6818      	ldr	r0, [r3, #0]
 801156e:	f7ff bfcd 	b.w	801150c <_fflush_r>
 8011572:	bf00      	nop
 8011574:	2000006c 	.word	0x2000006c
 8011578:	0801150d 	.word	0x0801150d
 801157c:	20000078 	.word	0x20000078
 8011580:	200000c4 	.word	0x200000c4

08011584 <std>:
 8011584:	2300      	movs	r3, #0
 8011586:	b510      	push	{r4, lr}
 8011588:	4604      	mov	r4, r0
 801158a:	e9c0 3300 	strd	r3, r3, [r0]
 801158e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011592:	6083      	str	r3, [r0, #8]
 8011594:	8181      	strh	r1, [r0, #12]
 8011596:	6643      	str	r3, [r0, #100]	; 0x64
 8011598:	81c2      	strh	r2, [r0, #14]
 801159a:	6183      	str	r3, [r0, #24]
 801159c:	4619      	mov	r1, r3
 801159e:	2208      	movs	r2, #8
 80115a0:	305c      	adds	r0, #92	; 0x5c
 80115a2:	f000 f9ff 	bl	80119a4 <memset>
 80115a6:	4b0d      	ldr	r3, [pc, #52]	; (80115dc <std+0x58>)
 80115a8:	6263      	str	r3, [r4, #36]	; 0x24
 80115aa:	4b0d      	ldr	r3, [pc, #52]	; (80115e0 <std+0x5c>)
 80115ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80115ae:	4b0d      	ldr	r3, [pc, #52]	; (80115e4 <std+0x60>)
 80115b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115b2:	4b0d      	ldr	r3, [pc, #52]	; (80115e8 <std+0x64>)
 80115b4:	6323      	str	r3, [r4, #48]	; 0x30
 80115b6:	4b0d      	ldr	r3, [pc, #52]	; (80115ec <std+0x68>)
 80115b8:	6224      	str	r4, [r4, #32]
 80115ba:	429c      	cmp	r4, r3
 80115bc:	d006      	beq.n	80115cc <std+0x48>
 80115be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80115c2:	4294      	cmp	r4, r2
 80115c4:	d002      	beq.n	80115cc <std+0x48>
 80115c6:	33d0      	adds	r3, #208	; 0xd0
 80115c8:	429c      	cmp	r4, r3
 80115ca:	d105      	bne.n	80115d8 <std+0x54>
 80115cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80115d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115d4:	f000 ba94 	b.w	8011b00 <__retarget_lock_init_recursive>
 80115d8:	bd10      	pop	{r4, pc}
 80115da:	bf00      	nop
 80115dc:	080117f5 	.word	0x080117f5
 80115e0:	08011817 	.word	0x08011817
 80115e4:	0801184f 	.word	0x0801184f
 80115e8:	08011873 	.word	0x08011873
 80115ec:	20006454 	.word	0x20006454

080115f0 <stdio_exit_handler>:
 80115f0:	4a02      	ldr	r2, [pc, #8]	; (80115fc <stdio_exit_handler+0xc>)
 80115f2:	4903      	ldr	r1, [pc, #12]	; (8011600 <stdio_exit_handler+0x10>)
 80115f4:	4803      	ldr	r0, [pc, #12]	; (8011604 <stdio_exit_handler+0x14>)
 80115f6:	f000 b869 	b.w	80116cc <_fwalk_sglue>
 80115fa:	bf00      	nop
 80115fc:	2000006c 	.word	0x2000006c
 8011600:	0801150d 	.word	0x0801150d
 8011604:	20000078 	.word	0x20000078

08011608 <cleanup_stdio>:
 8011608:	6841      	ldr	r1, [r0, #4]
 801160a:	4b0c      	ldr	r3, [pc, #48]	; (801163c <cleanup_stdio+0x34>)
 801160c:	4299      	cmp	r1, r3
 801160e:	b510      	push	{r4, lr}
 8011610:	4604      	mov	r4, r0
 8011612:	d001      	beq.n	8011618 <cleanup_stdio+0x10>
 8011614:	f7ff ff7a 	bl	801150c <_fflush_r>
 8011618:	68a1      	ldr	r1, [r4, #8]
 801161a:	4b09      	ldr	r3, [pc, #36]	; (8011640 <cleanup_stdio+0x38>)
 801161c:	4299      	cmp	r1, r3
 801161e:	d002      	beq.n	8011626 <cleanup_stdio+0x1e>
 8011620:	4620      	mov	r0, r4
 8011622:	f7ff ff73 	bl	801150c <_fflush_r>
 8011626:	68e1      	ldr	r1, [r4, #12]
 8011628:	4b06      	ldr	r3, [pc, #24]	; (8011644 <cleanup_stdio+0x3c>)
 801162a:	4299      	cmp	r1, r3
 801162c:	d004      	beq.n	8011638 <cleanup_stdio+0x30>
 801162e:	4620      	mov	r0, r4
 8011630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011634:	f7ff bf6a 	b.w	801150c <_fflush_r>
 8011638:	bd10      	pop	{r4, pc}
 801163a:	bf00      	nop
 801163c:	20006454 	.word	0x20006454
 8011640:	200064bc 	.word	0x200064bc
 8011644:	20006524 	.word	0x20006524

08011648 <global_stdio_init.part.0>:
 8011648:	b510      	push	{r4, lr}
 801164a:	4b0b      	ldr	r3, [pc, #44]	; (8011678 <global_stdio_init.part.0+0x30>)
 801164c:	4c0b      	ldr	r4, [pc, #44]	; (801167c <global_stdio_init.part.0+0x34>)
 801164e:	4a0c      	ldr	r2, [pc, #48]	; (8011680 <global_stdio_init.part.0+0x38>)
 8011650:	601a      	str	r2, [r3, #0]
 8011652:	4620      	mov	r0, r4
 8011654:	2200      	movs	r2, #0
 8011656:	2104      	movs	r1, #4
 8011658:	f7ff ff94 	bl	8011584 <std>
 801165c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011660:	2201      	movs	r2, #1
 8011662:	2109      	movs	r1, #9
 8011664:	f7ff ff8e 	bl	8011584 <std>
 8011668:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801166c:	2202      	movs	r2, #2
 801166e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011672:	2112      	movs	r1, #18
 8011674:	f7ff bf86 	b.w	8011584 <std>
 8011678:	2000658c 	.word	0x2000658c
 801167c:	20006454 	.word	0x20006454
 8011680:	080115f1 	.word	0x080115f1

08011684 <__sfp_lock_acquire>:
 8011684:	4801      	ldr	r0, [pc, #4]	; (801168c <__sfp_lock_acquire+0x8>)
 8011686:	f000 ba3c 	b.w	8011b02 <__retarget_lock_acquire_recursive>
 801168a:	bf00      	nop
 801168c:	20006595 	.word	0x20006595

08011690 <__sfp_lock_release>:
 8011690:	4801      	ldr	r0, [pc, #4]	; (8011698 <__sfp_lock_release+0x8>)
 8011692:	f000 ba37 	b.w	8011b04 <__retarget_lock_release_recursive>
 8011696:	bf00      	nop
 8011698:	20006595 	.word	0x20006595

0801169c <__sinit>:
 801169c:	b510      	push	{r4, lr}
 801169e:	4604      	mov	r4, r0
 80116a0:	f7ff fff0 	bl	8011684 <__sfp_lock_acquire>
 80116a4:	6a23      	ldr	r3, [r4, #32]
 80116a6:	b11b      	cbz	r3, 80116b0 <__sinit+0x14>
 80116a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116ac:	f7ff bff0 	b.w	8011690 <__sfp_lock_release>
 80116b0:	4b04      	ldr	r3, [pc, #16]	; (80116c4 <__sinit+0x28>)
 80116b2:	6223      	str	r3, [r4, #32]
 80116b4:	4b04      	ldr	r3, [pc, #16]	; (80116c8 <__sinit+0x2c>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d1f5      	bne.n	80116a8 <__sinit+0xc>
 80116bc:	f7ff ffc4 	bl	8011648 <global_stdio_init.part.0>
 80116c0:	e7f2      	b.n	80116a8 <__sinit+0xc>
 80116c2:	bf00      	nop
 80116c4:	08011609 	.word	0x08011609
 80116c8:	2000658c 	.word	0x2000658c

080116cc <_fwalk_sglue>:
 80116cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116d0:	4607      	mov	r7, r0
 80116d2:	4688      	mov	r8, r1
 80116d4:	4614      	mov	r4, r2
 80116d6:	2600      	movs	r6, #0
 80116d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116dc:	f1b9 0901 	subs.w	r9, r9, #1
 80116e0:	d505      	bpl.n	80116ee <_fwalk_sglue+0x22>
 80116e2:	6824      	ldr	r4, [r4, #0]
 80116e4:	2c00      	cmp	r4, #0
 80116e6:	d1f7      	bne.n	80116d8 <_fwalk_sglue+0xc>
 80116e8:	4630      	mov	r0, r6
 80116ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116ee:	89ab      	ldrh	r3, [r5, #12]
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d907      	bls.n	8011704 <_fwalk_sglue+0x38>
 80116f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116f8:	3301      	adds	r3, #1
 80116fa:	d003      	beq.n	8011704 <_fwalk_sglue+0x38>
 80116fc:	4629      	mov	r1, r5
 80116fe:	4638      	mov	r0, r7
 8011700:	47c0      	blx	r8
 8011702:	4306      	orrs	r6, r0
 8011704:	3568      	adds	r5, #104	; 0x68
 8011706:	e7e9      	b.n	80116dc <_fwalk_sglue+0x10>

08011708 <iprintf>:
 8011708:	b40f      	push	{r0, r1, r2, r3}
 801170a:	b507      	push	{r0, r1, r2, lr}
 801170c:	4906      	ldr	r1, [pc, #24]	; (8011728 <iprintf+0x20>)
 801170e:	ab04      	add	r3, sp, #16
 8011710:	6808      	ldr	r0, [r1, #0]
 8011712:	f853 2b04 	ldr.w	r2, [r3], #4
 8011716:	6881      	ldr	r1, [r0, #8]
 8011718:	9301      	str	r3, [sp, #4]
 801171a:	f000 fa73 	bl	8011c04 <_vfiprintf_r>
 801171e:	b003      	add	sp, #12
 8011720:	f85d eb04 	ldr.w	lr, [sp], #4
 8011724:	b004      	add	sp, #16
 8011726:	4770      	bx	lr
 8011728:	200000c4 	.word	0x200000c4

0801172c <putchar>:
 801172c:	4b02      	ldr	r3, [pc, #8]	; (8011738 <putchar+0xc>)
 801172e:	4601      	mov	r1, r0
 8011730:	6818      	ldr	r0, [r3, #0]
 8011732:	6882      	ldr	r2, [r0, #8]
 8011734:	f000 bd72 	b.w	801221c <_putc_r>
 8011738:	200000c4 	.word	0x200000c4

0801173c <_puts_r>:
 801173c:	6a03      	ldr	r3, [r0, #32]
 801173e:	b570      	push	{r4, r5, r6, lr}
 8011740:	6884      	ldr	r4, [r0, #8]
 8011742:	4605      	mov	r5, r0
 8011744:	460e      	mov	r6, r1
 8011746:	b90b      	cbnz	r3, 801174c <_puts_r+0x10>
 8011748:	f7ff ffa8 	bl	801169c <__sinit>
 801174c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801174e:	07db      	lsls	r3, r3, #31
 8011750:	d405      	bmi.n	801175e <_puts_r+0x22>
 8011752:	89a3      	ldrh	r3, [r4, #12]
 8011754:	0598      	lsls	r0, r3, #22
 8011756:	d402      	bmi.n	801175e <_puts_r+0x22>
 8011758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801175a:	f000 f9d2 	bl	8011b02 <__retarget_lock_acquire_recursive>
 801175e:	89a3      	ldrh	r3, [r4, #12]
 8011760:	0719      	lsls	r1, r3, #28
 8011762:	d513      	bpl.n	801178c <_puts_r+0x50>
 8011764:	6923      	ldr	r3, [r4, #16]
 8011766:	b18b      	cbz	r3, 801178c <_puts_r+0x50>
 8011768:	3e01      	subs	r6, #1
 801176a:	68a3      	ldr	r3, [r4, #8]
 801176c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011770:	3b01      	subs	r3, #1
 8011772:	60a3      	str	r3, [r4, #8]
 8011774:	b9e9      	cbnz	r1, 80117b2 <_puts_r+0x76>
 8011776:	2b00      	cmp	r3, #0
 8011778:	da2e      	bge.n	80117d8 <_puts_r+0x9c>
 801177a:	4622      	mov	r2, r4
 801177c:	210a      	movs	r1, #10
 801177e:	4628      	mov	r0, r5
 8011780:	f000 f87b 	bl	801187a <__swbuf_r>
 8011784:	3001      	adds	r0, #1
 8011786:	d007      	beq.n	8011798 <_puts_r+0x5c>
 8011788:	250a      	movs	r5, #10
 801178a:	e007      	b.n	801179c <_puts_r+0x60>
 801178c:	4621      	mov	r1, r4
 801178e:	4628      	mov	r0, r5
 8011790:	f000 f8b0 	bl	80118f4 <__swsetup_r>
 8011794:	2800      	cmp	r0, #0
 8011796:	d0e7      	beq.n	8011768 <_puts_r+0x2c>
 8011798:	f04f 35ff 	mov.w	r5, #4294967295
 801179c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801179e:	07da      	lsls	r2, r3, #31
 80117a0:	d405      	bmi.n	80117ae <_puts_r+0x72>
 80117a2:	89a3      	ldrh	r3, [r4, #12]
 80117a4:	059b      	lsls	r3, r3, #22
 80117a6:	d402      	bmi.n	80117ae <_puts_r+0x72>
 80117a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117aa:	f000 f9ab 	bl	8011b04 <__retarget_lock_release_recursive>
 80117ae:	4628      	mov	r0, r5
 80117b0:	bd70      	pop	{r4, r5, r6, pc}
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	da04      	bge.n	80117c0 <_puts_r+0x84>
 80117b6:	69a2      	ldr	r2, [r4, #24]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	dc06      	bgt.n	80117ca <_puts_r+0x8e>
 80117bc:	290a      	cmp	r1, #10
 80117be:	d004      	beq.n	80117ca <_puts_r+0x8e>
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	1c5a      	adds	r2, r3, #1
 80117c4:	6022      	str	r2, [r4, #0]
 80117c6:	7019      	strb	r1, [r3, #0]
 80117c8:	e7cf      	b.n	801176a <_puts_r+0x2e>
 80117ca:	4622      	mov	r2, r4
 80117cc:	4628      	mov	r0, r5
 80117ce:	f000 f854 	bl	801187a <__swbuf_r>
 80117d2:	3001      	adds	r0, #1
 80117d4:	d1c9      	bne.n	801176a <_puts_r+0x2e>
 80117d6:	e7df      	b.n	8011798 <_puts_r+0x5c>
 80117d8:	6823      	ldr	r3, [r4, #0]
 80117da:	250a      	movs	r5, #10
 80117dc:	1c5a      	adds	r2, r3, #1
 80117de:	6022      	str	r2, [r4, #0]
 80117e0:	701d      	strb	r5, [r3, #0]
 80117e2:	e7db      	b.n	801179c <_puts_r+0x60>

080117e4 <puts>:
 80117e4:	4b02      	ldr	r3, [pc, #8]	; (80117f0 <puts+0xc>)
 80117e6:	4601      	mov	r1, r0
 80117e8:	6818      	ldr	r0, [r3, #0]
 80117ea:	f7ff bfa7 	b.w	801173c <_puts_r>
 80117ee:	bf00      	nop
 80117f0:	200000c4 	.word	0x200000c4

080117f4 <__sread>:
 80117f4:	b510      	push	{r4, lr}
 80117f6:	460c      	mov	r4, r1
 80117f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117fc:	f000 f922 	bl	8011a44 <_read_r>
 8011800:	2800      	cmp	r0, #0
 8011802:	bfab      	itete	ge
 8011804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011806:	89a3      	ldrhlt	r3, [r4, #12]
 8011808:	181b      	addge	r3, r3, r0
 801180a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801180e:	bfac      	ite	ge
 8011810:	6563      	strge	r3, [r4, #84]	; 0x54
 8011812:	81a3      	strhlt	r3, [r4, #12]
 8011814:	bd10      	pop	{r4, pc}

08011816 <__swrite>:
 8011816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801181a:	461f      	mov	r7, r3
 801181c:	898b      	ldrh	r3, [r1, #12]
 801181e:	05db      	lsls	r3, r3, #23
 8011820:	4605      	mov	r5, r0
 8011822:	460c      	mov	r4, r1
 8011824:	4616      	mov	r6, r2
 8011826:	d505      	bpl.n	8011834 <__swrite+0x1e>
 8011828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801182c:	2302      	movs	r3, #2
 801182e:	2200      	movs	r2, #0
 8011830:	f000 f8f6 	bl	8011a20 <_lseek_r>
 8011834:	89a3      	ldrh	r3, [r4, #12]
 8011836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801183a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801183e:	81a3      	strh	r3, [r4, #12]
 8011840:	4632      	mov	r2, r6
 8011842:	463b      	mov	r3, r7
 8011844:	4628      	mov	r0, r5
 8011846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801184a:	f000 b91d 	b.w	8011a88 <_write_r>

0801184e <__sseek>:
 801184e:	b510      	push	{r4, lr}
 8011850:	460c      	mov	r4, r1
 8011852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011856:	f000 f8e3 	bl	8011a20 <_lseek_r>
 801185a:	1c43      	adds	r3, r0, #1
 801185c:	89a3      	ldrh	r3, [r4, #12]
 801185e:	bf15      	itete	ne
 8011860:	6560      	strne	r0, [r4, #84]	; 0x54
 8011862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801186a:	81a3      	strheq	r3, [r4, #12]
 801186c:	bf18      	it	ne
 801186e:	81a3      	strhne	r3, [r4, #12]
 8011870:	bd10      	pop	{r4, pc}

08011872 <__sclose>:
 8011872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011876:	f000 b8c3 	b.w	8011a00 <_close_r>

0801187a <__swbuf_r>:
 801187a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187c:	460e      	mov	r6, r1
 801187e:	4614      	mov	r4, r2
 8011880:	4605      	mov	r5, r0
 8011882:	b118      	cbz	r0, 801188c <__swbuf_r+0x12>
 8011884:	6a03      	ldr	r3, [r0, #32]
 8011886:	b90b      	cbnz	r3, 801188c <__swbuf_r+0x12>
 8011888:	f7ff ff08 	bl	801169c <__sinit>
 801188c:	69a3      	ldr	r3, [r4, #24]
 801188e:	60a3      	str	r3, [r4, #8]
 8011890:	89a3      	ldrh	r3, [r4, #12]
 8011892:	071a      	lsls	r2, r3, #28
 8011894:	d525      	bpl.n	80118e2 <__swbuf_r+0x68>
 8011896:	6923      	ldr	r3, [r4, #16]
 8011898:	b31b      	cbz	r3, 80118e2 <__swbuf_r+0x68>
 801189a:	6823      	ldr	r3, [r4, #0]
 801189c:	6922      	ldr	r2, [r4, #16]
 801189e:	1a98      	subs	r0, r3, r2
 80118a0:	6963      	ldr	r3, [r4, #20]
 80118a2:	b2f6      	uxtb	r6, r6
 80118a4:	4283      	cmp	r3, r0
 80118a6:	4637      	mov	r7, r6
 80118a8:	dc04      	bgt.n	80118b4 <__swbuf_r+0x3a>
 80118aa:	4621      	mov	r1, r4
 80118ac:	4628      	mov	r0, r5
 80118ae:	f7ff fe2d 	bl	801150c <_fflush_r>
 80118b2:	b9e0      	cbnz	r0, 80118ee <__swbuf_r+0x74>
 80118b4:	68a3      	ldr	r3, [r4, #8]
 80118b6:	3b01      	subs	r3, #1
 80118b8:	60a3      	str	r3, [r4, #8]
 80118ba:	6823      	ldr	r3, [r4, #0]
 80118bc:	1c5a      	adds	r2, r3, #1
 80118be:	6022      	str	r2, [r4, #0]
 80118c0:	701e      	strb	r6, [r3, #0]
 80118c2:	6962      	ldr	r2, [r4, #20]
 80118c4:	1c43      	adds	r3, r0, #1
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d004      	beq.n	80118d4 <__swbuf_r+0x5a>
 80118ca:	89a3      	ldrh	r3, [r4, #12]
 80118cc:	07db      	lsls	r3, r3, #31
 80118ce:	d506      	bpl.n	80118de <__swbuf_r+0x64>
 80118d0:	2e0a      	cmp	r6, #10
 80118d2:	d104      	bne.n	80118de <__swbuf_r+0x64>
 80118d4:	4621      	mov	r1, r4
 80118d6:	4628      	mov	r0, r5
 80118d8:	f7ff fe18 	bl	801150c <_fflush_r>
 80118dc:	b938      	cbnz	r0, 80118ee <__swbuf_r+0x74>
 80118de:	4638      	mov	r0, r7
 80118e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e2:	4621      	mov	r1, r4
 80118e4:	4628      	mov	r0, r5
 80118e6:	f000 f805 	bl	80118f4 <__swsetup_r>
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d0d5      	beq.n	801189a <__swbuf_r+0x20>
 80118ee:	f04f 37ff 	mov.w	r7, #4294967295
 80118f2:	e7f4      	b.n	80118de <__swbuf_r+0x64>

080118f4 <__swsetup_r>:
 80118f4:	b538      	push	{r3, r4, r5, lr}
 80118f6:	4b2a      	ldr	r3, [pc, #168]	; (80119a0 <__swsetup_r+0xac>)
 80118f8:	4605      	mov	r5, r0
 80118fa:	6818      	ldr	r0, [r3, #0]
 80118fc:	460c      	mov	r4, r1
 80118fe:	b118      	cbz	r0, 8011908 <__swsetup_r+0x14>
 8011900:	6a03      	ldr	r3, [r0, #32]
 8011902:	b90b      	cbnz	r3, 8011908 <__swsetup_r+0x14>
 8011904:	f7ff feca 	bl	801169c <__sinit>
 8011908:	89a3      	ldrh	r3, [r4, #12]
 801190a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801190e:	0718      	lsls	r0, r3, #28
 8011910:	d422      	bmi.n	8011958 <__swsetup_r+0x64>
 8011912:	06d9      	lsls	r1, r3, #27
 8011914:	d407      	bmi.n	8011926 <__swsetup_r+0x32>
 8011916:	2309      	movs	r3, #9
 8011918:	602b      	str	r3, [r5, #0]
 801191a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801191e:	81a3      	strh	r3, [r4, #12]
 8011920:	f04f 30ff 	mov.w	r0, #4294967295
 8011924:	e034      	b.n	8011990 <__swsetup_r+0x9c>
 8011926:	0758      	lsls	r0, r3, #29
 8011928:	d512      	bpl.n	8011950 <__swsetup_r+0x5c>
 801192a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801192c:	b141      	cbz	r1, 8011940 <__swsetup_r+0x4c>
 801192e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011932:	4299      	cmp	r1, r3
 8011934:	d002      	beq.n	801193c <__swsetup_r+0x48>
 8011936:	4628      	mov	r0, r5
 8011938:	f000 f8ee 	bl	8011b18 <_free_r>
 801193c:	2300      	movs	r3, #0
 801193e:	6363      	str	r3, [r4, #52]	; 0x34
 8011940:	89a3      	ldrh	r3, [r4, #12]
 8011942:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011946:	81a3      	strh	r3, [r4, #12]
 8011948:	2300      	movs	r3, #0
 801194a:	6063      	str	r3, [r4, #4]
 801194c:	6923      	ldr	r3, [r4, #16]
 801194e:	6023      	str	r3, [r4, #0]
 8011950:	89a3      	ldrh	r3, [r4, #12]
 8011952:	f043 0308 	orr.w	r3, r3, #8
 8011956:	81a3      	strh	r3, [r4, #12]
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	b94b      	cbnz	r3, 8011970 <__swsetup_r+0x7c>
 801195c:	89a3      	ldrh	r3, [r4, #12]
 801195e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011966:	d003      	beq.n	8011970 <__swsetup_r+0x7c>
 8011968:	4621      	mov	r1, r4
 801196a:	4628      	mov	r0, r5
 801196c:	f000 fc1a 	bl	80121a4 <__smakebuf_r>
 8011970:	89a0      	ldrh	r0, [r4, #12]
 8011972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011976:	f010 0301 	ands.w	r3, r0, #1
 801197a:	d00a      	beq.n	8011992 <__swsetup_r+0x9e>
 801197c:	2300      	movs	r3, #0
 801197e:	60a3      	str	r3, [r4, #8]
 8011980:	6963      	ldr	r3, [r4, #20]
 8011982:	425b      	negs	r3, r3
 8011984:	61a3      	str	r3, [r4, #24]
 8011986:	6923      	ldr	r3, [r4, #16]
 8011988:	b943      	cbnz	r3, 801199c <__swsetup_r+0xa8>
 801198a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801198e:	d1c4      	bne.n	801191a <__swsetup_r+0x26>
 8011990:	bd38      	pop	{r3, r4, r5, pc}
 8011992:	0781      	lsls	r1, r0, #30
 8011994:	bf58      	it	pl
 8011996:	6963      	ldrpl	r3, [r4, #20]
 8011998:	60a3      	str	r3, [r4, #8]
 801199a:	e7f4      	b.n	8011986 <__swsetup_r+0x92>
 801199c:	2000      	movs	r0, #0
 801199e:	e7f7      	b.n	8011990 <__swsetup_r+0x9c>
 80119a0:	200000c4 	.word	0x200000c4

080119a4 <memset>:
 80119a4:	4402      	add	r2, r0
 80119a6:	4603      	mov	r3, r0
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d100      	bne.n	80119ae <memset+0xa>
 80119ac:	4770      	bx	lr
 80119ae:	f803 1b01 	strb.w	r1, [r3], #1
 80119b2:	e7f9      	b.n	80119a8 <memset+0x4>

080119b4 <strncmp>:
 80119b4:	b510      	push	{r4, lr}
 80119b6:	b16a      	cbz	r2, 80119d4 <strncmp+0x20>
 80119b8:	3901      	subs	r1, #1
 80119ba:	1884      	adds	r4, r0, r2
 80119bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d103      	bne.n	80119d0 <strncmp+0x1c>
 80119c8:	42a0      	cmp	r0, r4
 80119ca:	d001      	beq.n	80119d0 <strncmp+0x1c>
 80119cc:	2a00      	cmp	r2, #0
 80119ce:	d1f5      	bne.n	80119bc <strncmp+0x8>
 80119d0:	1ad0      	subs	r0, r2, r3
 80119d2:	bd10      	pop	{r4, pc}
 80119d4:	4610      	mov	r0, r2
 80119d6:	e7fc      	b.n	80119d2 <strncmp+0x1e>

080119d8 <strncpy>:
 80119d8:	b510      	push	{r4, lr}
 80119da:	3901      	subs	r1, #1
 80119dc:	4603      	mov	r3, r0
 80119de:	b132      	cbz	r2, 80119ee <strncpy+0x16>
 80119e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80119e4:	f803 4b01 	strb.w	r4, [r3], #1
 80119e8:	3a01      	subs	r2, #1
 80119ea:	2c00      	cmp	r4, #0
 80119ec:	d1f7      	bne.n	80119de <strncpy+0x6>
 80119ee:	441a      	add	r2, r3
 80119f0:	2100      	movs	r1, #0
 80119f2:	4293      	cmp	r3, r2
 80119f4:	d100      	bne.n	80119f8 <strncpy+0x20>
 80119f6:	bd10      	pop	{r4, pc}
 80119f8:	f803 1b01 	strb.w	r1, [r3], #1
 80119fc:	e7f9      	b.n	80119f2 <strncpy+0x1a>
	...

08011a00 <_close_r>:
 8011a00:	b538      	push	{r3, r4, r5, lr}
 8011a02:	4d06      	ldr	r5, [pc, #24]	; (8011a1c <_close_r+0x1c>)
 8011a04:	2300      	movs	r3, #0
 8011a06:	4604      	mov	r4, r0
 8011a08:	4608      	mov	r0, r1
 8011a0a:	602b      	str	r3, [r5, #0]
 8011a0c:	f7ef fe61 	bl	80016d2 <_close>
 8011a10:	1c43      	adds	r3, r0, #1
 8011a12:	d102      	bne.n	8011a1a <_close_r+0x1a>
 8011a14:	682b      	ldr	r3, [r5, #0]
 8011a16:	b103      	cbz	r3, 8011a1a <_close_r+0x1a>
 8011a18:	6023      	str	r3, [r4, #0]
 8011a1a:	bd38      	pop	{r3, r4, r5, pc}
 8011a1c:	20006590 	.word	0x20006590

08011a20 <_lseek_r>:
 8011a20:	b538      	push	{r3, r4, r5, lr}
 8011a22:	4d07      	ldr	r5, [pc, #28]	; (8011a40 <_lseek_r+0x20>)
 8011a24:	4604      	mov	r4, r0
 8011a26:	4608      	mov	r0, r1
 8011a28:	4611      	mov	r1, r2
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	602a      	str	r2, [r5, #0]
 8011a2e:	461a      	mov	r2, r3
 8011a30:	f7ef fe76 	bl	8001720 <_lseek>
 8011a34:	1c43      	adds	r3, r0, #1
 8011a36:	d102      	bne.n	8011a3e <_lseek_r+0x1e>
 8011a38:	682b      	ldr	r3, [r5, #0]
 8011a3a:	b103      	cbz	r3, 8011a3e <_lseek_r+0x1e>
 8011a3c:	6023      	str	r3, [r4, #0]
 8011a3e:	bd38      	pop	{r3, r4, r5, pc}
 8011a40:	20006590 	.word	0x20006590

08011a44 <_read_r>:
 8011a44:	b538      	push	{r3, r4, r5, lr}
 8011a46:	4d07      	ldr	r5, [pc, #28]	; (8011a64 <_read_r+0x20>)
 8011a48:	4604      	mov	r4, r0
 8011a4a:	4608      	mov	r0, r1
 8011a4c:	4611      	mov	r1, r2
 8011a4e:	2200      	movs	r2, #0
 8011a50:	602a      	str	r2, [r5, #0]
 8011a52:	461a      	mov	r2, r3
 8011a54:	f7ef fe20 	bl	8001698 <_read>
 8011a58:	1c43      	adds	r3, r0, #1
 8011a5a:	d102      	bne.n	8011a62 <_read_r+0x1e>
 8011a5c:	682b      	ldr	r3, [r5, #0]
 8011a5e:	b103      	cbz	r3, 8011a62 <_read_r+0x1e>
 8011a60:	6023      	str	r3, [r4, #0]
 8011a62:	bd38      	pop	{r3, r4, r5, pc}
 8011a64:	20006590 	.word	0x20006590

08011a68 <_sbrk_r>:
 8011a68:	b538      	push	{r3, r4, r5, lr}
 8011a6a:	4d06      	ldr	r5, [pc, #24]	; (8011a84 <_sbrk_r+0x1c>)
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	4604      	mov	r4, r0
 8011a70:	4608      	mov	r0, r1
 8011a72:	602b      	str	r3, [r5, #0]
 8011a74:	f7ef fe62 	bl	800173c <_sbrk>
 8011a78:	1c43      	adds	r3, r0, #1
 8011a7a:	d102      	bne.n	8011a82 <_sbrk_r+0x1a>
 8011a7c:	682b      	ldr	r3, [r5, #0]
 8011a7e:	b103      	cbz	r3, 8011a82 <_sbrk_r+0x1a>
 8011a80:	6023      	str	r3, [r4, #0]
 8011a82:	bd38      	pop	{r3, r4, r5, pc}
 8011a84:	20006590 	.word	0x20006590

08011a88 <_write_r>:
 8011a88:	b538      	push	{r3, r4, r5, lr}
 8011a8a:	4d07      	ldr	r5, [pc, #28]	; (8011aa8 <_write_r+0x20>)
 8011a8c:	4604      	mov	r4, r0
 8011a8e:	4608      	mov	r0, r1
 8011a90:	4611      	mov	r1, r2
 8011a92:	2200      	movs	r2, #0
 8011a94:	602a      	str	r2, [r5, #0]
 8011a96:	461a      	mov	r2, r3
 8011a98:	f7ef fa1e 	bl	8000ed8 <_write>
 8011a9c:	1c43      	adds	r3, r0, #1
 8011a9e:	d102      	bne.n	8011aa6 <_write_r+0x1e>
 8011aa0:	682b      	ldr	r3, [r5, #0]
 8011aa2:	b103      	cbz	r3, 8011aa6 <_write_r+0x1e>
 8011aa4:	6023      	str	r3, [r4, #0]
 8011aa6:	bd38      	pop	{r3, r4, r5, pc}
 8011aa8:	20006590 	.word	0x20006590

08011aac <__errno>:
 8011aac:	4b01      	ldr	r3, [pc, #4]	; (8011ab4 <__errno+0x8>)
 8011aae:	6818      	ldr	r0, [r3, #0]
 8011ab0:	4770      	bx	lr
 8011ab2:	bf00      	nop
 8011ab4:	200000c4 	.word	0x200000c4

08011ab8 <__libc_init_array>:
 8011ab8:	b570      	push	{r4, r5, r6, lr}
 8011aba:	4d0d      	ldr	r5, [pc, #52]	; (8011af0 <__libc_init_array+0x38>)
 8011abc:	4c0d      	ldr	r4, [pc, #52]	; (8011af4 <__libc_init_array+0x3c>)
 8011abe:	1b64      	subs	r4, r4, r5
 8011ac0:	10a4      	asrs	r4, r4, #2
 8011ac2:	2600      	movs	r6, #0
 8011ac4:	42a6      	cmp	r6, r4
 8011ac6:	d109      	bne.n	8011adc <__libc_init_array+0x24>
 8011ac8:	4d0b      	ldr	r5, [pc, #44]	; (8011af8 <__libc_init_array+0x40>)
 8011aca:	4c0c      	ldr	r4, [pc, #48]	; (8011afc <__libc_init_array+0x44>)
 8011acc:	f000 fbfc 	bl	80122c8 <_init>
 8011ad0:	1b64      	subs	r4, r4, r5
 8011ad2:	10a4      	asrs	r4, r4, #2
 8011ad4:	2600      	movs	r6, #0
 8011ad6:	42a6      	cmp	r6, r4
 8011ad8:	d105      	bne.n	8011ae6 <__libc_init_array+0x2e>
 8011ada:	bd70      	pop	{r4, r5, r6, pc}
 8011adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ae0:	4798      	blx	r3
 8011ae2:	3601      	adds	r6, #1
 8011ae4:	e7ee      	b.n	8011ac4 <__libc_init_array+0xc>
 8011ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aea:	4798      	blx	r3
 8011aec:	3601      	adds	r6, #1
 8011aee:	e7f2      	b.n	8011ad6 <__libc_init_array+0x1e>
 8011af0:	08012834 	.word	0x08012834
 8011af4:	08012834 	.word	0x08012834
 8011af8:	08012834 	.word	0x08012834
 8011afc:	08012838 	.word	0x08012838

08011b00 <__retarget_lock_init_recursive>:
 8011b00:	4770      	bx	lr

08011b02 <__retarget_lock_acquire_recursive>:
 8011b02:	4770      	bx	lr

08011b04 <__retarget_lock_release_recursive>:
 8011b04:	4770      	bx	lr

08011b06 <strcpy>:
 8011b06:	4603      	mov	r3, r0
 8011b08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b0c:	f803 2b01 	strb.w	r2, [r3], #1
 8011b10:	2a00      	cmp	r2, #0
 8011b12:	d1f9      	bne.n	8011b08 <strcpy+0x2>
 8011b14:	4770      	bx	lr
	...

08011b18 <_free_r>:
 8011b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b1a:	2900      	cmp	r1, #0
 8011b1c:	d044      	beq.n	8011ba8 <_free_r+0x90>
 8011b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b22:	9001      	str	r0, [sp, #4]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f1a1 0404 	sub.w	r4, r1, #4
 8011b2a:	bfb8      	it	lt
 8011b2c:	18e4      	addlt	r4, r4, r3
 8011b2e:	f7ff fc5b 	bl	80113e8 <__malloc_lock>
 8011b32:	4a1e      	ldr	r2, [pc, #120]	; (8011bac <_free_r+0x94>)
 8011b34:	9801      	ldr	r0, [sp, #4]
 8011b36:	6813      	ldr	r3, [r2, #0]
 8011b38:	b933      	cbnz	r3, 8011b48 <_free_r+0x30>
 8011b3a:	6063      	str	r3, [r4, #4]
 8011b3c:	6014      	str	r4, [r2, #0]
 8011b3e:	b003      	add	sp, #12
 8011b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b44:	f7ff bc56 	b.w	80113f4 <__malloc_unlock>
 8011b48:	42a3      	cmp	r3, r4
 8011b4a:	d908      	bls.n	8011b5e <_free_r+0x46>
 8011b4c:	6825      	ldr	r5, [r4, #0]
 8011b4e:	1961      	adds	r1, r4, r5
 8011b50:	428b      	cmp	r3, r1
 8011b52:	bf01      	itttt	eq
 8011b54:	6819      	ldreq	r1, [r3, #0]
 8011b56:	685b      	ldreq	r3, [r3, #4]
 8011b58:	1949      	addeq	r1, r1, r5
 8011b5a:	6021      	streq	r1, [r4, #0]
 8011b5c:	e7ed      	b.n	8011b3a <_free_r+0x22>
 8011b5e:	461a      	mov	r2, r3
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	b10b      	cbz	r3, 8011b68 <_free_r+0x50>
 8011b64:	42a3      	cmp	r3, r4
 8011b66:	d9fa      	bls.n	8011b5e <_free_r+0x46>
 8011b68:	6811      	ldr	r1, [r2, #0]
 8011b6a:	1855      	adds	r5, r2, r1
 8011b6c:	42a5      	cmp	r5, r4
 8011b6e:	d10b      	bne.n	8011b88 <_free_r+0x70>
 8011b70:	6824      	ldr	r4, [r4, #0]
 8011b72:	4421      	add	r1, r4
 8011b74:	1854      	adds	r4, r2, r1
 8011b76:	42a3      	cmp	r3, r4
 8011b78:	6011      	str	r1, [r2, #0]
 8011b7a:	d1e0      	bne.n	8011b3e <_free_r+0x26>
 8011b7c:	681c      	ldr	r4, [r3, #0]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	6053      	str	r3, [r2, #4]
 8011b82:	440c      	add	r4, r1
 8011b84:	6014      	str	r4, [r2, #0]
 8011b86:	e7da      	b.n	8011b3e <_free_r+0x26>
 8011b88:	d902      	bls.n	8011b90 <_free_r+0x78>
 8011b8a:	230c      	movs	r3, #12
 8011b8c:	6003      	str	r3, [r0, #0]
 8011b8e:	e7d6      	b.n	8011b3e <_free_r+0x26>
 8011b90:	6825      	ldr	r5, [r4, #0]
 8011b92:	1961      	adds	r1, r4, r5
 8011b94:	428b      	cmp	r3, r1
 8011b96:	bf04      	itt	eq
 8011b98:	6819      	ldreq	r1, [r3, #0]
 8011b9a:	685b      	ldreq	r3, [r3, #4]
 8011b9c:	6063      	str	r3, [r4, #4]
 8011b9e:	bf04      	itt	eq
 8011ba0:	1949      	addeq	r1, r1, r5
 8011ba2:	6021      	streq	r1, [r4, #0]
 8011ba4:	6054      	str	r4, [r2, #4]
 8011ba6:	e7ca      	b.n	8011b3e <_free_r+0x26>
 8011ba8:	b003      	add	sp, #12
 8011baa:	bd30      	pop	{r4, r5, pc}
 8011bac:	2000644c 	.word	0x2000644c

08011bb0 <__sfputc_r>:
 8011bb0:	6893      	ldr	r3, [r2, #8]
 8011bb2:	3b01      	subs	r3, #1
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	b410      	push	{r4}
 8011bb8:	6093      	str	r3, [r2, #8]
 8011bba:	da08      	bge.n	8011bce <__sfputc_r+0x1e>
 8011bbc:	6994      	ldr	r4, [r2, #24]
 8011bbe:	42a3      	cmp	r3, r4
 8011bc0:	db01      	blt.n	8011bc6 <__sfputc_r+0x16>
 8011bc2:	290a      	cmp	r1, #10
 8011bc4:	d103      	bne.n	8011bce <__sfputc_r+0x1e>
 8011bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bca:	f7ff be56 	b.w	801187a <__swbuf_r>
 8011bce:	6813      	ldr	r3, [r2, #0]
 8011bd0:	1c58      	adds	r0, r3, #1
 8011bd2:	6010      	str	r0, [r2, #0]
 8011bd4:	7019      	strb	r1, [r3, #0]
 8011bd6:	4608      	mov	r0, r1
 8011bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bdc:	4770      	bx	lr

08011bde <__sfputs_r>:
 8011bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be0:	4606      	mov	r6, r0
 8011be2:	460f      	mov	r7, r1
 8011be4:	4614      	mov	r4, r2
 8011be6:	18d5      	adds	r5, r2, r3
 8011be8:	42ac      	cmp	r4, r5
 8011bea:	d101      	bne.n	8011bf0 <__sfputs_r+0x12>
 8011bec:	2000      	movs	r0, #0
 8011bee:	e007      	b.n	8011c00 <__sfputs_r+0x22>
 8011bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bf4:	463a      	mov	r2, r7
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	f7ff ffda 	bl	8011bb0 <__sfputc_r>
 8011bfc:	1c43      	adds	r3, r0, #1
 8011bfe:	d1f3      	bne.n	8011be8 <__sfputs_r+0xa>
 8011c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c04 <_vfiprintf_r>:
 8011c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c08:	460d      	mov	r5, r1
 8011c0a:	b09d      	sub	sp, #116	; 0x74
 8011c0c:	4614      	mov	r4, r2
 8011c0e:	4698      	mov	r8, r3
 8011c10:	4606      	mov	r6, r0
 8011c12:	b118      	cbz	r0, 8011c1c <_vfiprintf_r+0x18>
 8011c14:	6a03      	ldr	r3, [r0, #32]
 8011c16:	b90b      	cbnz	r3, 8011c1c <_vfiprintf_r+0x18>
 8011c18:	f7ff fd40 	bl	801169c <__sinit>
 8011c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c1e:	07d9      	lsls	r1, r3, #31
 8011c20:	d405      	bmi.n	8011c2e <_vfiprintf_r+0x2a>
 8011c22:	89ab      	ldrh	r3, [r5, #12]
 8011c24:	059a      	lsls	r2, r3, #22
 8011c26:	d402      	bmi.n	8011c2e <_vfiprintf_r+0x2a>
 8011c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c2a:	f7ff ff6a 	bl	8011b02 <__retarget_lock_acquire_recursive>
 8011c2e:	89ab      	ldrh	r3, [r5, #12]
 8011c30:	071b      	lsls	r3, r3, #28
 8011c32:	d501      	bpl.n	8011c38 <_vfiprintf_r+0x34>
 8011c34:	692b      	ldr	r3, [r5, #16]
 8011c36:	b99b      	cbnz	r3, 8011c60 <_vfiprintf_r+0x5c>
 8011c38:	4629      	mov	r1, r5
 8011c3a:	4630      	mov	r0, r6
 8011c3c:	f7ff fe5a 	bl	80118f4 <__swsetup_r>
 8011c40:	b170      	cbz	r0, 8011c60 <_vfiprintf_r+0x5c>
 8011c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c44:	07dc      	lsls	r4, r3, #31
 8011c46:	d504      	bpl.n	8011c52 <_vfiprintf_r+0x4e>
 8011c48:	f04f 30ff 	mov.w	r0, #4294967295
 8011c4c:	b01d      	add	sp, #116	; 0x74
 8011c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c52:	89ab      	ldrh	r3, [r5, #12]
 8011c54:	0598      	lsls	r0, r3, #22
 8011c56:	d4f7      	bmi.n	8011c48 <_vfiprintf_r+0x44>
 8011c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c5a:	f7ff ff53 	bl	8011b04 <__retarget_lock_release_recursive>
 8011c5e:	e7f3      	b.n	8011c48 <_vfiprintf_r+0x44>
 8011c60:	2300      	movs	r3, #0
 8011c62:	9309      	str	r3, [sp, #36]	; 0x24
 8011c64:	2320      	movs	r3, #32
 8011c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c6e:	2330      	movs	r3, #48	; 0x30
 8011c70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011e24 <_vfiprintf_r+0x220>
 8011c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c78:	f04f 0901 	mov.w	r9, #1
 8011c7c:	4623      	mov	r3, r4
 8011c7e:	469a      	mov	sl, r3
 8011c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c84:	b10a      	cbz	r2, 8011c8a <_vfiprintf_r+0x86>
 8011c86:	2a25      	cmp	r2, #37	; 0x25
 8011c88:	d1f9      	bne.n	8011c7e <_vfiprintf_r+0x7a>
 8011c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8011c8e:	d00b      	beq.n	8011ca8 <_vfiprintf_r+0xa4>
 8011c90:	465b      	mov	r3, fp
 8011c92:	4622      	mov	r2, r4
 8011c94:	4629      	mov	r1, r5
 8011c96:	4630      	mov	r0, r6
 8011c98:	f7ff ffa1 	bl	8011bde <__sfputs_r>
 8011c9c:	3001      	adds	r0, #1
 8011c9e:	f000 80a9 	beq.w	8011df4 <_vfiprintf_r+0x1f0>
 8011ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ca4:	445a      	add	r2, fp
 8011ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8011ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f000 80a1 	beq.w	8011df4 <_vfiprintf_r+0x1f0>
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8011cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cbc:	f10a 0a01 	add.w	sl, sl, #1
 8011cc0:	9304      	str	r3, [sp, #16]
 8011cc2:	9307      	str	r3, [sp, #28]
 8011cc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cc8:	931a      	str	r3, [sp, #104]	; 0x68
 8011cca:	4654      	mov	r4, sl
 8011ccc:	2205      	movs	r2, #5
 8011cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cd2:	4854      	ldr	r0, [pc, #336]	; (8011e24 <_vfiprintf_r+0x220>)
 8011cd4:	f7ee fbc4 	bl	8000460 <memchr>
 8011cd8:	9a04      	ldr	r2, [sp, #16]
 8011cda:	b9d8      	cbnz	r0, 8011d14 <_vfiprintf_r+0x110>
 8011cdc:	06d1      	lsls	r1, r2, #27
 8011cde:	bf44      	itt	mi
 8011ce0:	2320      	movmi	r3, #32
 8011ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ce6:	0713      	lsls	r3, r2, #28
 8011ce8:	bf44      	itt	mi
 8011cea:	232b      	movmi	r3, #43	; 0x2b
 8011cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8011cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8011cf6:	d015      	beq.n	8011d24 <_vfiprintf_r+0x120>
 8011cf8:	9a07      	ldr	r2, [sp, #28]
 8011cfa:	4654      	mov	r4, sl
 8011cfc:	2000      	movs	r0, #0
 8011cfe:	f04f 0c0a 	mov.w	ip, #10
 8011d02:	4621      	mov	r1, r4
 8011d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d08:	3b30      	subs	r3, #48	; 0x30
 8011d0a:	2b09      	cmp	r3, #9
 8011d0c:	d94d      	bls.n	8011daa <_vfiprintf_r+0x1a6>
 8011d0e:	b1b0      	cbz	r0, 8011d3e <_vfiprintf_r+0x13a>
 8011d10:	9207      	str	r2, [sp, #28]
 8011d12:	e014      	b.n	8011d3e <_vfiprintf_r+0x13a>
 8011d14:	eba0 0308 	sub.w	r3, r0, r8
 8011d18:	fa09 f303 	lsl.w	r3, r9, r3
 8011d1c:	4313      	orrs	r3, r2
 8011d1e:	9304      	str	r3, [sp, #16]
 8011d20:	46a2      	mov	sl, r4
 8011d22:	e7d2      	b.n	8011cca <_vfiprintf_r+0xc6>
 8011d24:	9b03      	ldr	r3, [sp, #12]
 8011d26:	1d19      	adds	r1, r3, #4
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	9103      	str	r1, [sp, #12]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	bfbb      	ittet	lt
 8011d30:	425b      	neglt	r3, r3
 8011d32:	f042 0202 	orrlt.w	r2, r2, #2
 8011d36:	9307      	strge	r3, [sp, #28]
 8011d38:	9307      	strlt	r3, [sp, #28]
 8011d3a:	bfb8      	it	lt
 8011d3c:	9204      	strlt	r2, [sp, #16]
 8011d3e:	7823      	ldrb	r3, [r4, #0]
 8011d40:	2b2e      	cmp	r3, #46	; 0x2e
 8011d42:	d10c      	bne.n	8011d5e <_vfiprintf_r+0x15a>
 8011d44:	7863      	ldrb	r3, [r4, #1]
 8011d46:	2b2a      	cmp	r3, #42	; 0x2a
 8011d48:	d134      	bne.n	8011db4 <_vfiprintf_r+0x1b0>
 8011d4a:	9b03      	ldr	r3, [sp, #12]
 8011d4c:	1d1a      	adds	r2, r3, #4
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	9203      	str	r2, [sp, #12]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	bfb8      	it	lt
 8011d56:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d5a:	3402      	adds	r4, #2
 8011d5c:	9305      	str	r3, [sp, #20]
 8011d5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011e34 <_vfiprintf_r+0x230>
 8011d62:	7821      	ldrb	r1, [r4, #0]
 8011d64:	2203      	movs	r2, #3
 8011d66:	4650      	mov	r0, sl
 8011d68:	f7ee fb7a 	bl	8000460 <memchr>
 8011d6c:	b138      	cbz	r0, 8011d7e <_vfiprintf_r+0x17a>
 8011d6e:	9b04      	ldr	r3, [sp, #16]
 8011d70:	eba0 000a 	sub.w	r0, r0, sl
 8011d74:	2240      	movs	r2, #64	; 0x40
 8011d76:	4082      	lsls	r2, r0
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	3401      	adds	r4, #1
 8011d7c:	9304      	str	r3, [sp, #16]
 8011d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d82:	4829      	ldr	r0, [pc, #164]	; (8011e28 <_vfiprintf_r+0x224>)
 8011d84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d88:	2206      	movs	r2, #6
 8011d8a:	f7ee fb69 	bl	8000460 <memchr>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d03f      	beq.n	8011e12 <_vfiprintf_r+0x20e>
 8011d92:	4b26      	ldr	r3, [pc, #152]	; (8011e2c <_vfiprintf_r+0x228>)
 8011d94:	bb1b      	cbnz	r3, 8011dde <_vfiprintf_r+0x1da>
 8011d96:	9b03      	ldr	r3, [sp, #12]
 8011d98:	3307      	adds	r3, #7
 8011d9a:	f023 0307 	bic.w	r3, r3, #7
 8011d9e:	3308      	adds	r3, #8
 8011da0:	9303      	str	r3, [sp, #12]
 8011da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011da4:	443b      	add	r3, r7
 8011da6:	9309      	str	r3, [sp, #36]	; 0x24
 8011da8:	e768      	b.n	8011c7c <_vfiprintf_r+0x78>
 8011daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dae:	460c      	mov	r4, r1
 8011db0:	2001      	movs	r0, #1
 8011db2:	e7a6      	b.n	8011d02 <_vfiprintf_r+0xfe>
 8011db4:	2300      	movs	r3, #0
 8011db6:	3401      	adds	r4, #1
 8011db8:	9305      	str	r3, [sp, #20]
 8011dba:	4619      	mov	r1, r3
 8011dbc:	f04f 0c0a 	mov.w	ip, #10
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dc6:	3a30      	subs	r2, #48	; 0x30
 8011dc8:	2a09      	cmp	r2, #9
 8011dca:	d903      	bls.n	8011dd4 <_vfiprintf_r+0x1d0>
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d0c6      	beq.n	8011d5e <_vfiprintf_r+0x15a>
 8011dd0:	9105      	str	r1, [sp, #20]
 8011dd2:	e7c4      	b.n	8011d5e <_vfiprintf_r+0x15a>
 8011dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dd8:	4604      	mov	r4, r0
 8011dda:	2301      	movs	r3, #1
 8011ddc:	e7f0      	b.n	8011dc0 <_vfiprintf_r+0x1bc>
 8011dde:	ab03      	add	r3, sp, #12
 8011de0:	9300      	str	r3, [sp, #0]
 8011de2:	462a      	mov	r2, r5
 8011de4:	4b12      	ldr	r3, [pc, #72]	; (8011e30 <_vfiprintf_r+0x22c>)
 8011de6:	a904      	add	r1, sp, #16
 8011de8:	4630      	mov	r0, r6
 8011dea:	f3af 8000 	nop.w
 8011dee:	4607      	mov	r7, r0
 8011df0:	1c78      	adds	r0, r7, #1
 8011df2:	d1d6      	bne.n	8011da2 <_vfiprintf_r+0x19e>
 8011df4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011df6:	07d9      	lsls	r1, r3, #31
 8011df8:	d405      	bmi.n	8011e06 <_vfiprintf_r+0x202>
 8011dfa:	89ab      	ldrh	r3, [r5, #12]
 8011dfc:	059a      	lsls	r2, r3, #22
 8011dfe:	d402      	bmi.n	8011e06 <_vfiprintf_r+0x202>
 8011e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e02:	f7ff fe7f 	bl	8011b04 <__retarget_lock_release_recursive>
 8011e06:	89ab      	ldrh	r3, [r5, #12]
 8011e08:	065b      	lsls	r3, r3, #25
 8011e0a:	f53f af1d 	bmi.w	8011c48 <_vfiprintf_r+0x44>
 8011e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e10:	e71c      	b.n	8011c4c <_vfiprintf_r+0x48>
 8011e12:	ab03      	add	r3, sp, #12
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	462a      	mov	r2, r5
 8011e18:	4b05      	ldr	r3, [pc, #20]	; (8011e30 <_vfiprintf_r+0x22c>)
 8011e1a:	a904      	add	r1, sp, #16
 8011e1c:	4630      	mov	r0, r6
 8011e1e:	f000 f879 	bl	8011f14 <_printf_i>
 8011e22:	e7e4      	b.n	8011dee <_vfiprintf_r+0x1ea>
 8011e24:	080127f8 	.word	0x080127f8
 8011e28:	08012802 	.word	0x08012802
 8011e2c:	00000000 	.word	0x00000000
 8011e30:	08011bdf 	.word	0x08011bdf
 8011e34:	080127fe 	.word	0x080127fe

08011e38 <_printf_common>:
 8011e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e3c:	4616      	mov	r6, r2
 8011e3e:	4699      	mov	r9, r3
 8011e40:	688a      	ldr	r2, [r1, #8]
 8011e42:	690b      	ldr	r3, [r1, #16]
 8011e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e48:	4293      	cmp	r3, r2
 8011e4a:	bfb8      	it	lt
 8011e4c:	4613      	movlt	r3, r2
 8011e4e:	6033      	str	r3, [r6, #0]
 8011e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e54:	4607      	mov	r7, r0
 8011e56:	460c      	mov	r4, r1
 8011e58:	b10a      	cbz	r2, 8011e5e <_printf_common+0x26>
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	6033      	str	r3, [r6, #0]
 8011e5e:	6823      	ldr	r3, [r4, #0]
 8011e60:	0699      	lsls	r1, r3, #26
 8011e62:	bf42      	ittt	mi
 8011e64:	6833      	ldrmi	r3, [r6, #0]
 8011e66:	3302      	addmi	r3, #2
 8011e68:	6033      	strmi	r3, [r6, #0]
 8011e6a:	6825      	ldr	r5, [r4, #0]
 8011e6c:	f015 0506 	ands.w	r5, r5, #6
 8011e70:	d106      	bne.n	8011e80 <_printf_common+0x48>
 8011e72:	f104 0a19 	add.w	sl, r4, #25
 8011e76:	68e3      	ldr	r3, [r4, #12]
 8011e78:	6832      	ldr	r2, [r6, #0]
 8011e7a:	1a9b      	subs	r3, r3, r2
 8011e7c:	42ab      	cmp	r3, r5
 8011e7e:	dc26      	bgt.n	8011ece <_printf_common+0x96>
 8011e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e84:	1e13      	subs	r3, r2, #0
 8011e86:	6822      	ldr	r2, [r4, #0]
 8011e88:	bf18      	it	ne
 8011e8a:	2301      	movne	r3, #1
 8011e8c:	0692      	lsls	r2, r2, #26
 8011e8e:	d42b      	bmi.n	8011ee8 <_printf_common+0xb0>
 8011e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e94:	4649      	mov	r1, r9
 8011e96:	4638      	mov	r0, r7
 8011e98:	47c0      	blx	r8
 8011e9a:	3001      	adds	r0, #1
 8011e9c:	d01e      	beq.n	8011edc <_printf_common+0xa4>
 8011e9e:	6823      	ldr	r3, [r4, #0]
 8011ea0:	6922      	ldr	r2, [r4, #16]
 8011ea2:	f003 0306 	and.w	r3, r3, #6
 8011ea6:	2b04      	cmp	r3, #4
 8011ea8:	bf02      	ittt	eq
 8011eaa:	68e5      	ldreq	r5, [r4, #12]
 8011eac:	6833      	ldreq	r3, [r6, #0]
 8011eae:	1aed      	subeq	r5, r5, r3
 8011eb0:	68a3      	ldr	r3, [r4, #8]
 8011eb2:	bf0c      	ite	eq
 8011eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011eb8:	2500      	movne	r5, #0
 8011eba:	4293      	cmp	r3, r2
 8011ebc:	bfc4      	itt	gt
 8011ebe:	1a9b      	subgt	r3, r3, r2
 8011ec0:	18ed      	addgt	r5, r5, r3
 8011ec2:	2600      	movs	r6, #0
 8011ec4:	341a      	adds	r4, #26
 8011ec6:	42b5      	cmp	r5, r6
 8011ec8:	d11a      	bne.n	8011f00 <_printf_common+0xc8>
 8011eca:	2000      	movs	r0, #0
 8011ecc:	e008      	b.n	8011ee0 <_printf_common+0xa8>
 8011ece:	2301      	movs	r3, #1
 8011ed0:	4652      	mov	r2, sl
 8011ed2:	4649      	mov	r1, r9
 8011ed4:	4638      	mov	r0, r7
 8011ed6:	47c0      	blx	r8
 8011ed8:	3001      	adds	r0, #1
 8011eda:	d103      	bne.n	8011ee4 <_printf_common+0xac>
 8011edc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ee4:	3501      	adds	r5, #1
 8011ee6:	e7c6      	b.n	8011e76 <_printf_common+0x3e>
 8011ee8:	18e1      	adds	r1, r4, r3
 8011eea:	1c5a      	adds	r2, r3, #1
 8011eec:	2030      	movs	r0, #48	; 0x30
 8011eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ef2:	4422      	add	r2, r4
 8011ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011efc:	3302      	adds	r3, #2
 8011efe:	e7c7      	b.n	8011e90 <_printf_common+0x58>
 8011f00:	2301      	movs	r3, #1
 8011f02:	4622      	mov	r2, r4
 8011f04:	4649      	mov	r1, r9
 8011f06:	4638      	mov	r0, r7
 8011f08:	47c0      	blx	r8
 8011f0a:	3001      	adds	r0, #1
 8011f0c:	d0e6      	beq.n	8011edc <_printf_common+0xa4>
 8011f0e:	3601      	adds	r6, #1
 8011f10:	e7d9      	b.n	8011ec6 <_printf_common+0x8e>
	...

08011f14 <_printf_i>:
 8011f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f18:	7e0f      	ldrb	r7, [r1, #24]
 8011f1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f1c:	2f78      	cmp	r7, #120	; 0x78
 8011f1e:	4691      	mov	r9, r2
 8011f20:	4680      	mov	r8, r0
 8011f22:	460c      	mov	r4, r1
 8011f24:	469a      	mov	sl, r3
 8011f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011f2a:	d807      	bhi.n	8011f3c <_printf_i+0x28>
 8011f2c:	2f62      	cmp	r7, #98	; 0x62
 8011f2e:	d80a      	bhi.n	8011f46 <_printf_i+0x32>
 8011f30:	2f00      	cmp	r7, #0
 8011f32:	f000 80d4 	beq.w	80120de <_printf_i+0x1ca>
 8011f36:	2f58      	cmp	r7, #88	; 0x58
 8011f38:	f000 80c0 	beq.w	80120bc <_printf_i+0x1a8>
 8011f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011f44:	e03a      	b.n	8011fbc <_printf_i+0xa8>
 8011f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f4a:	2b15      	cmp	r3, #21
 8011f4c:	d8f6      	bhi.n	8011f3c <_printf_i+0x28>
 8011f4e:	a101      	add	r1, pc, #4	; (adr r1, 8011f54 <_printf_i+0x40>)
 8011f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f54:	08011fad 	.word	0x08011fad
 8011f58:	08011fc1 	.word	0x08011fc1
 8011f5c:	08011f3d 	.word	0x08011f3d
 8011f60:	08011f3d 	.word	0x08011f3d
 8011f64:	08011f3d 	.word	0x08011f3d
 8011f68:	08011f3d 	.word	0x08011f3d
 8011f6c:	08011fc1 	.word	0x08011fc1
 8011f70:	08011f3d 	.word	0x08011f3d
 8011f74:	08011f3d 	.word	0x08011f3d
 8011f78:	08011f3d 	.word	0x08011f3d
 8011f7c:	08011f3d 	.word	0x08011f3d
 8011f80:	080120c5 	.word	0x080120c5
 8011f84:	08011fed 	.word	0x08011fed
 8011f88:	0801207f 	.word	0x0801207f
 8011f8c:	08011f3d 	.word	0x08011f3d
 8011f90:	08011f3d 	.word	0x08011f3d
 8011f94:	080120e7 	.word	0x080120e7
 8011f98:	08011f3d 	.word	0x08011f3d
 8011f9c:	08011fed 	.word	0x08011fed
 8011fa0:	08011f3d 	.word	0x08011f3d
 8011fa4:	08011f3d 	.word	0x08011f3d
 8011fa8:	08012087 	.word	0x08012087
 8011fac:	682b      	ldr	r3, [r5, #0]
 8011fae:	1d1a      	adds	r2, r3, #4
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	602a      	str	r2, [r5, #0]
 8011fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	e09f      	b.n	8012100 <_printf_i+0x1ec>
 8011fc0:	6820      	ldr	r0, [r4, #0]
 8011fc2:	682b      	ldr	r3, [r5, #0]
 8011fc4:	0607      	lsls	r7, r0, #24
 8011fc6:	f103 0104 	add.w	r1, r3, #4
 8011fca:	6029      	str	r1, [r5, #0]
 8011fcc:	d501      	bpl.n	8011fd2 <_printf_i+0xbe>
 8011fce:	681e      	ldr	r6, [r3, #0]
 8011fd0:	e003      	b.n	8011fda <_printf_i+0xc6>
 8011fd2:	0646      	lsls	r6, r0, #25
 8011fd4:	d5fb      	bpl.n	8011fce <_printf_i+0xba>
 8011fd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011fda:	2e00      	cmp	r6, #0
 8011fdc:	da03      	bge.n	8011fe6 <_printf_i+0xd2>
 8011fde:	232d      	movs	r3, #45	; 0x2d
 8011fe0:	4276      	negs	r6, r6
 8011fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fe6:	485a      	ldr	r0, [pc, #360]	; (8012150 <_printf_i+0x23c>)
 8011fe8:	230a      	movs	r3, #10
 8011fea:	e012      	b.n	8012012 <_printf_i+0xfe>
 8011fec:	682b      	ldr	r3, [r5, #0]
 8011fee:	6820      	ldr	r0, [r4, #0]
 8011ff0:	1d19      	adds	r1, r3, #4
 8011ff2:	6029      	str	r1, [r5, #0]
 8011ff4:	0605      	lsls	r5, r0, #24
 8011ff6:	d501      	bpl.n	8011ffc <_printf_i+0xe8>
 8011ff8:	681e      	ldr	r6, [r3, #0]
 8011ffa:	e002      	b.n	8012002 <_printf_i+0xee>
 8011ffc:	0641      	lsls	r1, r0, #25
 8011ffe:	d5fb      	bpl.n	8011ff8 <_printf_i+0xe4>
 8012000:	881e      	ldrh	r6, [r3, #0]
 8012002:	4853      	ldr	r0, [pc, #332]	; (8012150 <_printf_i+0x23c>)
 8012004:	2f6f      	cmp	r7, #111	; 0x6f
 8012006:	bf0c      	ite	eq
 8012008:	2308      	moveq	r3, #8
 801200a:	230a      	movne	r3, #10
 801200c:	2100      	movs	r1, #0
 801200e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012012:	6865      	ldr	r5, [r4, #4]
 8012014:	60a5      	str	r5, [r4, #8]
 8012016:	2d00      	cmp	r5, #0
 8012018:	bfa2      	ittt	ge
 801201a:	6821      	ldrge	r1, [r4, #0]
 801201c:	f021 0104 	bicge.w	r1, r1, #4
 8012020:	6021      	strge	r1, [r4, #0]
 8012022:	b90e      	cbnz	r6, 8012028 <_printf_i+0x114>
 8012024:	2d00      	cmp	r5, #0
 8012026:	d04b      	beq.n	80120c0 <_printf_i+0x1ac>
 8012028:	4615      	mov	r5, r2
 801202a:	fbb6 f1f3 	udiv	r1, r6, r3
 801202e:	fb03 6711 	mls	r7, r3, r1, r6
 8012032:	5dc7      	ldrb	r7, [r0, r7]
 8012034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012038:	4637      	mov	r7, r6
 801203a:	42bb      	cmp	r3, r7
 801203c:	460e      	mov	r6, r1
 801203e:	d9f4      	bls.n	801202a <_printf_i+0x116>
 8012040:	2b08      	cmp	r3, #8
 8012042:	d10b      	bne.n	801205c <_printf_i+0x148>
 8012044:	6823      	ldr	r3, [r4, #0]
 8012046:	07de      	lsls	r6, r3, #31
 8012048:	d508      	bpl.n	801205c <_printf_i+0x148>
 801204a:	6923      	ldr	r3, [r4, #16]
 801204c:	6861      	ldr	r1, [r4, #4]
 801204e:	4299      	cmp	r1, r3
 8012050:	bfde      	ittt	le
 8012052:	2330      	movle	r3, #48	; 0x30
 8012054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012058:	f105 35ff 	addle.w	r5, r5, #4294967295
 801205c:	1b52      	subs	r2, r2, r5
 801205e:	6122      	str	r2, [r4, #16]
 8012060:	f8cd a000 	str.w	sl, [sp]
 8012064:	464b      	mov	r3, r9
 8012066:	aa03      	add	r2, sp, #12
 8012068:	4621      	mov	r1, r4
 801206a:	4640      	mov	r0, r8
 801206c:	f7ff fee4 	bl	8011e38 <_printf_common>
 8012070:	3001      	adds	r0, #1
 8012072:	d14a      	bne.n	801210a <_printf_i+0x1f6>
 8012074:	f04f 30ff 	mov.w	r0, #4294967295
 8012078:	b004      	add	sp, #16
 801207a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801207e:	6823      	ldr	r3, [r4, #0]
 8012080:	f043 0320 	orr.w	r3, r3, #32
 8012084:	6023      	str	r3, [r4, #0]
 8012086:	4833      	ldr	r0, [pc, #204]	; (8012154 <_printf_i+0x240>)
 8012088:	2778      	movs	r7, #120	; 0x78
 801208a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801208e:	6823      	ldr	r3, [r4, #0]
 8012090:	6829      	ldr	r1, [r5, #0]
 8012092:	061f      	lsls	r7, r3, #24
 8012094:	f851 6b04 	ldr.w	r6, [r1], #4
 8012098:	d402      	bmi.n	80120a0 <_printf_i+0x18c>
 801209a:	065f      	lsls	r7, r3, #25
 801209c:	bf48      	it	mi
 801209e:	b2b6      	uxthmi	r6, r6
 80120a0:	07df      	lsls	r7, r3, #31
 80120a2:	bf48      	it	mi
 80120a4:	f043 0320 	orrmi.w	r3, r3, #32
 80120a8:	6029      	str	r1, [r5, #0]
 80120aa:	bf48      	it	mi
 80120ac:	6023      	strmi	r3, [r4, #0]
 80120ae:	b91e      	cbnz	r6, 80120b8 <_printf_i+0x1a4>
 80120b0:	6823      	ldr	r3, [r4, #0]
 80120b2:	f023 0320 	bic.w	r3, r3, #32
 80120b6:	6023      	str	r3, [r4, #0]
 80120b8:	2310      	movs	r3, #16
 80120ba:	e7a7      	b.n	801200c <_printf_i+0xf8>
 80120bc:	4824      	ldr	r0, [pc, #144]	; (8012150 <_printf_i+0x23c>)
 80120be:	e7e4      	b.n	801208a <_printf_i+0x176>
 80120c0:	4615      	mov	r5, r2
 80120c2:	e7bd      	b.n	8012040 <_printf_i+0x12c>
 80120c4:	682b      	ldr	r3, [r5, #0]
 80120c6:	6826      	ldr	r6, [r4, #0]
 80120c8:	6961      	ldr	r1, [r4, #20]
 80120ca:	1d18      	adds	r0, r3, #4
 80120cc:	6028      	str	r0, [r5, #0]
 80120ce:	0635      	lsls	r5, r6, #24
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	d501      	bpl.n	80120d8 <_printf_i+0x1c4>
 80120d4:	6019      	str	r1, [r3, #0]
 80120d6:	e002      	b.n	80120de <_printf_i+0x1ca>
 80120d8:	0670      	lsls	r0, r6, #25
 80120da:	d5fb      	bpl.n	80120d4 <_printf_i+0x1c0>
 80120dc:	8019      	strh	r1, [r3, #0]
 80120de:	2300      	movs	r3, #0
 80120e0:	6123      	str	r3, [r4, #16]
 80120e2:	4615      	mov	r5, r2
 80120e4:	e7bc      	b.n	8012060 <_printf_i+0x14c>
 80120e6:	682b      	ldr	r3, [r5, #0]
 80120e8:	1d1a      	adds	r2, r3, #4
 80120ea:	602a      	str	r2, [r5, #0]
 80120ec:	681d      	ldr	r5, [r3, #0]
 80120ee:	6862      	ldr	r2, [r4, #4]
 80120f0:	2100      	movs	r1, #0
 80120f2:	4628      	mov	r0, r5
 80120f4:	f7ee f9b4 	bl	8000460 <memchr>
 80120f8:	b108      	cbz	r0, 80120fe <_printf_i+0x1ea>
 80120fa:	1b40      	subs	r0, r0, r5
 80120fc:	6060      	str	r0, [r4, #4]
 80120fe:	6863      	ldr	r3, [r4, #4]
 8012100:	6123      	str	r3, [r4, #16]
 8012102:	2300      	movs	r3, #0
 8012104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012108:	e7aa      	b.n	8012060 <_printf_i+0x14c>
 801210a:	6923      	ldr	r3, [r4, #16]
 801210c:	462a      	mov	r2, r5
 801210e:	4649      	mov	r1, r9
 8012110:	4640      	mov	r0, r8
 8012112:	47d0      	blx	sl
 8012114:	3001      	adds	r0, #1
 8012116:	d0ad      	beq.n	8012074 <_printf_i+0x160>
 8012118:	6823      	ldr	r3, [r4, #0]
 801211a:	079b      	lsls	r3, r3, #30
 801211c:	d413      	bmi.n	8012146 <_printf_i+0x232>
 801211e:	68e0      	ldr	r0, [r4, #12]
 8012120:	9b03      	ldr	r3, [sp, #12]
 8012122:	4298      	cmp	r0, r3
 8012124:	bfb8      	it	lt
 8012126:	4618      	movlt	r0, r3
 8012128:	e7a6      	b.n	8012078 <_printf_i+0x164>
 801212a:	2301      	movs	r3, #1
 801212c:	4632      	mov	r2, r6
 801212e:	4649      	mov	r1, r9
 8012130:	4640      	mov	r0, r8
 8012132:	47d0      	blx	sl
 8012134:	3001      	adds	r0, #1
 8012136:	d09d      	beq.n	8012074 <_printf_i+0x160>
 8012138:	3501      	adds	r5, #1
 801213a:	68e3      	ldr	r3, [r4, #12]
 801213c:	9903      	ldr	r1, [sp, #12]
 801213e:	1a5b      	subs	r3, r3, r1
 8012140:	42ab      	cmp	r3, r5
 8012142:	dcf2      	bgt.n	801212a <_printf_i+0x216>
 8012144:	e7eb      	b.n	801211e <_printf_i+0x20a>
 8012146:	2500      	movs	r5, #0
 8012148:	f104 0619 	add.w	r6, r4, #25
 801214c:	e7f5      	b.n	801213a <_printf_i+0x226>
 801214e:	bf00      	nop
 8012150:	08012809 	.word	0x08012809
 8012154:	0801281a 	.word	0x0801281a

08012158 <__swhatbuf_r>:
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	460c      	mov	r4, r1
 801215c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012160:	2900      	cmp	r1, #0
 8012162:	b096      	sub	sp, #88	; 0x58
 8012164:	4615      	mov	r5, r2
 8012166:	461e      	mov	r6, r3
 8012168:	da0d      	bge.n	8012186 <__swhatbuf_r+0x2e>
 801216a:	89a3      	ldrh	r3, [r4, #12]
 801216c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012170:	f04f 0100 	mov.w	r1, #0
 8012174:	bf0c      	ite	eq
 8012176:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801217a:	2340      	movne	r3, #64	; 0x40
 801217c:	2000      	movs	r0, #0
 801217e:	6031      	str	r1, [r6, #0]
 8012180:	602b      	str	r3, [r5, #0]
 8012182:	b016      	add	sp, #88	; 0x58
 8012184:	bd70      	pop	{r4, r5, r6, pc}
 8012186:	466a      	mov	r2, sp
 8012188:	f000 f87c 	bl	8012284 <_fstat_r>
 801218c:	2800      	cmp	r0, #0
 801218e:	dbec      	blt.n	801216a <__swhatbuf_r+0x12>
 8012190:	9901      	ldr	r1, [sp, #4]
 8012192:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012196:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801219a:	4259      	negs	r1, r3
 801219c:	4159      	adcs	r1, r3
 801219e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121a2:	e7eb      	b.n	801217c <__swhatbuf_r+0x24>

080121a4 <__smakebuf_r>:
 80121a4:	898b      	ldrh	r3, [r1, #12]
 80121a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80121a8:	079d      	lsls	r5, r3, #30
 80121aa:	4606      	mov	r6, r0
 80121ac:	460c      	mov	r4, r1
 80121ae:	d507      	bpl.n	80121c0 <__smakebuf_r+0x1c>
 80121b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80121b4:	6023      	str	r3, [r4, #0]
 80121b6:	6123      	str	r3, [r4, #16]
 80121b8:	2301      	movs	r3, #1
 80121ba:	6163      	str	r3, [r4, #20]
 80121bc:	b002      	add	sp, #8
 80121be:	bd70      	pop	{r4, r5, r6, pc}
 80121c0:	ab01      	add	r3, sp, #4
 80121c2:	466a      	mov	r2, sp
 80121c4:	f7ff ffc8 	bl	8012158 <__swhatbuf_r>
 80121c8:	9900      	ldr	r1, [sp, #0]
 80121ca:	4605      	mov	r5, r0
 80121cc:	4630      	mov	r0, r6
 80121ce:	f7ff f88b 	bl	80112e8 <_malloc_r>
 80121d2:	b948      	cbnz	r0, 80121e8 <__smakebuf_r+0x44>
 80121d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121d8:	059a      	lsls	r2, r3, #22
 80121da:	d4ef      	bmi.n	80121bc <__smakebuf_r+0x18>
 80121dc:	f023 0303 	bic.w	r3, r3, #3
 80121e0:	f043 0302 	orr.w	r3, r3, #2
 80121e4:	81a3      	strh	r3, [r4, #12]
 80121e6:	e7e3      	b.n	80121b0 <__smakebuf_r+0xc>
 80121e8:	89a3      	ldrh	r3, [r4, #12]
 80121ea:	6020      	str	r0, [r4, #0]
 80121ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121f0:	81a3      	strh	r3, [r4, #12]
 80121f2:	9b00      	ldr	r3, [sp, #0]
 80121f4:	6163      	str	r3, [r4, #20]
 80121f6:	9b01      	ldr	r3, [sp, #4]
 80121f8:	6120      	str	r0, [r4, #16]
 80121fa:	b15b      	cbz	r3, 8012214 <__smakebuf_r+0x70>
 80121fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012200:	4630      	mov	r0, r6
 8012202:	f000 f851 	bl	80122a8 <_isatty_r>
 8012206:	b128      	cbz	r0, 8012214 <__smakebuf_r+0x70>
 8012208:	89a3      	ldrh	r3, [r4, #12]
 801220a:	f023 0303 	bic.w	r3, r3, #3
 801220e:	f043 0301 	orr.w	r3, r3, #1
 8012212:	81a3      	strh	r3, [r4, #12]
 8012214:	89a3      	ldrh	r3, [r4, #12]
 8012216:	431d      	orrs	r5, r3
 8012218:	81a5      	strh	r5, [r4, #12]
 801221a:	e7cf      	b.n	80121bc <__smakebuf_r+0x18>

0801221c <_putc_r>:
 801221c:	b570      	push	{r4, r5, r6, lr}
 801221e:	460d      	mov	r5, r1
 8012220:	4614      	mov	r4, r2
 8012222:	4606      	mov	r6, r0
 8012224:	b118      	cbz	r0, 801222e <_putc_r+0x12>
 8012226:	6a03      	ldr	r3, [r0, #32]
 8012228:	b90b      	cbnz	r3, 801222e <_putc_r+0x12>
 801222a:	f7ff fa37 	bl	801169c <__sinit>
 801222e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012230:	07d8      	lsls	r0, r3, #31
 8012232:	d405      	bmi.n	8012240 <_putc_r+0x24>
 8012234:	89a3      	ldrh	r3, [r4, #12]
 8012236:	0599      	lsls	r1, r3, #22
 8012238:	d402      	bmi.n	8012240 <_putc_r+0x24>
 801223a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801223c:	f7ff fc61 	bl	8011b02 <__retarget_lock_acquire_recursive>
 8012240:	68a3      	ldr	r3, [r4, #8]
 8012242:	3b01      	subs	r3, #1
 8012244:	2b00      	cmp	r3, #0
 8012246:	60a3      	str	r3, [r4, #8]
 8012248:	da05      	bge.n	8012256 <_putc_r+0x3a>
 801224a:	69a2      	ldr	r2, [r4, #24]
 801224c:	4293      	cmp	r3, r2
 801224e:	db12      	blt.n	8012276 <_putc_r+0x5a>
 8012250:	b2eb      	uxtb	r3, r5
 8012252:	2b0a      	cmp	r3, #10
 8012254:	d00f      	beq.n	8012276 <_putc_r+0x5a>
 8012256:	6823      	ldr	r3, [r4, #0]
 8012258:	1c5a      	adds	r2, r3, #1
 801225a:	6022      	str	r2, [r4, #0]
 801225c:	701d      	strb	r5, [r3, #0]
 801225e:	b2ed      	uxtb	r5, r5
 8012260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012262:	07da      	lsls	r2, r3, #31
 8012264:	d405      	bmi.n	8012272 <_putc_r+0x56>
 8012266:	89a3      	ldrh	r3, [r4, #12]
 8012268:	059b      	lsls	r3, r3, #22
 801226a:	d402      	bmi.n	8012272 <_putc_r+0x56>
 801226c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801226e:	f7ff fc49 	bl	8011b04 <__retarget_lock_release_recursive>
 8012272:	4628      	mov	r0, r5
 8012274:	bd70      	pop	{r4, r5, r6, pc}
 8012276:	4629      	mov	r1, r5
 8012278:	4622      	mov	r2, r4
 801227a:	4630      	mov	r0, r6
 801227c:	f7ff fafd 	bl	801187a <__swbuf_r>
 8012280:	4605      	mov	r5, r0
 8012282:	e7ed      	b.n	8012260 <_putc_r+0x44>

08012284 <_fstat_r>:
 8012284:	b538      	push	{r3, r4, r5, lr}
 8012286:	4d07      	ldr	r5, [pc, #28]	; (80122a4 <_fstat_r+0x20>)
 8012288:	2300      	movs	r3, #0
 801228a:	4604      	mov	r4, r0
 801228c:	4608      	mov	r0, r1
 801228e:	4611      	mov	r1, r2
 8012290:	602b      	str	r3, [r5, #0]
 8012292:	f7ef fa2a 	bl	80016ea <_fstat>
 8012296:	1c43      	adds	r3, r0, #1
 8012298:	d102      	bne.n	80122a0 <_fstat_r+0x1c>
 801229a:	682b      	ldr	r3, [r5, #0]
 801229c:	b103      	cbz	r3, 80122a0 <_fstat_r+0x1c>
 801229e:	6023      	str	r3, [r4, #0]
 80122a0:	bd38      	pop	{r3, r4, r5, pc}
 80122a2:	bf00      	nop
 80122a4:	20006590 	.word	0x20006590

080122a8 <_isatty_r>:
 80122a8:	b538      	push	{r3, r4, r5, lr}
 80122aa:	4d06      	ldr	r5, [pc, #24]	; (80122c4 <_isatty_r+0x1c>)
 80122ac:	2300      	movs	r3, #0
 80122ae:	4604      	mov	r4, r0
 80122b0:	4608      	mov	r0, r1
 80122b2:	602b      	str	r3, [r5, #0]
 80122b4:	f7ef fa29 	bl	800170a <_isatty>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d102      	bne.n	80122c2 <_isatty_r+0x1a>
 80122bc:	682b      	ldr	r3, [r5, #0]
 80122be:	b103      	cbz	r3, 80122c2 <_isatty_r+0x1a>
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	20006590 	.word	0x20006590

080122c8 <_init>:
 80122c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ca:	bf00      	nop
 80122cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122ce:	bc08      	pop	{r3}
 80122d0:	469e      	mov	lr, r3
 80122d2:	4770      	bx	lr

080122d4 <_fini>:
 80122d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122d6:	bf00      	nop
 80122d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122da:	bc08      	pop	{r3}
 80122dc:	469e      	mov	lr, r3
 80122de:	4770      	bx	lr
